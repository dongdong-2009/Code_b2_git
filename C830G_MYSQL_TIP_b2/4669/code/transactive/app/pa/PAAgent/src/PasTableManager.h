/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/pa/PAAgent/src/PasTableManager.h $
  * @author:  Ripple
  * @version: $Revision: #3 $
  *
  * Last modification: $DateTime: 2011/05/12 17:46:29 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  PasTableManager.h
//  Implementation of the Class PasTableManager
//  Generated by Enterprise Architect
//  Created on:      25-Sep-2003 18:53:34
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(PasTableManager_B323CC80_49BA_4d42_98A5_8CE9884F7924__INCLUDED_)
#define PasTableManager_B323CC80_49BA_4d42_98A5_8CE9884F7924__INCLUDED_


#include "core/threads/src/Thread.h"
#include "core/synchronisation/src/NonReEntrantThreadLockable.h"
#include "bus/event/src/Scheduler.h"
#include "app/pa/PAAgent/src/PASConnection.h"
#include "app/pa/PAAgent/src/AbstractWriteablePASTable.h"
#include "app/pa/PAAgent/src/Table100.h"
#include "app/pa/PAAgent/src/Table200.h"
#include "app/pa/PAAgent/src/Table1200.h"
#include "app/pa/PAAgent/src/Table201.h"
#include "app/pa/PAAgent/src/Table1201.h"
#include "app/pa/PAAgent/src/Table202.h"
#include "app/pa/PAAgent/src/Table204.h"
#include "app/pa/PAAgent/src/Table1204.h"
#include "app/pa/PAAgent/src/Table301.h"
#include "app/pa/PAAgent/src/Table1301.h"
#include "app/pa/PAAgent/src/Table302.h"
#include "app/pa/PAAgent/src/Table303.h"
#include "app/pa/PAAgent/src/Table1303.h"
#include "app/pa/PAAgent/src/Table350.h"
#include "app/pa/PAAgent/src/Table550.h"
#include "app/pa/PAAgent/src/Table560.h"
#include "app/pa/PAAgent/src/Table570.h"
#include "app/pa/PAAgent/src/Table590.h"
#include "app/pa/PAAgent/src/Table603.h"
#include "app/pa/PAAgent/src/Table604.h"
#include "app/pa/PAAgent/src/Table610.h"
#include "app/pa/PAAgent/src/Table1610.h"
#include "app/pa/PAAgent/src/Table630.h"
#include "app/pa/PAAgent/src/ConnectToPAFEPC.h"
#include "app/pa/PAAgent/src/InvalidatePASDataPoints.h"
#include "app/pa/PAAgent/src/DisconnectFromPAFEPC.h"

#include <vector>

namespace TA_IRS_App
{
class ConnectToPAFEPC;

/**
 * Interface to obtain the correct ConnectToPAFEPC event instance.
 */
class IPasEventSource
{
public:
    /**
     * Returns a pointer to the correct ConnectToPAFEPC event instance.  This
     * event is to be scheduled and dispatched by the scheduler responsible
     * for socket events.
     * @return a pointer to the correct ConnectToPAFEPC event isntance.
     */
    virtual ConnectToPAFEPC* getConnectEvent() = 0;
    /**
     * Returns a pointer to the correct InvalidatePASDataPoints event instance.
     * This event is to be scheduled and dispatched by the scheduler
     * responsible for processing events.
     * @return A pointer to the correct InvalidatePASDataPoints event instance.
     */
    virtual InvalidatePASDataPoints* getInvalidateEvent() = 0;
    /**
     * Returns a pointer to the correct DisconnectFromPAFEPC event instance.
     * This event is to be scheduled and dispatched by the scheduler
     * responsible for processing events.
     * @return A pointer to the correct DisconnectFromPAFEPC event instance.
     */
    virtual DisconnectFromPAFEPC* getDisconnectEvent() = 0;
};

class PasTableManager : public IPasEventSource
{

public:
                    
    virtual ~PasTableManager();

    void setMonitor();
    void setControl();

    /** Returns the reference to the Table 100 instance.
    @return the reference to the Table 100 instance. */
    virtual Table100& getTable100();
    /** Returns the reference to the Table 200 instance.
    @return the reference to the Table 200 instance. */
    virtual Table200& getTable200() = 0;
    /** Returns the reference to the Table 1200 instance.
    @return the reference to the Table 1200 instance. */
    virtual Table1200& getTable1200() = 0;
    /** Returns the reference to the Table 201 instance.
    @return the reference to the Table 201 instance. */
    virtual Table201& getTable201() = 0;
    /** Returns the reference to the Table 1201 instance.
    @return the reference to the Table 1201 instance. */
    virtual Table1201& getTable1201() = 0;
    /** Returns the reference to the Table 202 instance.
    @return the reference to the Table 202 instance. */
    virtual Table202& getTable202();
    /** Returns the reference to the Table 204 instance.
    @return the reference to the Table 204 instance. */
    virtual Table204& getTable204() = 0;
    /** Returns the reference to the Table 1204 instance.
    @return the reference to the Table 1204 instance. */
    virtual Table1204& getTable1204() = 0;
    /** Returns the reference to the Table 301 instance.
    @return the reference to the Table 301 instance. */
    virtual Table301& getTable301() = 0;
    /** Returns the reference to the Table 1301 instance.
    @return the reference to the Table 1301 instance. */
    virtual Table1301& getTable1301() = 0;
    /** Returns the reference to the Table 302 instance.
    @return the reference to the Table 302 instance. */
    virtual Table302& getTable302();
    /** Returns the reference to the Table 303 instance.
    @return the reference to the Table 303 instance. */
    virtual Table303& getTable303() = 0;
    /** Returns the reference to the Table 1303 instance.
    @return the reference to the Table 1303 instance. */
    virtual Table1303& getTable1303() = 0;
    /** Returns the reference to the Table 350 instance.
    @return the reference to the Table 350 instance. */
    virtual Table350& getTable350();
    /** Returns the reference to the Table 550 instance.
    @return the reference to the Table 550 instance. */
    virtual Table550& getTable550();
    /** Returns the reference to the Table 560 instance.
    @return the reference to the Table 560 instance. */
    virtual Table560& getTable560();
    /** Returns the reference to the Table 570 instance.
    @return the reference to the Table 570 instance. */
    virtual Table570& getTable570();
    /** Returns the reference to the Table 590 instance.
    @return the reference to the Table 590 instance. */
    virtual Table590& getTable590();
    /** Returns the reference to the Table 603 instance.
    @return the reference to the Table 603 instance. */
    virtual Table603& getTable603();
    /** Returns the reference to the Table 604 instance.
    @return the reference to the Table 604 instance. */
    virtual Table604& getTable604();
    /** Returns the reference to the Table 610 instance.
    @return the reference to the Table 610 instance. */
    virtual Table610& getTable610() = 0;
    /** Returns the reference to the Table 1610 instance.
    @return the reference to the Table 1610 instance. */
    virtual Table1610& getTable1610() = 0;
    /** Returns the reference to the Table 630 instance.
    @return the reference to the Table 630 instance. */
    virtual Table630& getTable630();

    /**
     * Returns the appropriate ConnectToPAFEPC event to be scheduled.
     * @return The appropriate ConnectToPAFEPC event to be scheduled.
     */
    virtual ConnectToPAFEPC* getConnectEvent() = 0;

    /**
     * Returns the appropriate DisconnectFromPAFEPC event to be scheduled.
     * @return The appropriate DisconnectFromPAFEPC event to be scheduled.
     */
    virtual DisconnectFromPAFEPC* getDisconnectEvent();

    /**
     * Returns the tables that can be written to. Should be implemented
     * in the subclass as each has different sets of tables.
     * @return The tables that are writeable.
     */
    virtual std::vector<AbstractWriteablePASTable*> getAllWriteableTables() = 0;

	//wuzhongyi CL-19136
	virtual void forceTerminateAllPA() = 0;
  
private:

    PasTableManager( PasTableManager& thePasTableManager);

protected:

    /**
     * Constructs an instance of this class.
     * @param locationKey The location key that this manager is instantiated
     *                    for.  This is not retained by this instance but
     *                    rather used in the construction of certain tables.
     */
    PasTableManager( unsigned long locationKey );

    /**
     * The scheduler responsible for scheduling socket bound events.  No other
     * events are to be placed in this queue.
     */
    TA_IRS_Bus::Scheduler                   m_socketScheduler;
    /**
     * The scheduler responsible for scheduling CPU bound events.  No other
     * events are to be placed in this queue.
     */
    TA_IRS_Bus::Scheduler                   m_processScheduler;

	bool m_isThreadsStart;

    /** The pointer to the Table 100 instance. */
    Table100* m_table100;
    /** The pointer to the Table 200 instance. */
    Table200* m_table200;
    /** The pointer to the Table 1200 instance. */
    Table1200* m_table1200;
    /** The pointer to the Table 201 instance. */
    Table201* m_table201;
    /** The pointer to the Table 1201 instance. */
    Table1201* m_table1201;
    /** The pointer to the Table 202 instance. */
    Table202* m_table202;
    /** The pointer to the Table 204 instance. */
    Table204* m_table204;
    /** The pointer to the Table 1204 instance. */
    Table1204* m_table1204;
    /** The pointer to the Table 301 instance. */
    Table301* m_table301;
    /** The pointer to the Table 302 instance. */
    Table302* m_table302;
    /** The pointer to the Table 1301 instance. */
    Table1301* m_table1301;
    /** The pointer to the Table 303 instance. */
    Table303* m_table303;
    /** The pointer to the Table 1303 instance. */
    Table1303* m_table1303;
    /** The pointer to the Table 350 instance. */
    Table350* m_table350;
    /** The pointer to the Table 550 instance. */
    Table550* m_table550;
    /** The pointer to the Table 560 instance. */
    Table560* m_table560;
    /** The pointer to the Table 570 instance. */
    Table570* m_table570;
    /** The pointer to the Table 590 instance. */
    Table590* m_table590;
    /** The pointer to the Table 603 instance. */
    Table603* m_table603;
    /** The pointer to the Table 604 instance. */
    Table604* m_table604;
    /** The pointer to the Table 610 instance. */
    Table610* m_table610;
    /** The pointer to the Table 1610 instance. */
    Table1610* m_table1610;
    /** The pointer to the Table 630 instance. */
    Table630* m_table630;
};

} // namespace TA_IRS_App

#endif // !defined(PasTableManager_B323CC80_49BA_4d42_98A5_8CE9884F7924__INCLUDED_)

