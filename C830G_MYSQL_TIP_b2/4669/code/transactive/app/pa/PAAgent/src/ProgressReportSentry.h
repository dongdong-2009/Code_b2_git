/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/pa/PAAgent/src/ProgressReportSentry.h $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  AbstractDecisionEngine.h
//  Implementation of the Class AbstractDecisionEngine
//  Generated by Enterprise Architect
//  Created on:      25-Sep-2003 18:53:34
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(ProgressReportSentry_B323CC80_49BA_4d42_98A5_8CE9884F7924__INCLUDED_)
#define ProgressReportSentry_B323CC80_49BA_4d42_98A5_8CE9884F7924__INCLUDED_

#include "bus/pa_4669/pa_agent/IDL/src/IPAAgentCorbaDef.h"
#include "core/synchronisation/src/NonReEntrantThreadLockable.h"


class ProgressReportSentry
{

public:

    ProgressReportSentry( const CORBA::String_member& broadcastId, 
                          const TA_Base_Bus::IPAAgentCorbaDef::ZoneCoverage& zones);
    
    ProgressReportSentry( const CORBA::String_member& broadcastId, 
                          const TA_Base_Bus::IPAAgentCorbaDef::TrainCoverage& trains);

    virtual ~ProgressReportSentry();

    void setProgressReport(const TA_Base_Bus::IPAAgentCorbaDef::ProgressReport& progressReport);

    TA_Base_Bus::IPAAgentCorbaDef::ProgressReport* getProgressReportCopy();// Proper copy

    void setBroadcastId(const std::string& broadcastId);
        
    TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState getBroadcastState();
    void setBroadcastState (TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState state);

    void setGlobalState (TA_Base_Bus::IPAAgentCorbaDef::EGlobalState globalState);

    void setLocalState( unsigned int index,  TA_Base_Bus::IPAAgentCorbaDef::ELocalState localState );
    TA_Base_Bus::IPAAgentCorbaDef::ELocalState getLocalState( unsigned int index );

    
    void setOverridingSourcePriority( unsigned int index, CORBA::Octet overridingSourcePriority );


    bool getErrorOccurred( unsigned int index );

    void resetZoneOrTrain(unsigned int index);

    void flagNonCompletedWithErrors();
    void flagNonCompletedWithErrorsAndAborted();
	// TD17456
	void flagNonValidWithFailure();
	// TD17456

    void resetGlobalState();

    bool getHasProgressReportChanged()
    {
        // Implicitly threadsafe
        return m_hasProgressReportChanged;
    }

    void setHasProgressReportChanged(bool changed)
    {
        // Implicitly threadsafe
        m_hasProgressReportChanged = changed;
    }


    /** 
      * setInhibitAuditMessages
      *
      * For broadcasts such as playback, inhibit the sending of audit
      * messages for broadcast state updates.
      * By default audit messages are sent.
      *
      * @param inhibitAuditMessages true if no audit messages should be sent.
      */
    inline void setInhibitAuditMessages(bool inhibitAuditMessages)
    {
        m_inhibitAuditMessages = inhibitAuditMessages;
    }

	// ++ Bug456
	void ProgressReportSentry::setExecutionPhase( TA_Base_Bus::IPAAgentCorbaDef::EExecutePhase executionPhase );
	// ++ Bug456

protected:

    void submitBroadcastStateAuditMessage( const TA_Base_Bus::IPAAgentCorbaDef::EBroadcastState& newState, 
                                           const std::string& broadcastId ) const;

    void submitBroadcastStateFailureAuditMessage( const TA_Base_Bus::IPAAgentCorbaDef::EGlobalState& newStateFailure, 
                                                  const std::string& broadcastId ) const;

    void submitZoneBroadcastFailureAuditMessage( unsigned long index,
                                                 TA_Base_Bus::IPAAgentCorbaDef::ELocalState localState);

private:

    ProgressReportSentry( const ProgressReportSentry& theProgressReportSentry);
    

protected:

    TA_Base_Bus::IPAAgentCorbaDef::ProgressReport    m_progressReport;
    TA_Base_Core::NonReEntrantThreadLockable         m_lock;
    bool                                        m_hasProgressReportChanged;
    bool                                        m_inhibitAuditMessages;
    // set depending on whether the constructor is called with trains or zones
    bool                                        m_isStationBroadcast;


};

#endif
