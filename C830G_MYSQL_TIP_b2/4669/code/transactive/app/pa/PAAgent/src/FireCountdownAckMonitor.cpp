/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/pa/PAAgent/src/FireCountdownAckMonitor.cpp $
  * @author:  Ripple
  * @version: $Revision: #3 $
  *
  * Last modification: $DateTime: 2009/04/08 13:44:49 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  FireCountdownAckMonitor.cpp
//  Implementation of the Class FireCountdownAckMonitor
//  Generated by Enterprise Architect
//  Created on:      25-Sep-2003 18:53:34
//  Original author:
//
///////////////////////////////////////////////////////////
//  Modification history:
//
//
///////////////////////////////////////////////////////////

#if defined(_MSC_VER)
#pragma warning(disable : 4786 4146 4018 4250 4290 4355 4503)
#endif // defined _MSC_VER

#include "core/utilities/src/TAAssert.h"
#include "core/utilities/src/DebugUtil.h"
#include "core/exceptions/src/ScadaProxyException.h"
#include "bus/scada/datapoint_library/src/DataPoint.h"
#include "app/pa/PAAgent/src/Table570.h"
#include "app/pa/PAAgent/src/CachedConfig.h"
#include "app/pa/PAAgent/src/FireCountdownAckMonitor.h"

namespace TA_IRS_App
{

	FireCountdownAckMonitor::FireCountdownAckMonitor(Table570& table570)
	: m_table570(table570),
	  m_proxyFactory(TA_Base_Bus::ScadaProxyFactory::getInstance()),
	  m_isAlarmAcked(false),
	  m_isEnabled(false)
	{
	    FUNCTION_ENTRY("Constructor");
        
        TA_Base_Bus::DataPoint* dp = CachedConfig::getInstance()->getFireCountdownActiveDP();
        
        if (dp)
        {
            try
            {
                m_proxyFactory.createDataPointProxy(dp->getEntityKey(), *this, m_fireCountdownProxy);
            }
            catch (TA_Base_Core::ScadaProxyException) 
            {
                LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugError, 
                    "Caught a ScadaProxyException when calling createDataPointProxy.");
            }
            catch(...)
            {
                LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugError, 
                    "Caught an Unknown Exception when calling createDataPointProxy.");
            }
        }
        else
        {
            LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugError, 
                "Cannot find FireCountdownActive datapoint in order to register for acknowledgement notifications.");        
        }
	    
	    FUNCTION_EXIT;
	}


    // ExceptionChecked
    FireCountdownAckMonitor::~FireCountdownAckMonitor()
    {
        FUNCTION_ENTRY("Destructor");

		//2008-07-18 clear DataPointProxySmartPtr
		//m_fireCountdownProxy->reset();

        TA_Base_Bus::ScadaProxyFactory::removeInstance();

        FUNCTION_EXIT;
    }


	void FireCountdownAckMonitor::setControl(bool isOnStartup)
	{
	    m_isEnabled = true; 
	    m_proxyFactory.setProxiesToControlMode();

	}


	void FireCountdownAckMonitor::setMonitor(bool isOnStartup)
	{
	    m_isEnabled = false; 
	    m_proxyFactory.setProxiesToMonitorMode();
	}


	void FireCountdownAckMonitor::processEntityUpdateEvent(unsigned long entityKey, TA_Base_Bus::ScadaEntityUpdateType updateType)
	{
	    if (!m_isEnabled)
		{
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugInfo, 
	            "Skipping operation in operation mode");
			return;
	    }

	    if ( updateType != TA_Base_Bus::ValueStateUpdate &&
             updateType != TA_Base_Bus::AlarmSummaryUpdate && //limin++, TD20740
             updateType != TA_Base_Bus::AckSummaryUpdate )    //limin++, TD20740
	    {
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugDebug, 
	            "Received a proxy update, but it is not value update, ingored.");
	        return;
	    }

	    bool isAcked = false;
	    
	    try
	    {
	        isAcked = (m_fireCountdownProxy)->getAlarmAckState() == TA_Base_Bus::ScadaAlarmAck ||
	                  (m_fireCountdownProxy)->getAlarmAckState() == TA_Base_Bus::ScadaAlarmNotPresent;
	    }
	    catch (TA_Base_Core::ScadaProxyException) 
	    {
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugError, 
	            "Caught a ScadaProxyException when calling getAlarmAckState.");
	    }
	    catch(...)
	    {
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugError, 
	            "Caught an Unknown Exception when calling getAlarmAckState.");
	    }

	    if (m_isAlarmAcked == isAcked)
	    {
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugDebug, 
	            "Received a datapoint value update, but alarm ack state is not changed, ingored.");        
	        return;
	    }

	    m_isAlarmAcked = isAcked;

	    if (!m_isAlarmAcked)
	    {
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugInfo, 
	            "Ignoring alarm which is not acknowledged");        
	        return;    
	    }

	    LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugInfo, 
	        "Received FireCountdownActive alarm acknowledgement for entitykey %u", 
			entityKey);        

	//	m_theDatapoints.setCongestionAppliedGivenEntityKey(currentAlarmState.getAlarmEntityKey(), true);
		// TD18294
		if (!m_table570.isOnFireAlarmState())
		{
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugInfo, 
	            "FEPC is not on Fire Alarm state, ingored.");        
			return;
		}
		// TD18294

	    try
		{
	        m_table570.resetFireAlarmStatusAndWrite();
		}
		catch ( ... )
		{
	        LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugError, 
	            "Failed to abort FireCountdown.");
		}

	}

};
