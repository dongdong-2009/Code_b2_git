/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/src/IRadioConnectionObserver.h $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  IRadioConnectionObserver.h
//  Implementation of the Interface IRadioConnectionObserver
//  Generated by Enterprise Architect
//  Created on:      29-Oct-2003 17:43:13
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(IRadioConnectionObserver_8869B6D8_D09D_4719_876C_9AC318B7B3EA__INCLUDED_)
#define IRadioConnectionObserver_8869B6D8_D09D_4719_876C_9AC318B7B3EA__INCLUDED_

#include "app/radio/RadioTetraAgent/RadioProtocolLibrary/src/ITcpEvent.h"
/**
* This interface is used to enable the radio to be advised of new radio events
* and TCP failures.
* @version 1.0
* @generator Enterprise Architect
* @created 29-Oct-2003 17:43:13
*/

namespace TA_IRS_App
{
	class RadioEvent;

	class IConnectionStatusObserver
	{
	public:
		    virtual void onConnectionFail(bool isPrimary)   = 0;
		    virtual void onConnectionResumed(bool isPrimary) = 0;

	};

	class IRadioConnectionStatusObserver
	{
	public:
		virtual void onConnectionLost() = 0;
		virtual void onConnectionEstablish() = 0;
		virtual void onSwitchConnection() =	0;
	};

	class IRadioEventProcessor
	{
	public:
			/**
			* This method will receive the incoming events from the radio system.  It will notify waiting RadioSession of a new event through the RadioTransactionManager.  It will process all unsolited events.
			* @param    event
			*/
			virtual void onReceiveEvent(ITcpEvent& event)  = 0;
			/**
			* createCompatibleTcpEvent. Create a TcpEvent that is compatible with this type of observer 
			* @param    isPrimary
			*/
			virtual ITcpEvent * createCompatibleTcpEvent() = 0;
		
	};
};
#endif // !defined(IRadioConnectionObserver_8869B6D8_D09D_4719_876C_9AC318B7B3EA__INCLUDED_)
