/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethodSetupCall.cpp $
  * @author:  Andy Parker
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  * Implement the setup call API method
  */
///////////////////////////////////////////////////////////
//
//  RadioMethodSetupCall.cpp
//  Implementation of the Class RadioMethodSetupCall
//  Generated by Enterprise Architect
//  Created on:      11-Nov-2003 13:31:43
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////

#include "RadioMethodSetupCall.h"
#include "RadioProtocol.h"
#include "core/utilities/src/DebugUtil.h"
#include "core/utilities/src/TAAssert.h"

using namespace TA_IRS_App;

#define SETUP_CALL_LENGTH            38
#define SETUP_CALL_TYPE_START         4
#define SETUP_CALL_DESTINATION_START  6
#define SETUP_CALL_REQUESTTX_START    38

/**
* Constructor
* @param    sessionRef  - Session reference (from AttachSession API call)
* @param    callRef     - New call reference (from NewReference API call)
*/
RadioMethodSetupCall::RadioMethodSetupCall(RadioMethod::RadioSessionReference sessionRef,
										   RadioMethodCallReference::RadioCallReference callRef)
					 : RadioMethodCallReference(SETUP_CALL_LENGTH,METHOD_SETUP_CALL,sessionRef,callRef),
					   m_callType(0)
{
	FUNCTION_ENTRY("Constructor");
	FUNCTION_EXIT;

}

/** 
  * Sets the three "CT" bits of the Call_Type word
  *
  * @param callType Type of call to be initiated.
  */
void RadioMethodSetupCall::setCallType(ECallType callType)
{
	FUNCTION_ENTRY("setCallType");

    // clear the lowest three bits
    m_callType &= 0xFFF8;

	if (callType==SINGLE_CALL)
	{

	}
	else if (callType==GROUP_UNACKNOWLEDGE)
	{
        m_callType |= 0x0001;
        setFullDuplex(false);
	}

	else if (callType==GROUP_ACKNOWLEDGE)
	{
        m_callType |= 0x0002;
        setFullDuplex(false);
	}
	else if (callType==BROADCAST)
	{
        m_callType |= 0x0003;
        setFullDuplex(false);
	}
	else
	{
		TA_ASSERT(false,"Unknown call type specified.");
	}


	setParameterShort(SETUP_CALL_TYPE_START,m_callType);

	FUNCTION_EXIT;

}

void RadioMethodSetupCall::setHookBit(bool on /*=true*/ )
{
	FUNCTION_ENTRY("setHookBit");

    if (on)
    {
        m_callType |= 0x0008;
    }
    else
    {
        m_callType &= 0xFFF7;
    }

	setParameterShort(SETUP_CALL_TYPE_START,m_callType);

	FUNCTION_EXIT;
}

void RadioMethodSetupCall::setFullDuplex(bool on /*=true*/ )
{
	FUNCTION_ENTRY("setFullDuplex");

    if (on)
    {
        m_callType |= 0x0010;
    }
    else
    {
        m_callType &= 0xFFEF;
    }

	setParameterShort(SETUP_CALL_TYPE_START,m_callType);

	FUNCTION_EXIT;
}

void RadioMethodSetupCall::setCommunicationType(ECommunicationType cmt)
{
	FUNCTION_ENTRY("setCommunicationType");

    // first, clear the 3 CMT bits
    m_callType &= 0xFF1F;

    // set the 
    m_callType |= ((cmt & 0x0007)<<5);
    
	setParameterShort(SETUP_CALL_TYPE_START,m_callType);

	FUNCTION_EXIT;
}

/**
 * Set the call priority
 * @param priority see the enumeration in header file
 */
void RadioMethodSetupCall::setCallPriority(int priority)
{
	FUNCTION_ENTRY("setCallPriority");

	TA_ASSERT(priority>-1,"Priority is less than 0");
	TA_ASSERT(priority<=15,"Priority is greater than 15");

	// Shift bits to the right position for the priority mask
	priority = priority * 2048;
	m_callType = m_callType|priority;

	setParameterShort(SETUP_CALL_TYPE_START,m_callType);

	FUNCTION_EXIT;

}


void RadioMethodSetupCall::setCallDestination(std::string destination)
{
	FUNCTION_ENTRY("setCallDestination");
	setParameterShortString(SETUP_CALL_DESTINATION_START,destination);
	FUNCTION_EXIT;
}

void RadioMethodSetupCall::setRequestTx(ERequestTx rqstx)
{
	FUNCTION_ENTRY("setRequestTx");
    setMessageSize(SETUP_CALL_LENGTH+4);
    setParameterLong(SETUP_CALL_REQUESTTX_START,(unsigned long)rqstx);
    FUNCTION_EXIT;
}

