/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethodNewReference.cpp $
  * @author:  Andy Parker
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  * Implementation for radio NewReference API call
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioMethodNewReference.cpp
//  Implementation of the Class RadioMethodNewReference
//  Generated by Enterprise Architect
//  Created on:      10-Nov-2003 15:15:18
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////

#include "RadioMethodNewReference.h"
#include "RadioProtocol.h"
#include "core/utilities/src/TAAssert.h"


#define NEW_REFERENCE_METHOD_PARAMETER_LENGTH  4
#define REFERENCE_TYPE_START         0

using namespace TA_IRS_App;

/**
* Constructor
* @param    sessionRef
*/
RadioMethodNewReference::RadioMethodNewReference(RadioSessionReference sessionRef,ReferenceType referenceType) 
                        : RadioMethod(NEW_REFERENCE_METHOD_PARAMETER_LENGTH,METHOD_NEW_REFERENCE,sessionRef)
{
	FUNCTION_ENTRY("Constructor");
	setReferenceType(referenceType);
	FUNCTION_EXIT;
}


RadioMethodNewReference::~RadioMethodNewReference()
{
	FUNCTION_ENTRY("Destructor");
	FUNCTION_EXIT;
}


void RadioMethodNewReference::setReferenceType(ReferenceType referenceType)
{
	FUNCTION_ENTRY("setReferenceType");

	switch (referenceType)
	{
		case CALL_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'C');
									break;
    	case SDS_REFERENCE:			setParameterByte(REFERENCE_TYPE_START,'D');
									break;
    	case SUBSCRIBER_REFERENCE:  setParameterByte(REFERENCE_TYPE_START,'S');
									break;
    	case DATA_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'W');
									break;
		/* These cannot be used with NewReference

		case AUDIO_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'A');
									break;
    	case CAD_REFERENCE:			setParameterByte(REFERENCE_TYPE_START,'Z');
									break;
    	case SEARCH_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'V');
									break;
    	case MONITOR_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'M');
									break;
		*/
		default: TA_ASSERT(false,"New reference type undefined.");
	}

	// Bytes 2,3 and 4 will be set to 0 by RadioMethod constructor.

	FUNCTION_EXIT;
}


