/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioEvent.h $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioEvent.h
//  Implementation of the Class RadioEvent
//  Generated by Enterprise Architect
//  Created on:      04-Nov-2003 13:28:33
//  Original author: Andy Parker
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(RadioEvent_77CF855B_3FAD_4814_83C3_D52FD4AC322F__INCLUDED_)
#define RadioEvent_77CF855B_3FAD_4814_83C3_D52FD4AC322F__INCLUDED_


#include <vector>
#include <string>

#include "app/radio/RadioTetraAgent/RadioProtocolLibrary/src/ITcpEvent.h"
/**
* This class encapsulates the data of a radio event.  Radio events are sent back
* to indicate the progress of radio methods (sent requests).
* @author Andy Parker
* @version 1.0
* @generator Enterprise Architect
* @created 04-Nov-2003 13:28:32
*/

namespace TA_IRS_App
{
	class RadioEventReader;

	class RadioEvent : public ITcpEvent
	{

	public:

		RadioEvent();
		RadioEvent(const RadioEvent& radioEvent);
		virtual ~RadioEvent();

		typedef unsigned long   SessionRefType;
		typedef unsigned long   TransactionIDType;
		typedef          long   StatusType;
		typedef unsigned long   EventType;

	public:
		/**
		* Resets the command to be empty.
		*/
		virtual void clear();
		/**
		* This method is used to determine if the message is complete.  It is used after appending incoming characters to the message.
		*/
		virtual bool isComplete() const;
		/**
		* Get the session this event is intended for
		*/
		SessionRefType getSessionRef() const;
		/**
		* Returns the transaction Id for the event which will correspond to the Transaction ID of the associated Method called.
		*/
		TransactionIDType getTransactionId() const;
		/**
		* Returns the status code for the event
		*/
		StatusType getStatus() const;
		/**
		* Returns boolean to show if status indicates more data to follow.
		*/
		bool isStatusMoreData() const;
		/**
		* Returns the status text for the event
		*/
		std::string getTextStatus() const;
		/**
		* Returns the radio event type for the event.
		*/
		EventType getEventType() const;
		/**
		* Return the specified length of the message as defined in the first bytes.
		*/
		virtual unsigned long getEventLength() const;
		/**
		* Return the specified length of the message header
		*/
		virtual unsigned long getEventHeaderLength() const;
		/**
		* Provides access to the appropriate RadioEventReader for the incoming message.  The reader will be automatically destroyed when the RadioEvent is destroyed.
		*/
		RadioEventReader* getEventReader();


	private:

		/**
		* Create an event reader that is correct for the type of message.
		*/
		RadioEventReader* createEventReader();


		void fixIncomingSDSEventBuffer();

	private:

		RadioEventReader*            m_eventReader;

	};
};

#endif // !defined(RadioEvent_77CF855B_3FAD_4814_83C3_D52FD4AC322F__INCLUDED_)
