/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethodDeleteReference.cpp $
  * @author:  Nick Jardine
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  * Implementation for radio Delete Reference API call
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioMethodDeleteReference.cpp
//  Implementation of the Class RadioMethodDeleteReference
//  Generated by Enterprise Architect
//  Created on:      10-Nov-2003 15:15:18
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////

#include "RadioMethodDeleteReference.h"
#include "RadioProtocol.h"
#include "core/utilities/src/TAAssert.h"



namespace TA_IRS_App
{


        const unsigned int RadioMethodDeleteReference::DELETE_REFERENCE_METHOD_LENGTH   = 8;
        const unsigned int RadioMethodDeleteReference::REFERENCE_TYPE_START             = 0;
        const unsigned int RadioMethodDeleteReference::REFERENCE_PARAMETER_POSITION     = 4;

    /**
    * Constructor
    * @param    sessionRef
    */
    RadioMethodDeleteReference::RadioMethodDeleteReference(RadioSessionReference sessionRef) 
                            : RadioMethod(DELETE_REFERENCE_METHOD_LENGTH,METHOD_DELETE_REFERENCE,sessionRef)
    {
	    FUNCTION_ENTRY("Constructor");
	    FUNCTION_EXIT;
    }


    RadioMethodDeleteReference::~RadioMethodDeleteReference()
    {
	    FUNCTION_ENTRY("Destructor");
	    FUNCTION_EXIT;
    }


    void RadioMethodDeleteReference::setReference(ReferenceType referenceType,unsigned long reference)
    {
	    FUNCTION_ENTRY("setReferenceType");

        // Add the reference type

	    switch (referenceType)
	    {
		    case CALL_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'C');
									    break;
    	    case SDS_REFERENCE:			setParameterByte(REFERENCE_TYPE_START,'D');
									    break;            
    	    case SUBSCRIBER_REFERENCE:  setParameterByte(REFERENCE_TYPE_START,'S');
									    break;
    	    case DATA_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'W');
									    break;
		    case AUDIO_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'A');
									    break;
    	    case CAD_REFERENCE:			setParameterByte(REFERENCE_TYPE_START,'Z');
									    break;
    	    case SEARCH_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'V');
									    break;
    	    case MONITOR_REFERENCE:		setParameterByte(REFERENCE_TYPE_START,'M');
									    break;
		    default: TA_ASSERT(false,"New reference type undefined.");
	    }

	    // Bytes 2,3 and 4 will be set to 0 by RadioMethod constructor.

        // And add the reference itself
        setParameterLong(REFERENCE_PARAMETER_POSITION,reference);

	    FUNCTION_EXIT;
    }


}
