/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/IncomingCallEventReader.cpp $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  IncomingCallEventReader.cpp
//  Implementation of the Class IncomingCallEventReader
//  Generated by Enterprise Architect
//  Created on:      04-Nov-2003 13:35:21
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////

#include "IncomingCallEventReader.h"
#include "RadioProtocol.h"
#include "core/utilities/src/DebugUtil.h"
#include "core/utilities/src/TAAssert.h"

#define EVENT_INCOMING_CALL_PARAMETER_LENGTH  70
#define CALL_REFERENCE_START  0
#define CALL_TYPE_START       4
#define CALLING_NUMBER_START  6
#define CALLED_NUMBER_START   38


using namespace TA_IRS_App;


IncomingCallEventReader::IncomingCallEventReader(RadioEvent& event) 
                        : RadioEventReader(event,EVENT_INCOMING_CALL,EVENT_INCOMING_CALL_PARAMETER_LENGTH)
{
 	FUNCTION_ENTRY("Constructor");
	FUNCTION_EXIT;
}


IncomingCallEventReader::~IncomingCallEventReader()
{
 	FUNCTION_ENTRY("Destructor");
	FUNCTION_EXIT;
}


/**
* Reads the call reference for the incoming call event
*/
unsigned long IncomingCallEventReader::getCallReference() const
{
 	FUNCTION_ENTRY("getCallReference");
	FUNCTION_EXIT;
    return getParameterLong(CALL_REFERENCE_START);
}


/**
* Reads the call type for the incoming call
*/
IncomingCallEventReader::ECallType IncomingCallEventReader::getCallType() const
{
 	FUNCTION_ENTRY("getCallType");

    short typeBits = getParameterShort(CALL_TYPE_START);
    short typeMask = 7;  // last three bits 

	if ((typeBits&typeMask)==0)
	{
		return SINGLE_CALL; 
	}
	else if ((typeBits&typeMask)==1)
	{
		return GROUP_UNACKNOWLEDGE;
	}
	else if ((typeBits&typeMask)==2)
	{
		return GROUP_ACKNOWLEDGE;
	}
	else if ((typeBits&typeMask)==3)
	{
		return BROADCAST;
	}
	else if ((typeBits&typeMask)==7)
	{
        return CIRCUITMODEDATA;
	}


	// Invalid call type if we get here
	TA_ASSERT(false,"Unknown call type specified.");

	FUNCTION_EXIT;
	return SINGLE_CALL;
}

bool IncomingCallEventReader::isHookBitSet() const
{
    unsigned short call_type = getParameterShort(CALL_TYPE_START);

    bool hookBitSet = ((call_type & 0x0008) == 0x0008);

	LOG_GENERIC( SourceInfo, TA_Base_Core::DebugUtil::DebugDebug, 
		 "isHookBitSet() - %s (CallType=%u)", ((hookBitSet) ? "True":"False"),call_type);

    return hookBitSet;
}

bool IncomingCallEventReader::isFullDuplex() const
{
    unsigned short call_type = getParameterShort(CALL_TYPE_START);

    bool isfullduplex = ((call_type & 0x0010) > 0);

	LOG_GENERIC( SourceInfo, TA_Base_Core::DebugUtil::DebugDebug, 
		 "isFullDuplex() - %s (CallType=%u)", ((isfullduplex) ? "True":"False"),call_type);

    return isfullduplex;
}

int IncomingCallEventReader::getPriority() const
{
    unsigned short call_type = getParameterShort(CALL_TYPE_START);
    
    // the priority is bits 11-14. So shift the call_type right by
    // 11 and mask off any other crud
    int priority = ( (call_type >> 11) & 0x000F );

	LOG_GENERIC( SourceInfo, TA_Base_Core::DebugUtil::DebugDebug, 
		 "getPriority() - returning %d (CallType=0x%X)", priority,call_type);

    return priority;
}

bool IncomingCallEventReader::isEmergency() const
{
    int priority = getPriority();
    bool is_emergency = (priority>=15);

	LOG_GENERIC( SourceInfo, TA_Base_Core::DebugUtil::DebugDebug, 
		 "isEmergency() - returning %d (priority=%d)", is_emergency, priority);

    return is_emergency;
}

/**
* Get the calling number for the incoming call
*/
std::string IncomingCallEventReader::getCallingNumber() const
{
 	FUNCTION_ENTRY("getCallingNumber");
	FUNCTION_EXIT;
    return getParameterShortString(CALLING_NUMBER_START);
}


/**
* Get the called number for the incoming call
*/
std::string IncomingCallEventReader::getCalledNumber() const
{
 	FUNCTION_ENTRY("getCalledNumber");
	FUNCTION_EXIT;
    return getParameterShortString(CALLED_NUMBER_START);
}


