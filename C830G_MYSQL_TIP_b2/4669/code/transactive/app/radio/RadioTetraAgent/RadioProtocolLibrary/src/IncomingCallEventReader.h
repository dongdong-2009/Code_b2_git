/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/IncomingCallEventReader.h $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  IncomingCallEventReader.h
//  Implementation of the Class IncomingCallEventReader
//  Generated by Enterprise Architect
//  Created on:      04-Nov-2003 13:35:21
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(IncomingCallEventReader_0322268D_B7FB_4cc7_BCB2_08A812D511EE__INCLUDED_)
#define IncomingCallEventReader_0322268D_B7FB_4cc7_BCB2_08A812D511EE__INCLUDED_

#include "RadioEventReader.h"
#include <string>

/**
* This class reads the details of an incoming call event.
* @version 1.0
* @generator Enterprise Architect
* @created 04-Nov-2003 13:35:21
*/

namespace TA_IRS_App
{
	class IncomingCallEventReader : public RadioEventReader
	{
		public:
			IncomingCallEventReader(RadioEvent& event);
			virtual ~IncomingCallEventReader();

			enum ECallType {SINGLE_CALL,GROUP_UNACKNOWLEDGE,GROUP_ACKNOWLEDGE,BROADCAST, CIRCUITMODEDATA};

		public:
			/**
			* Reads the call reference for the incoming call event
			*/
			unsigned long getCallReference() const;
			/**
			* Reads the call type for the incoming call
			*/
			ECallType getCallType() const;
            /**
             * Tests for the Hook/Direct bit being set. Indicates if the call
             * must be answered automatically and immediately by the application
             */
            bool isHookBitSet() const;
            /** Accessor for the Call Priority bits in the CallType word
             * @return the value of the priority bits, ie. 0<=priority<=15
             */
            int getPriority() const;
            /** Accessor for the Full Duplex bit in the CallType word
             * @return true if bit[4] (ie. bit number 5) is set
             */
            bool isFullDuplex() const;
            /** Specialisation of getPriority()
             * @return TRUE if getPriority returns 12<=priority<=15
             */
            bool isEmergency() const;
			/**
			* Get the calling number for the incoming call
			*/
			std::string getCallingNumber() const;
			/**
			* Get the called number for the incoming call
			*/
			std::string getCalledNumber() const;
	};

};  // Namespace

#endif // !defined(IncomingCallEventReader_0322268D_B7FB_4cc7_BCB2_08A812D511EE__INCLUDED_)
