#ifndef _DATABASE_H_B0E96ACD_E36D_43F7_B602_2B7948C14B7E
#define _DATABASE_H_B0E96ACD_E36D_43F7_B602_2B7948C14B7E

#include <string>
#include <iostream>
#include <fstream>
#include <sstream>
#include <ctype.h>
#include <vector>
#include <map>

#include <windows.h>
#include <sql.h>
#include <sqltypes.h>
#include <sqlext.h>

#pragma warning( disable : 4786)

using namespace std;

#define DB_SUCCESS    0   /*!< 成功标志*/
#define DB_FAILURE   -1   /*!< 失败标志*/
#define DB_NO_DATA_FOUND -100   /*!< 没有数据*/

#define DB_MAX_FIELD_LEN  255   /*!< 每个字段的最大长度*/
#define DB_MAX_COL_LEN     70   /*!< 每个表的最多列数*/

// DB_SESSION saves necessary data generated by operation of ODBC to database.
typedef struct _db_session
{
    SQLHDBC hDbc;
    SQLHENV hEnv;
    SQLHSTMT hStmt; // related with sql statement
    _db_session();
    bool init();
}DB_SESSION;

// this struct will use to represent a colunm in return data from database
// so if you have N columns, then have N BINDING type data
typedef struct STR_BINDING
{
    SQLSMALLINT ind;
    char *buffer; // the retunred column data will store here
    SQLLEN indPtr;
    bool isChar; // whether the value at this column is char type or not.    
} COL_BINDING;

// RecordsResult will store all data return from database
typedef struct RecordsResult
{
    int column; // column number saved
    int rownum; // row number saved
    
    // detailed data saved in here, first vector will include all retunred data.
    // second vector indicate each column value in a row data, the value order as same as columns.
    std::vector<std::vector<std::string> > Records; 
    
    void reset();
} RecordCollection;

class DataBase
{
public:    
    DataBase(std::string user, std::string password, std::string server);	
    ~DataBase();
	int _DB_Connect();
    int executeSql_(std::string sSql);
    int recordSet_(RecordCollection& recd);
    // for each column allocat memeroy to save column data
    void allocatBindings(SQLHSTMT hStmt, SQLSMALLINT cols, std::vector<COL_BINDING*>& vColumns);
private:
    std::string m_user, m_passwd, m_server;
    DB_SESSION *m_session;    
	char DB_user[50];
	char DB_password[50];
	char DB_server[50];	    
	char errStr[50];
	char strSql[1024];    
};
#endif //!_DATABASE_H_B0E96ACD_E36D_43F7_B602_2B7948C14B7E
