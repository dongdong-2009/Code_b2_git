/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/3001_TIP_NEW/3001/transactive/app/ecs/ECSAgent/src/MasterModeLocksManager.h $
  * @author:  Ripple
  * @version: $Revision: #2 $
  *
  * Last modification: $DateTime: 2012/02/06 16:15:14 $
  * Last modified by:  $Author: haijun.li $
  *
  */
///////////////////////////////////////////////////////////
//
//  MasterModeLocksManager.h
//  Implementation of the Class MasterModeLocksManager
//  Generated by Enterprise Architect
//  Created on:      25-Sep-2003 18:53:34
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(MasterModeLocksManager__INCLUDED_)
#define MasterModeLocksManager__INCLUDED_


#include "app/ecs/ECSAgent/src/EcsGlobals.h"
#include "app/ecs/ECSAgent/src/AbstractFailoverable.h"
#include "app/ecs/ECSAgent/src/ItaEcsDatapoints.h"

#include "core/synchronisation/src/ReEntrantThreadLockable.h"

class ItaEcsCachedConfig;
class ItaEcsCachedMaps;


class MasterModeLocksManager : public virtual AbstractFailoverable,
                               public virtual IEmergencyObserver
{

public:
    MasterModeLocksManager(
        ItaEcsCachedConfig& theConfig,
        ItaEcsCachedMaps& theMaps, 
        ItaEcsDatapoints& theDatapoints);

    virtual ~MasterModeLocksManager();

    void applyMasterModeLocks(unsigned long masterMode);
    void removeMasterModeLocks();

    // AbstractFailoverable overrides
    virtual void setControl(bool isOnStartup=false);

    virtual void processEmergencyUpdate(unsigned long zoneId, bool value);


private:
    
    ItaEcsCachedConfig&                             m_theConfig;
    ItaEcsCachedMaps&                               m_theMaps;
    ItaEcsDatapoints&                               m_theDatapoints;

    unsigned long                                   m_lastAppliedMasterMode;

    TA_Base_Core::ReEntrantThreadLockable           m_lock;


private:
    MasterModeLocksManager( const MasterModeLocksManager& theMasterModeLocksManager);
    MasterModeLocksManager();

};

#endif // !defined(MasterModeLocksManager__INCLUDED_)
