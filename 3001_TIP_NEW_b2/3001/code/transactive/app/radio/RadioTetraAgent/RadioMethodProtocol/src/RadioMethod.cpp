/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_TIP/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethod.cpp $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/10/31 12:15:01 $
  * Last modified by:  $Author: grace.koh $
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioMethod.cpp
//  Implementation of the Class RadioMethod
//  Generated by Enterprise Architect
//  Created on:      06-Nov-2003 08:32:16
//  Original author: Andy Parker
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////
#include "core/utilities/src/TAAssert.h"
#include "app/radio/RadioTetraAgent/RadioMethodProtocol/src/ITcpEvent.h"
#include "RadioMethod.h"
#include "RadioProtocol.h"
#include <time.h>




#define METHOD_HEADER_SESSION_ID_START_POSITION       4
#define METHOD_HEADER_STATUS_START_POSITION           12
#define METHOD_HEADER_METHOD_START_POSITION           16

//#define METHOD_HEADER_LENGTH_START_POSITION           0




using namespace TA_IRS_App;


/*
* Constructor
*
* Creates a new radio method (message).
*
* @param    methodLength Length of parameter block for this message. 
* 
*/
RadioMethod::RadioMethod(unsigned int methodLength, unsigned char methodStx)
		    : ITcpMethod(methodLength, METHOD_HEADER_STX_START_POSITION)
{
	setByte(METHOD_HEADER_STX_START_POSITION,methodStx);
}


RadioMethod::~RadioMethod()
{
}


void RadioMethod::setTransactionId(unsigned long transactionId)
{
	setShort(METHOD_HEADER_TRANSACTION_ID_START_POSITION,transactionId);
}


unsigned long RadioMethod::getMethodHeaderLength() const
{
	//return METHOD_HEADER_LENGTH;
	return getMessageDataSize();
}


void RadioMethod::setMethodHeaderLength(unsigned int messageSize)
{
	//TODO
	//setLong(METHOD_HEADER_LENGTH_START_POSITION,messageSize);
}


unsigned long RadioMethod::getShortStringLength() const
{
	return getMessageDataSize();
}

std::string RadioMethod::getTimestamp()
{
	FUNCTION_ENTRY("getTimestamp");
	
	char buff[15];
	time_t now = time(NULL);
	strftime(buff, 15, "%Y%m%d%H%M%S", localtime(&now));
	
	FUNCTION_EXIT;
	return buff;
}



