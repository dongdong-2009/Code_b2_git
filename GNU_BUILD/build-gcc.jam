#
# Usage:
#	cd gcc-7.3.1
#	./contrib/download_prerequisites
#	echo "build-gcc ;" > Jamfile.jam
#	b2
#

import path sequence notfile option gnu-rules gnu-unzip ;

.module-name = $(__name__) ;
.options = "--enable-checking=release --enable-threads=posix --enable-languages=c,c++ --disable-multilib" ;

rule init ( options )
{
	.options = $(options) ;
}

rule build-gcc ( : requirements * )
{
	unzip-prerequisites ;
	
	notfile build-gcc
		: @$(.module-name).build-gcc-action
		:
		: $(requirements)
		;
}

rule unzip-prerequisites ( )
{
	PACKAGES		= gmp mpfr mpc isl ;
	ZIP_EXTENSIONS	= tar.gz tar.xz tar.bz2 zip ;
	GCC_PATH		= [ path.pwd ] ;
	
	for local pkg in [ path.glob $(GCC_PATH) : $(PACKAGES)-*.$(ZIP_EXTENSIONS) ]
	{
		pkg = $(pkg:BS) ;
		local exts = [ sequence.join $(ZIP_EXTENSIONS) : "|" ] ;
		local x = [ MATCH "^(.*)-(.*)\\.($(exts))$" : $(pkg) ] ;
				
		if ! [ path.exists $(GCC_PATH)/$(x[1]) ]
		{
			unzip $(pkg) ;
			ln $(x[1])-$(x[2]) : $(x[1]) ;
		}
	}
}

actions build-gcc-action
{
	export PATH=/usr/bin:/usr/sbin:/usr/local/bin:$(BINUTILS_PATH)/bin
	rm -rf ./bin ./build
	rm -rf build
	mkdir build
	cd build
	../configure --prefix=$(PREFIX) $(.options)
	$(MAKE_PATH)/bin/make -j$(JOBS)
	$(MAKE_PATH)/bin/make install
}

gnu-rules.flag $(__name__).build-gcc-action : binutils-path ;
gnu-rules.flag $(__name__).build-gcc-action : make-path ;
gnu-rules.flag $(__name__).build-gcc-action : prefix ;
gnu-rules.flag $(__name__).build-gcc-action : jobs ;
