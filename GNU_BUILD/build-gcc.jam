import path sequence notfile option ;
using gcc ;

path-constant	TOP 			: . ;
path-constant	INSTALL_PATH	: /export/home/limin/local ; # <== MODIFY THIS
constant		GCC_VERSION		: $(TOP:BS) ;
path-constant	PREFIX			: $(INSTALL_PATH)/$(GCC_VERSION) ;
path-constant	BINUTILS_PATH	: $(INSTALL_PATH) ;
path-constant	MAKE_PATH		: $(BINUTILS_PATH) ;
constant		JOBS			: 16 ;

rule unpackage ( )
{
	PACKAGES		= gmp mpfr mpc isl ;
	UNZIP-zip		= unzip ;
	UNZIP-tar.gz	= "tar xzf" ;
	UNZIP-tar.bz2	= "tar xjf" ;

	for local pkg in [ path.glob $(TOP) : $(PACKAGES)-*.tar.gz $(PACKAGES)-*.tar.bz2 $(PACKAGES)-*.zip ]
	{
		pkg = $(pkg:BS) ;
		local x = [ MATCH "^(.*)-(.*)\\.(tar.gz|tar.bz2|zip)$" : $(pkg) ] ;

		if ! [ path.exists $(TOP)/$(x[1]) ]
		{
			SHELL "$(UNZIP-$(x[3])) $(pkg)" ;
			SHELL "ln -sf $(x[1])-$(x[2]) $(x[1])" ;
		}
	}
}

actions build-gcc-action
{
	export PATH=/usr/bin:/usr/sbin:/usr/local/bin:$(BINUTILS_PATH)/bin
	rm -rf ./bin ./build
	rm -rf build
	mkdir build
	cd build
	../configure --enable-checking=release --enable-threads=posix --enable-languages=c,c++ --disable-multilib --prefix=$(PREFIX)
	$(MAKE_PATH)/bin/make -j$(JOBS)
	$(MAKE_PATH)/bin/make install
}

rule build-gcc ( )
{
	notfile gcc : @build-gcc-action ;
}

unpackage ;
build-gcc ;
