/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File$
  * @author:  Ripple
  * @version: $Revision$
  *
  * Last modification: $DateTime$
  * Last modified by:  $Author$
  *
  */
///////////////////////////////////////////////////////////
//
//  BroadcastWorker.h
//  Implementation of the Class BroadcastWorker
//  Generated by Enterprise Architect
//  Created on:      25-Sep-2003 18:53:34
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(BROADCASTWORKER__INCLUDED_)
#define BROADCASTWORKER__INCLUDED_


#include <string>
#include "core/threads/src/Thread.h"


namespace TA_Base_Core 
{ 
    class CommsMessageSender; 
    class StateUpdateMessageSender; 
}

namespace TA_IRS_App
{
class AbstractBroadcastCircularList;
class AbstractBroadcast;
class CachedConfig;

class BroadcastWorker : public TA_Base_Core::Thread
{

public:
    BroadcastWorker();
    virtual ~BroadcastWorker();
  
    virtual void run();
    virtual void terminate();

    void enable()
    {
        // Implicitly threadsafe
        m_isEnabled = true;
    }

    void disable()
    {
        // Implicitly threadsafe
        m_isEnabled = false;
    }

	void setModeChangingFlag(bool flag)
	{
		m_isChangingToControlMode = flag;
	}


    void processNextBroadcast(AbstractBroadcast* broadcast);


protected:

    void deleteBroadcast(AbstractBroadcast* broadcast);
    bool shouldRemoveBroadcast(AbstractBroadcast* broadcast);
    void sendProgressUpdateIfChanged(AbstractBroadcast* broadcast);

    volatile bool                       m_isRunning;
    volatile bool                       m_isEnabled;
	volatile bool						m_isChangingToControlMode;
    AbstractBroadcastCircularList*      m_allBroadcasts;
    TA_Base_Core::CommsMessageSender*        m_paAgentCommsSender;
  	TA_Base_Core::StateUpdateMessageSender*  m_stateUpdateMessageSender;
    CachedConfig*                       m_cachedConfigInstance;

private:
    // Disable copy constructor and operator=
    BroadcastWorker( const BroadcastWorker& refCopy );
    const BroadcastWorker& operator=( const BroadcastWorker& refCopy );
};

} // namespace TA_IRS_App

#endif // !defined(BROADCASTWORKER__INCLUDED_)

