/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/GZL6_TIP/3002/transactive/app/ecs/ECSAgent/src/AutoModeMonitor.cpp $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2012/06/12 13:35:44 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  AutoModeMonitor.cpp
//  Implementation of the Class AutoModeMonitor
//  Generated by Enterprise Architect
//  Created on:      25-Sep-2003 18:53:34
//  Original author:
//
///////////////////////////////////////////////////////////
//  Modification history:
//
//
///////////////////////////////////////////////////////////

#if defined(_MSC_VER)
#pragma warning(disable : 4786 4146 4018 4250 4290 4503)
#endif // defined _MSC_VER

#include <time.h>

#include "app/ecs/ECSAgent/src/AutoModeMonitor.h"
#include "app/ecs/ECSAgent/src/ItaEcsCachedConfig.h"
#include "app/ecs/ECSAgent/src/ItaEcsDatapoints.h"

#include "bus/scada/proxy_library/src/ScadaProxyFactory.h"
#include "bus/scada/proxy_library/src/DataPointProxySmartPtr.h"
#include "bus/scada/proxy_library/src/IDataPointProxy.h"
#include "bus/scada/datapoint_library/src/DataPoint.h"

#include "core/utilities/src/TAAssert.h"
#include "core/utilities/src/DebugUtil.h"
#include "core/exceptions/src/ScadaProxyException.h"


AutoModeMonitor::AutoModeMonitor(ItaEcsCachedConfig& theConfig, ItaEcsDatapoints& theDatapoints)
: m_theConfig(theConfig),
  m_theDatapoints(theDatapoints)
{
    FUNCTION_ENTRY("Constructor");

    // Setup proxies

    // Use this method to reuse code
    processItaEcsCachedConfigUpdate(ItaEcsCachedConfig::CONFIG_AUTO_MODE_CORBA_NAME);

    m_theConfig.attachObserver(this, ItaEcsCachedConfig::CONFIG_AUTO_MODE_CORBA_NAME);


    FUNCTION_EXIT;
}


// ExceptionChecked
AutoModeMonitor::~AutoModeMonitor()
{
    FUNCTION_ENTRY("Destructor");
    FUNCTION_EXIT;
}

void AutoModeMonitor::processItaEcsCachedConfigUpdate(ItaEcsCachedConfig::EItaEcsCachedConfigItemKey key)
{
    switch (key)
    {
    case ItaEcsCachedConfig::CONFIG_AUTO_MODE_CORBA_NAME:
        {
            TA_Base_Core::ThreadGuard guard( m_autoModeProxyLock );
            TA_Base_Core::DataPointEntityDataPtr name = m_theConfig.getAutoModeDpEntityData();
            TA_Base_Bus::ScadaProxyFactory::getInstance().createDataPointProxy(name, *this, m_autoModeProxy);
        }
        break;
    default:
        LOG_GENERIC(SourceInfo, TA_Base_Core::DebugUtil::DebugError, 
				"Unexpected EItaEcsCachedConfigItemKey received");
        break;
    }
}

void AutoModeMonitor::processEntityUpdateEvent(unsigned long entityKey, TA_Base_Bus::ScadaEntityUpdateType updateType)
{ 
	if (!m_isEnabled)
	{
        LOG_GENERIC(SourceInfo, TA_Base_Core::DebugUtil::DebugInfo, 
            "Skipping operation in operation mode");        
	}

    try
    {
        if ( updateType != TA_Base_Bus::ValueStateUpdate &&
             updateType != TA_Base_Bus::AlarmSummaryUpdate && //limin++, TD20740
             updateType != TA_Base_Bus::AckSummaryUpdate )    //limin++, TD20740
        {
			LOG(SourceInfo, TA_Base_Core::DebugUtil::GenericLog,  TA_Base_Core::DebugUtil::DebugInfo, 
				"Ignoring non-value state updates");        
            return;
        }

        TA_Base_Core::ThreadGuard guard( m_autoModeProxyLock );

        if (entityKey != m_autoModeProxy->getEntityKey())
        {
			LOG_GENERIC(SourceInfo, TA_Base_Core::DebugUtil::DebugInfo, 
				"Ignoring unrecognised entitykey");        
            return;
        }

        // Only reset for when the autoMode datapoint is reset to true (auto)
        if (m_autoModeProxy->getValueAsBool() == true)
        {
            m_theDatapoints.setLastAppliedMasterMode(TA_IRS_Bus::ECS_NONE_OR_INVALID);
			m_theDatapoints.setLastAppliedStationMode(TA_IRS_Bus::ECS_NONE_OR_INVALID);
        }

    }
    catch(TA_Base_Core::ScadaProxyException&)
    {
        LOG_GENERIC(SourceInfo, TA_Base_Core::DebugUtil::DebugError, 
            "Failed to process AutoMode DataPoint update");
    }
}
