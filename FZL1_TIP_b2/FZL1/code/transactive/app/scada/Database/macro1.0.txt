' 9999Q04019002-Spreadsheet_Macros.bas, cvs version 1.3

Dim strTitle As String
Dim strSubject As String
Dim strReference As String
Dim strVersion As String
Dim strStatus As String
Dim strDated As String
Dim strProject As String
Dim intNumberOfSheets As Integer
Dim strWorksheetNames(30) As String

Sub CollectDocumentPropertyDetails()

    strTitle = ActiveWorkbook.BuiltinDocumentProperties("Title")
    strSubject = ActiveWorkbook.BuiltinDocumentProperties("Subject")
    strAuthor = ActiveWorkbook.BuiltinDocumentProperties("Author")
    
    strReference = ActiveWorkbook.CustomDocumentProperties.Item("Document Number")
    strVersion = ActiveWorkbook.CustomDocumentProperties.Item("Version")
    strStatus = ActiveWorkbook.CustomDocumentProperties.Item("Status")
    strDated = ActiveWorkbook.CustomDocumentProperties.Item("Dated")

End Sub
Sub CollectWorksheetNames()
    
    i = 0
    For Each p In Worksheets
        strWorksheetNames(i) = p.Name
'        MsgBox ("Found sheet: " & strWorksheetNames(i))
        i = i + 1
    Next
    intNumberOfSheets = i - 1

End Sub
Sub CreateRevisionSheet()
'
'   Macro recorded 23/04/2002 by V. Martinelli
'   Create a new sheet to be used for recording the version history details
'
'   First determine if the sheet already exists

    Workbooks(1).Activate
    strRevisionSheetName = "Revision"
    
    CollectWorksheetNames
    boolRevisionExists = False
    For i = 0 To intNumberOfSheets
        If strWorksheetNames(i) = strRevisionSheetName Then
            boolRevisionExists = True
            Exit For
        Else
            boolRevisionExists = False
        End If
    Next
    
    If boolRevisionExists = False Then
        ' If the sheet does not already exist then create one, otherwise exit
        
        ActiveWorkbook.Worksheets.Add
        ActiveSheet.Name = strRevisionSheetName
        
        '   Configure the columns and titles for capturing the version information
        
        Columns("A:A").Select
        Selection.ColumnWidth = 9
        Selection.NumberFormat = "0.00"
        Selection.HorizontalAlignment = xlCenter
    
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        
        Columns("B:B").Select
        Selection.ColumnWidth = 10
        Selection.NumberFormat = "dd-mmm-yy"
        Selection.HorizontalAlignment = xlCenter
        
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        
        Columns("C:C").Select
        Selection.ColumnWidth = 15
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        
        Columns("D:D").Select
        Selection.ColumnWidth = 90
        With Selection
            .WrapText = True
            .Orientation = 0
            .AddIndent = False
            .ShrinkToFit = False
            .MergeCells = False
        End With
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        Selection.Borders(xlEdgeTop).LineStyle = xlNone
        Selection.Borders(xlEdgeBottom).LineStyle = xlNone
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        Selection.Borders(xlInsideHorizontal).LineStyle = xlNone
        
    '   Configure the column titles
    '
        Range("A1").Select
        ActiveCell.FormulaR1C1 = "Version"
        Range("B1").Select
        ActiveCell.FormulaR1C1 = "Date"
        Range("C1").Select
        ActiveCell.FormulaR1C1 = "Author"
        Range("D1").Select
        ActiveCell.FormulaR1C1 = "Change  / Reason for Issue"
        
        Rows("1:1").Select
        Selection.RowHeight = 20
        With Selection.Font
            .Name = "Arial"
            .FontStyle = "Bold"
            .Size = 11
            .Strikethrough = False
            .Superscript = False
            .Subscript = False
            .OutlineFont = False
            .Shadow = False
            .Underline = xlUnderlineStyleNone
            .ColorIndex = xlAutomatic
        End With
        With Selection
            .HorizontalAlignment = xlCenter
            .VerticalAlignment = xlCenter
            .Orientation = 0
            .AddIndent = False
            .ShrinkToFit = False
            .MergeCells = False
        End With
        Selection.Interior.ColorIndex = 34
        
        Selection.Borders(xlDiagonalDown).LineStyle = xlNone
        Selection.Borders(xlDiagonalUp).LineStyle = xlNone
        With Selection.Borders(xlEdgeLeft)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeTop)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeBottom)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        With Selection.Borders(xlEdgeRight)
            .LineStyle = xlContinuous
            .Weight = xlThin
            .ColorIndex = xlAutomatic
        End With
        
        Rows("2:2").Select
        ActiveWindow.FreezePanes = True
        Range("A2").Select
        
    '   Load the first version and Author's name
    '
        ActiveWorkbook.CustomDocumentProperties("Version") = 0.01
        ActiveCell.Value = Val(ActiveWorkbook.CustomDocumentProperties("Version"))
        
        ActiveCell.Offset(0, 1).Activate
        ActiveWorkbook.CustomDocumentProperties("Dated") = Date
        ActiveCell.Value = ActiveWorkbook.CustomDocumentProperties("Dated")
        
        ActiveCell.Offset(0, 1).Activate
        ActiveWorkbook.BuiltinDocumentProperties("Author") = Application.UserName
        ActiveCell.Value = ActiveWorkbook.BuiltinDocumentProperties("Author")
        
        ActiveCell.Offset(0, 1).Activate
    Else
        MsgBox ("Revision sheet already exists.")
    End If
End Sub
Sub SetupWorkbookHeadersAndFooters()

'   Collect all the workbook's property field details
    CollectDocumentPropertyDetails
    CollectWorksheetNames
    
'   For this workbook, collect the names of all the sheets
'   and set up the default header and footer for each sheet
    
    For i = 0 To intNumberOfSheets
        Call SetHeaderFooterDetails(strWorksheetNames(i))
    Next
    
End Sub
Sub SetHeaderFooterDetails(strWorksheet)

    Worksheets(strWorksheet).Activate
    
    strRightHeader = "Version: " & strVersion & " Status: " & strStatus & Chr(10) & "Dated: " & Format(strDated, "dd mmm yy")
    
    With ActiveSheet.PageSetup
        .LeftHeader = "&9" & " " & strReference
        .CenterHeader = "&""Arial,Bold""&14" & strTitle & " " & LTrim(strSubject) & Chr(10) & strWorksheet
        .RightHeader = "&9" & strRightHeader
        .LeftFooter = "&""Arial,Italic""&8Printed: &D - &T"
        .CenterFooter = "&""Arial,Italic""&8&F/&A"
        .RightFooter = "&""Arial,Italic""&8Page: &P of &N"
        .LeftMargin = Application.CentimetersToPoints(1.5)
        .RightMargin = Application.CentimetersToPoints(1.5)
        .TopMargin = Application.CentimetersToPoints(2.5)
        .BottomMargin = Application.CentimetersToPoints(2)
        .HeaderMargin = Application.CentimetersToPoints(1)
        .FooterMargin = Application.CentimetersToPoints(1)
        .PrintHeadings = False
        .PrintGridlines = True
        .PrintComments = xlPrintNoComments
        .PrintQuality = 600
        .CenterHorizontally = False
        .CenterVertically = False
        .Orientation = xlPortrait
        .Draft = False
        .PaperSize = xlPaperA4
        .FirstPageNumber = xlAutomatic
        .Order = xlDownThenOver
        .BlackAndWhite = False
        .Zoom = False
        .FitToPagesWide = 1
        .FitToPagesTall = False
    End With
End Sub
Sub CreateDocumentProperties()
'
' Macro recorded 25/06/02 by Valerio Martinelli
'
With ActiveWorkbook.CustomDocumentProperties
    .Add Name:="Project Number", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Project Number."
    
    .Add Name:="Project Name", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Project Name."
    
    .Add Name:="Document Number", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Document Number."
    
    .Add Name:="Status", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Status."
    
    .Add Name:="Version", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Version."
    
    .Add Name:="Dated", LinkToContent:=False, _
        Type:=msoPropertyTypeDate, Value:=Date

    .Add Name:="Client Name", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Customer Name."
    
    .Add Name:="Client Reference", LinkToContent:=False, _
        Type:=msoPropertyTypeString, Value:="Customer Reference."
    
    End With
End Sub
Sub UpdateVersion()
'
' Macro recorded 21/11/02 by Valerio Martinelli
'
' Prepare the fields required for the version details as strings.
'
    CollectDocumentPropertyDetails
    CollectWorksheetNames
    strRevisionSheetName = "Revision"
    
    Dim Msg, Style, Title, Response
    Dim strDraftVersion As String
    Dim strDateVersion As String
    Dim strAuthor As String
        
'   Need to update the revision sheet with details of this update
'   First select the revision sheet and locate the row that corresponds
'   to the Version number stored in the Property field
'   Then increment the number and add the Author details in the field
'   And position the cursor in the corresponding reason cell.
    
'   Check that the Revision sheet exists in the workbook, otherwise abort
'
    boolRevisionExists = False
    For i = 0 To intNumberOfSheets
        If strWorksheetNames(i) = strRevisionSheetName Then
            boolRevisionExists = True
            Exit For
        Else
            boolRevisionExists = False
        End If
    Next

    ' Inquire as to whether the document is to be Released, and hence update the version accordingly
    '
    If boolRevisionExists = True Then
        ' Goto the revision sheet
        Worksheets(strRevisionSheetName).Activate
        
        Msg = "Is the document to be Released?"
        Style = vbYesNo + vbQuestion + vbDefaultButton2
        Title = "Updating Version table."
        Response = MsgBox(Msg, Style, Title)
        
    ' Update the Date field to today's date and Author
    ' Update the Status field to either Release or Draft
    ' Update the Version field to either a Release x.00 or Draft 0.xx number
    '
        ActiveWorkbook.CustomDocumentProperties("Dated") = Date
        ActiveWorkbook.BuiltinDocumentProperties("Author") = Application.UserName
        ' Capture the current worksheet Version for later use in finding the cell in the revision column
        
        If Response = vbYes Then
            ActiveWorkbook.CustomDocumentProperties("Status") = "Release"
            ActiveWorkbook.CustomDocumentProperties("Version") = Format(Round(ActiveWorkbook.CustomDocumentProperties("Version"), 0) + 1#, "0.00")
        Else
            ActiveWorkbook.CustomDocumentProperties("Status") = "Draft"
            ActiveWorkbook.CustomDocumentProperties("Version") = ActiveWorkbook.CustomDocumentProperties("Version") + 0.01
        End If
    
        ' Using the previous Version value find the cell in the revision column
        
        With ActiveSheet.Range("a1:a500")
            Set c = .Find(strVersion, LookIn:=xlValues)
            If Not c Is Nothing Then
                firstAddress = c.Address
            End If
        End With
        
        ' Find the last entry in the column and move down one row and enter all the details
        
        Range(firstAddress).Select
        
        ActiveCell.Offset(1, 0).Activate
        ActiveCell.Value = Format(ActiveWorkbook.CustomDocumentProperties("Version"), "0.00")
        
        ActiveCell.Offset(0, 1).Activate
        ActiveCell.Value = ActiveWorkbook.CustomDocumentProperties("Dated")
        
        ActiveCell.Offset(0, 1).Activate
        ActiveCell.Value = ActiveWorkbook.BuiltinDocumentProperties("Author")
        
        ActiveCell.Offset(0, 1).Activate
        
        ' Update the headers of all the other sheets
        Call UpdateWorkbookVersionDetails(Mid(strReference, 1, 4))
        
        ' If the document is to be released, generate a PDF copy?
        If Response = vbYes Then
            CollectDocumentPropertyDetails
            For i = 0 To intNumberOfSheets
'                MsgBox ("Generating PDF for sheet: " & strWorksheetNames(i))
                Call GenPDF(strWorksheetNames(i), Mid(strReference, 1, 4))
            Next
        Else
        End If

    Else
        MsgBox ("Revision sheet does not exist, please create one first.")
    End If
    
    Worksheets(strRevisionSheetName).Activate

End Sub
Sub UpdateWorkbookVersionDetails(strProject)

'   Collect all the workbook's property field details
    CollectDocumentPropertyDetails
    
'   For this workbook, update the version detail for each sheet
    
    For i = 0 To intNumberOfSheets
        Worksheets(strWorksheetNames(i)).Activate
        
        strRightHeader = "Version: " & strVersion & " Status: " & strStatus & Chr(10) & "Dated: " & Format(strDated, "dd mmm yy")
        
        With ActiveSheet.PageSetup
            .LeftHeader = "&9" & " " & strProject & Mid(strReference, 5, 12)
            .RightHeader = "&9" & strRightHeader
        End With
    Next

End Sub
Sub GenPDF(strWorksheet, strProject)
'
' Macro recorded 16/12/02 by V. Martinelli
'
Dim strPostscriptPrinter As String
Dim strOutputFileLocation As String
Dim strOutputFilename As String

    Worksheets(strWorksheet).Activate
    
    strPostscriptPrinter = "\\NTSERVER\HP LaserJet 8000 DN PS"
    strOutputFileLocation = "\\RUBICON\PDF\Secure\In\"
    
    strReferenceClean = Replace(strReference, "-", "")
    strReferenceProject = strProject & Mid(strReferenceClean, 5, 12)
    strDocumentFileName = strReferenceProject & "-" & strTitle & " " & LTrim(strSubject) & "_" & strWorksheet
    strDocumentFileName = Replace(strDocumentFileName, " ", "_")
    
    strOutputFilename = strOutputFileLocation & strDocumentFileName & ".prn"
    
    SendKeys (strOutputFilename)
    SendKeys "{ENTER}"
    
    ActiveWindow.SelectedSheets.PrintOut Copies:=1, ActivePrinter:=strPostscriptPrinter, _
        PrintToFile:=True, Collate:=True

End Sub
Sub Inventory_4669()

'   Collect the document properties for this workbook
    CollectDocumentPropertyDetails
    CollectWorksheetNames
    strProject = "4669"
    Call UpdateWorkbookVersionDetails(strProject)

'   ************ Graphical User Interfaces **************
    Sheets("Graphical User Interfaces").Select
    
    ' Hide the rows we dont want
    Selection.AutoFilter Field:=12, Criteria1:="Y"
    
    'Sort the list by project
    Cells.Select
    Selection.Sort Key1:=Range("B2"), Order1:=xlAscending, Key2:=Range("C2") _
        , Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom
        
    ' Delete the columns we don't want
    Columns("E:K").Select
    Selection.EntireColumn.Hidden = True
    Selection.ClearContents
        
    ' Autofit the row height and column width
    Cells.Select
    Columns.AutoFit
    Rows.AutoFit
    Range("B2").Select
            
    Columns("A").Hidden = True
    
    Call GenPDF(ActiveSheet.Name, strProject)
    
'   *********** Agents **************
    Sheets("Agents").Select
    
    ' Hide the rows we dont want
    Selection.AutoFilter Field:=9, Criteria1:="Y"
    
    ' Sort
    Cells.Select
    Selection.Sort Key1:=Range("B2"), Order1:=xlAscending, _
        Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom
    
    ' Delete the columns we dont want
    Columns("E:H").Select
    Selection.EntireColumn.Hidden = True
    Selection.ClearContents
    
    Columns("J:L").Select
    Selection.ClearContents
    Selection.EntireColumn.Hidden = True
    
    ' Autofit the row height and column width
    Cells.Select
    Columns.AutoFit
    Rows.AutoFit
    Range("B2").Select
    
    Columns("A").Hidden = True
    
    Call GenPDF(ActiveSheet.Name, strProject)

'   *********** Libraries ************
    Sheets("Libraries").Select
    
    ' Hide the rows we dont want
    Selection.AutoFilter Field:=8, Criteria1:="Y"
    
    'Sort
    Cells.Select
    Selection.Sort Key1:=Range("B2"), Order1:=xlAscending, Key2:=Range("C2") _
        , Order2:=xlAscending, Header:=xlGuess, OrderCustom:=1, MatchCase:= _
        False, Orientation:=xlTopToBottom
    
    ' Delete the columns we dont want
    Columns("E:G").Select
    Selection.EntireColumn.Hidden = True
    Selection.ClearContents
    
    ' Autofit the row height and column width
    Cells.Select
    Columns.AutoFit
    Rows.AutoFit
    Range("B2").Select
    
    Columns("A").Hidden = True
    
    Call GenPDF(ActiveSheet.Name, strProject)

End Sub
Sub ProcessWorksheets()
    
    Dim strLevel(5) As String
    Dim strSheet(8) As String
    strLevel(1) = "Station"
    strLevel(2) = "StationSystem"
    strLevel(3) = "StationSubSystem"
    strLevel(4) = "Equipment"
    strLevel(5) = "DataPoint"
    strSheet(1) = "VT_EqtShortLabel"
    strSheet(2) = "VT_EqtLabel"
    strSheet(3) = "VT_EqtAssetName"
    strSheet(4) = "RDI"
    strSheet(5) = "RDO"
    strSheet(6) = "RAI"
    strSheet(7) = "RAO"
    strSheet(8) = "VDI_DDI"
    intSheets = 8
        
    Workbooks(1).Activate
    CollectWorksheetNames
                
    'For i = 0 To intNumberOfSheets
    For i = 1 To intSheets
        For x = 1 To 5
        ' We are processing the first 5 levels only Not including PMS agent
            ActiveWorkbook.Worksheets.Add
            ActiveSheet.Name = "Out " & strSheet(i)
            strOutputWorksheetName = ActiveSheet.Name

            strWorksheetNames(intSheets + 1 + i) = strOutputWorksheetName

            Call AnalyseRows(4, strSheet(i), strOutputWorksheetName, strLevel(x))
            ' Save results to csv file.  There is probably a better way to do this.
            Workbooks.Add
            Workbooks(1).Activate
            Worksheets("Out " & strSheet(i)).Move Before:=Workbooks(2).Sheets(1)
            Workbooks(2).SaveAs Filename:= _
                "C:\DatapointLoad\" & strLevel(x) & i & ".csv", FileFormat:=xlCSV, _
                CreateBackup:=False
            ' Dont wont to keep additional workbook.  now we have the csv delete the workbook.
            ActiveWindow.Close SaveChanges:=False
        Next
    Next
    MsgBox ("CSV files have been added to directory C:\DatapointLoad")
End Sub

Sub AnalyseRows(intStartRow, strWorksheet, strOutputWorksheetName, strLevel)
    
    intRows = GetRowCount(strWorksheet)
    intCols = GetColumnCount(strWorksheet)
    
    ' Ther following is location specific within the spreadsheet.
    ' If the column orders are ever altered then these also will need altering
    If strLevel = "DataPoint" Then
        Call LoadHeaderValues(strWorksheet, 2, strOutputWorksheetName, intCols, "", strLevel)
        Call CheckMultipleColumns(strWorksheet, intStartRow, 2, 6, 1, strOutputWorksheetName, intRows, intCols, strLevel)
    ElseIf strLevel = "Equipment" Then
        Call LoadHeaderValues(strWorksheet, 2, strOutputWorksheetName, intCols, "", strLevel)
        Call CheckMultipleColumns(strWorksheet, intStartRow, 2, 5, 1, strOutputWorksheetName, intRows, intCols, strLevel)
    ElseIf strLevel = "StationSubSystem" Then
        Call LoadHeaderValues(strWorksheet, 2, strOutputWorksheetName, intCols, "", strLevel)
        Call CheckMultipleColumns(strWorksheet, intStartRow, 2, 4, 1, strOutputWorksheetName, intRows, intCols, strLevel)
    ElseIf strLevel = "StationSystem" Then
        Call LoadHeaderValues(strWorksheet, 2, strOutputWorksheetName, intCols, "", strLevel)
        Call CheckMultipleColumns(strWorksheet, intStartRow, 2, 3, 1, strOutputWorksheetName, intRows, intCols, strLevel)
    ElseIf strLevel = "Station" Then
        Call LoadHeaderValues(strWorksheet, 2, strOutputWorksheetName, intCols, "", strLevel)
        Call CheckMultipleColumns(strWorksheet, intStartRow, 2, 2, 1, strOutputWorksheetName, intRows, intCols, strLevel)
    Else
    End If
End Sub
Function CheckValue(RowIndex, strStoreColumn, strName, intStationNameCount, strWorksheet, strOutputWorksheetName)

    For Index = RowIndex - intStationNameCount To RowIndex
        With Worksheets(strOutputWorksheetName).Cells(Index, strStoreColumn)
            If .Value = strName = True Then
                bolFound = True
                Exit For
            Else
                bolFound = False
            End If
        End With
    Next Index
    
    CheckValue = bolFound

End Function
Sub CheckColumn(strWorksheet, rwIndex, strColumn, strStoreColumn, strOutputWorksheetName)
    
    intStationNameCount = 0
    RowIndex = 4
    
    For rwIndex = 4 To 70
        With Worksheets(strWorksheet).Cells(rwIndex, strColumn)
            strCellValue = .Value
            bolExists = CheckValue(RowIndex, strStoreColumn, strCellValue, intStationNameCount, strWorksheet, strOutputWorksheetName)
            
            If bolExists = True Then
            Else
                Worksheets(strOutputWorksheetName).Cells(RowIndex, strStoreColumn).Value = strCellValue
                intStationNameCount = intStationNameCount + 1
                RowIndex = RowIndex + 1
            End If
        End With
    Next rwIndex
End Sub
Sub CheckMultipleColumns(strWorksheet, rwIndex, strStartColumn, strEndColumn, strStoreColumn, strOutputWorksheetName, intRows, intCols, strLevel)
    RowIndex = 4
    intStationNameCount = 0
    strCellValue = ""
    strParent = ""
        
    For rwIndex = 4 To intRows
        With Worksheets(strWorksheet).Cells(rwIndex, strStartColumn)
            strCellValue = .Value
            If strLevel = "Station" Then
            ' Station's parent will not have a concatenated value
                strParent = Worksheets(strWorksheet).Cells(rwIndex, strStartColumn - 1).Value
            Else
              ' Get Concatenated name
              For clIndex = strStartColumn + 1 To strEndColumn
                strCellValue = strCellValue & "." & Worksheets(strWorksheet).Cells(rwIndex, clIndex).Value
              Next clIndex
            
              strParent = .Value
              ' Get Parent Name
              For clIndex = strStartColumn + 1 To strEndColumn - 1
                strParent = strParent & "." & Worksheets(strWorksheet).Cells(rwIndex, clIndex).Value
              Next clIndex
            End If
            
            bolExists = CheckValue(RowIndex, strStoreColumn, strCellValue, intStationNameCount, strWorksheet, strOutputWorksheetName)
            
            If bolExists = True Then
            Else
                Worksheets(strOutputWorksheetName).Cells(RowIndex, strStoreColumn).Value = strCellValue
                If strLevel = "DataPoint" Then
                ' Now insert all the values for this row if it is a datapoint
                    Call LoadRowValues(strWorksheet, RowIndex, strOutputWorksheetName, intCols, strParent, strLevel)
                    intStationNameCount = intStationNameCount + 1
                    RowIndex = RowIndex + 1
                Else
                ' Insert limited rows
                    Call LoadOtherValues(strWorksheet, RowIndex, strOutputWorksheetName, 6, strParent, strLevel)
                    intStationNameCount = intStationNameCount + 1
                    RowIndex = RowIndex + 1
                End If
            End If
        End With
    Next rwIndex
    'Delete the first and third rows which will be empty
    Worksheets(strOutputWorksheetName).Rows(3).EntireRow.Delete
    Worksheets(strOutputWorksheetName).Rows(1).EntireRow.Delete
End Sub


Function GetRowCount(strWorksheet)

  intRows = 4
  For i = 4 To Worksheets(strWorksheet).Rows.Count
    If Worksheets(strWorksheet).Cells(i, 1).Value = False Then
      intRows = i - 1
      Exit For
    End If
  Next
  GetRowCount = intRows

End Function

Function GetColumnCount(strWorksheet)

  intCols = 0
  For i = 1 To Worksheets(strWorksheet).Columns.Count
    If Worksheets(strWorksheet).Cells(2, i).Value = False Then
      intCols = i - 1
      Exit For
    End If
  Next
  GetColumnCount = intCols
  
End Function

Sub LoadRowValues(strWorksheet, strHeaderRow, strOutputWorksheetName, intCols, strParent, strLevel)
      intX = 1
      'Need to set some of our own parameters
      'intX is our column index
      intX = intX + 1
      If Worksheets(strWorksheet).Cells(strHeaderRow, 12) = "" Then
        If Worksheets(strWorksheet).Cells(strHeaderRow, 11) = "" Then
          Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "VIRTUAL"
        Else
          Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strWorksheet).Cells(strHeaderRow, 11)
        End If
      Else
          Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strWorksheet).Cells(strHeaderRow, 12)
      End If
      intX = intX + 1
      If Worksheets(strWorksheet).Cells(strHeaderRow, 13) = "" Then
            Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "NA"
      Else
            Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strWorksheet).Cells(strHeaderRow, 13)
      End If
      intX = intX + 1
      Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "SCADA"
      intX = intX + 1
      Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = strLevel
      intX = intX + 1
      Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = strParent

      'Get the rest of the column values
      For i = 17 To intCols
        intX = intX + 1
        Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strWorksheet).Cells(strHeaderRow, i)
      Next

      ' Now a column of our own
      intX = intX + 1
      Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strOutputWorksheetName).Cells(strHeaderRow, 1)

End Sub

Sub LoadOtherValues(strWorksheet, strHeaderRow, strOutputWorksheetName, intCols, strParent, strLevel)
    intX = 1
    'Need to set some of our own parameters
    intX = intX + 1
    Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "VIRTUAL"
    intX = intX + 1
    Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "NA"
    intX = intX + 1
    Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "SCADA"
    intX = intX + 1
    Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = strLevel
    intX = intX + 1
    Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = strParent
End Sub

Sub LoadHeaderValues(strWorksheet, strHeaderRow, strOutputWorksheetName, intCols, strParent, strLevel)
     
      intX = 1
      'Insert DatapointName Column(6) in column 1
      Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "Name"
    
      'Get next 5 values - maintain column index for Output sheet
      For i = 12 To 16
        intX = intX + 1
        Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strWorksheet).Cells(strHeaderRow, i)
      Next
   If strLevel = "DataPoint" Then
      For i = 17 To intCols
        intX = intX + 1
        Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = Worksheets(strWorksheet).Cells(strHeaderRow, i)
      Next
      ' Now a column of our own
      intX = intX + 1
      Worksheets(strOutputWorksheetName).Cells(strHeaderRow, intX) = "StructuredName"
    End If
End Sub

Sub LoadDefaults()
'    On Error Resume Next
    Dim strCell As Range
    Workbooks(1).Activate
    CollectWorksheetNames
    intRows = 1
    intCols = 1
        
    For i = 1 To intNumberOfSheets + 1
      If Worksheets(i).Name = "RAI" Then
      Worksheets(i).Activate
      Worksheets(i).Activate
      boFound = True
      While boFound
       Set strCell = Cells.Find(What:=";", After:=Cells(1, 1), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
       If Not strCell Is Nothing Then
         strCell.Activate
         ActiveCell.Replace What:=";", Replacement:=","
       Else
         boFound = False
       End If
      Wend
      Call CellDefault(Worksheets(i).Name, "DataPointType", "IEEE_64")
        Call CellDefault(Worksheets(i).Name, "SecurityLevel", "10")
        Call CellDefault(Worksheets(i).Name, "ScanTimeFactor", "1")
        Call CellDefault(Worksheets(i).Name, "ServiceState", "IN")
        Call CellDefault(Worksheets(i).Name, "AllowWrite", "FALSE")
        Call CellDefault(Worksheets(i).Name, "UpdateThreshold", "1")
        Call CellDefault(Worksheets(i).Name, "UpdateTimeLimit", "1")
        Call CellDefault(Worksheets(i).Name, "EngUnitsEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "Precision", "2")
        Call CellDefault(Worksheets(i).Name, "RawLimitLow", "0")
        Call CellDefault(Worksheets(i).Name, "RawLimitHigh", "1000")
        Call CellDefault(Worksheets(i).Name, "EngineeringLimitLow", "0")
        Call CellDefault(Worksheets(i).Name, "EngineeringLimitHigh", "1000")
        Call CellDefault(Worksheets(i).Name, "ZeroValueThreshold", "0")
        Call CellDefault(Worksheets(i).Name, "HiHiAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "HiHiAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "HiHiAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "HiAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "HiAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "HiAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "LoAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "LoAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "LoAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "LoLoAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "LoLoAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "LoLoAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "EnableTrending", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableEngineeringNote", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableHelpURL", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressed", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressedValue", "0")
      ElseIf Worksheets(i).Name = "RDI" Then
      Worksheets(i).Activate
      boFound = True
      While boFound
       Set strCell = Cells.Find(What:=";", After:=Cells(1, 1), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
       If Not strCell Is Nothing Then
         strCell.Activate
         ActiveCell.Replace What:=";", Replacement:=","
       Else
         boFound = False
       End If
      Wend
        Call CellDefault(Worksheets(i).Name, "DataPointType", "BOOL")
        Call CellDefault(Worksheets(i).Name, "SecurityLevel", "10")
        Call CellDefault(Worksheets(i).Name, "ScanTimeFactor", "1")
        Call CellDefault(Worksheets(i).Name, "ServiceState", "IN")
        Call CellDefault(Worksheets(i).Name, "AllowWrite", "FALSE")
        Call CellDefault(Worksheets(i).Name, "UpdateThreshold", "1")
        Call CellDefault(Worksheets(i).Name, "UpdateTimeLimit", "1")
        Call CellDefault(Worksheets(i).Name, "EngUnitsEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "FalseAlarmEnable", "FALSE")
        Call CellDefault(Worksheets(i).Name, "FalseAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "TrueAlarmEnable", "FALSE")
        Call CellDefault(Worksheets(i).Name, "TrueAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "EnableTrending", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableEngineeringNote", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableHelpURL", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressed", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressedValue", "0")
      ElseIf Worksheets(i).Name = "RDO" Then
      Worksheets(i).Activate
      Worksheets(i).Activate
      boFound = True
      While boFound
       Set strCell = Cells.Find(What:=";", After:=Cells(1, 1), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
       If Not strCell Is Nothing Then
         strCell.Activate
         ActiveCell.Replace What:=";", Replacement:=","
       Else
         boFound = False
       End If
      Wend
      Call CellDefault(Worksheets(i).Name, "DataPointType", "BOOL")
        Call CellDefault(Worksheets(i).Name, "SecurityLevel", "10")
        Call CellDefault(Worksheets(i).Name, "ScanTimeFactor", "1")
        Call CellDefault(Worksheets(i).Name, "ServiceState", "IN")
        Call CellDefault(Worksheets(i).Name, "AllowWrite", "TRUE")
        Call CellDefault(Worksheets(i).Name, "UpdateThreshold", "1")
        Call CellDefault(Worksheets(i).Name, "UpdateTimeLimit", "1")
        Call CellDefault(Worksheets(i).Name, "EngUnitsEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "FalseAlarmEnable", "FALSE")
        Call CellDefault(Worksheets(i).Name, "FalseAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "TrueAlarmEnable", "FALSE")
        Call CellDefault(Worksheets(i).Name, "TrueAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "EnableTrending", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableEngineeringNote", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableHelpURL", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressed", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressedValue", "0")
      ElseIf Worksheets(i).Name = "RAO" Then
      Worksheets(i).Activate
      Worksheets(i).Activate
      boFound = True
      While boFound
       Set strCell = Cells.Find(What:=";", After:=Cells(1, 1), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
       If Not strCell Is Nothing Then
         strCell.Activate
         ActiveCell.Replace What:=";", Replacement:=","
       Else
         boFound = False
       End If
      Wend
      Call CellDefault(Worksheets(i).Name, "DataPointType", "IEEE_64")
        Call CellDefault(Worksheets(i).Name, "SecurityLevel", "10")
        Call CellDefault(Worksheets(i).Name, "ScanTimeFactor", "1")
        Call CellDefault(Worksheets(i).Name, "ServiceState", "IN")
        Call CellDefault(Worksheets(i).Name, "AllowWrite", "TRUE")
        Call CellDefault(Worksheets(i).Name, "UpdateThreshold", "1")
        Call CellDefault(Worksheets(i).Name, "UpdateTimeLimit", "1")
        Call CellDefault(Worksheets(i).Name, "EngUnitsEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "Precision", "2")
        Call CellDefault(Worksheets(i).Name, "RawLimitLow", "0")
        Call CellDefault(Worksheets(i).Name, "RawLimitHigh", "1000")
        Call CellDefault(Worksheets(i).Name, "EngineeringLimitLow", "0")
        Call CellDefault(Worksheets(i).Name, "EngineeringLimitHigh", "1000")
        Call CellDefault(Worksheets(i).Name, "ZeroValueThreshold", "0")
        Call CellDefault(Worksheets(i).Name, "HiHiAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "HiHiAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "HiHiAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "HiAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "HiAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "HiAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "LoAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "LoAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "LoAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "LoLoAlarmEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "LoLoAlarmValue", "0")
        Call CellDefault(Worksheets(i).Name, "LoLoAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "EnableTrending", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableEngineeringNote", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableHelpURL", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressed", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressedValue", "0")
      ElseIf Worksheets(i).Name = "VDI_DDI" Then
      Worksheets(i).Activate
      Worksheets(i).Activate
      boFound = True
      While boFound
       Set strCell = Cells.Find(What:=";", After:=Cells(1, 1), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
       If Not strCell Is Nothing Then
         strCell.Activate
         ActiveCell.Replace What:=";", Replacement:=","
       Else
         boFound = False
       End If
      Wend
        Call CellDefault(Worksheets(i).Name, "DataPointType", "BOOL")
        Call CellDefault(Worksheets(i).Name, "SecurityLevel", "10")
        Call CellDefault(Worksheets(i).Name, "ScanTimeFactor", "1")
        Call CellDefault(Worksheets(i).Name, "ServiceState", "IN")
        Call CellDefault(Worksheets(i).Name, "AllowWrite", "FALSE")
        Call CellDefault(Worksheets(i).Name, "UpdateThreshold", "1")
        Call CellDefault(Worksheets(i).Name, "UpdateTimeLimit", "1")
        Call CellDefault(Worksheets(i).Name, "EngUnitsEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "FalseAlarmEnable", "FALSE")
        Call CellDefault(Worksheets(i).Name, "FalseAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "TrueAlarmEnable", "FALSE")
        Call CellDefault(Worksheets(i).Name, "TrueAlarmDelay", "0")
        Call CellDefault(Worksheets(i).Name, "EnableTrending", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableEngineeringNote", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableHelpURL", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressed", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressedValue", "0")
      ElseIf Worksheets(i).Name = "VT_EqtShortLabel" Or Worksheets(i).Name = "VT_EqtLabel" Or Worksheets(i).Name = "VT_EqtAssetName" Then
      Worksheets(i).Activate
      Worksheets(i).Activate
      boFound = True
      While boFound
       Set strCell = Cells.Find(What:=";", After:=Cells(1, 1), LookIn:=xlValues, LookAt:= _
        xlPart, SearchOrder:=xlByRows, SearchDirection:=xlNext, MatchCase:=False)
       If Not strCell Is Nothing Then
         strCell.Activate
         ActiveCell.Replace What:=";", Replacement:=","
       Else
         boFound = False
       End If
      Wend
      Call CellDefault(Worksheets(i).Name, "DataPointType", "TEXT")
        Call CellDefault(Worksheets(i).Name, "SecurityLevel", "10")
        Call CellDefault(Worksheets(i).Name, "ScanTimeFactor", "1")
        Call CellDefault(Worksheets(i).Name, "ServiceState", "IN")
        Call CellDefault(Worksheets(i).Name, "AllowWrite", "FALSE")
        Call CellDefault(Worksheets(i).Name, "UpdateThreshold", "1")
        Call CellDefault(Worksheets(i).Name, "UpdateTimeLimit", "1")
        Call CellDefault(Worksheets(i).Name, "EngUnitsEnabled", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableEngineeringNote", "FALSE")
        Call CellDefault(Worksheets(i).Name, "EnableHelpURL", "FALSE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressed", "TRUE")
        Call CellDefault(Worksheets(i).Name, "ManuallyDressedValue", "0")
      'ElseIf Worksheets(i).Name = "VT_EqtLabel" Then
      'ElseIf Worksheets(i).Name = "VT_EqtAssetName" Then
      End If
    Next
End Sub

Sub CellDefault(strWorksheet, strCellHeader, strNewValue)
        intRows = GetRowCount(strWorksheet)
        intCols = GetColumnCount(strWorksheet)
        For x = 1 To intCols
          If Worksheets(strWorksheet).Cells(2, x) = strCellHeader Then
            For y = 4 To intRows
              If Worksheets(strWorksheet).Cells(y, x) = "" Then
                Worksheets(strWorksheet).Cells(y, x) = strNewValue
              End If
            Next
          End If
        Next
End Sub









