// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.8
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:423


#include "RemoteAPIC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Sequence_TypeCode_Static.h"
#include "tao/AnyTypeCode/String_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/AnyTypeCode/TypeCode_Case_T.h"
#include "tao/AnyTypeCode/Union_TypeCode_Static.h"
#include "tao/AnyTypeCode/Recursive_Type_TypeCode.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "RemoteAPIC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// .\be\be_visitor_arg_traits.cpp:68

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:607

#if !defined (_MCC7500SDK_PARAMETERS__ARG_TRAITS_)
#define _MCC7500SDK_PARAMETERS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<MCC7500SDK::Parameters>
    : public
        Var_Size_Arg_Traits_T<
            MCC7500SDK::Parameters,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:969

#if !defined (_MCC7500SDK_UVARIANT__ARG_TRAITS_)
#define _MCC7500SDK_UVARIANT__ARG_TRAITS_
  
  template<>
  class Arg_Traits<MCC7500SDK::UVariant>
    : public
        Var_Size_Arg_Traits_T<
            MCC7500SDK::UVariant,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:861

#if !defined (_MCC7500SDK_VERSION__ARG_TRAITS_)
#define _MCC7500SDK_VERSION__ARG_TRAITS_
  
  template<>
  class Arg_Traits<MCC7500SDK::Version>
    : public
        Fixed_Size_Arg_Traits_T<
            MCC7500SDK::Version,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:136

#if !defined (_MCC7500SDK_IBASEAPIREQUEST__ARG_TRAITS_)
#define _MCC7500SDK_IBASEAPIREQUEST__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<MCC7500SDK::IBaseAPIRequest>
    : public
        Object_Arg_Traits_T<
            MCC7500SDK::IBaseAPIRequest_ptr,
            MCC7500SDK::IBaseAPIRequest_var,
            MCC7500SDK::IBaseAPIRequest_out,
            TAO::Objref_Traits<MCC7500SDK::IBaseAPIRequest>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:136

#if !defined (_MCC7500SDK_IAPIRESPONSE__ARG_TRAITS_)
#define _MCC7500SDK_IAPIRESPONSE__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<MCC7500SDK::IAPIResponse>
    : public
        Object_Arg_Traits_T<
            MCC7500SDK::IAPIResponse_ptr,
            MCC7500SDK::IAPIResponse_var,
            MCC7500SDK::IAPIResponse_out,
            TAO::Objref_Traits<MCC7500SDK::IAPIResponse>,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // .\be\be_visitor_arg_traits.cpp:607

#if !defined (_MCC7500SDK_RESPONSEIDS__ARG_TRAITS_)
#define _MCC7500SDK_RESPONSEIDS__ARG_TRAITS_
  
  template<>
  class Arg_Traits<MCC7500SDK::ResponseIDs>
    : public
        Var_Size_Arg_Traits_T<
            MCC7500SDK::ResponseIDs,
            TAO::Any_Insert_Policy_Stream
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_DWORD (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/DWORD:1.0",
    "DWORD",
    &CORBA::_tc_ulong);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_DWORD =
    &_tao_tc_MCC7500SDK_DWORD;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_WORD (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/WORD:1.0",
    "WORD",
    &CORBA::_tc_ushort);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_WORD =
    &_tao_tc_MCC7500SDK_WORD;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_BYTE (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/BYTE:1.0",
    "BYTE",
    &CORBA::_tc_octet);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_BYTE =
    &_tao_tc_MCC7500SDK_BYTE;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_BOOL (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/BOOL:1.0",
    "BOOL",
    &CORBA::_tc_boolean);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_BOOL =
    &_tao_tc_MCC7500SDK_BOOL;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_HANDLE (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/HANDLE:1.0",
    "HANDLE",
    &CORBA::_tc_long);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_HANDLE =
    &_tao_tc_MCC7500SDK_HANDLE;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_RID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/RID:1.0",
    "RID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_RID =
    &_tao_tc_MCC7500SDK_RID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_USER_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/USER_ID:1.0",
    "USER_ID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_USER_ID =
    &_tao_tc_MCC7500SDK_USER_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_SITE_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/SITE_ID:1.0",
    "SITE_ID",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_SITE_ID =
    &_tao_tc_MCC7500SDK_SITE_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_ZONE_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/ZONE_ID:1.0",
    "ZONE_ID",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_ZONE_ID =
    &_tao_tc_MCC7500SDK_ZONE_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_LC_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/LC_ID:1.0",
    "LC_ID",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_LC_ID =
    &_tao_tc_MCC7500SDK_LC_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_SPEAKER_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/SPEAKER_ID:1.0",
    "SPEAKER_ID",
    &MCC7500SDK::_tc_BYTE);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_SPEAKER_ID =
    &_tao_tc_MCC7500SDK_SPEAKER_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_AUXID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/AUXID:1.0",
    "AUXID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_AUXID =
    &_tao_tc_MCC7500SDK_AUXID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_OPID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/OPID:1.0",
    "OPID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_OPID =
    &_tao_tc_MCC7500SDK_OPID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_UNIT_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/UNIT_ID:1.0",
    "UNIT_ID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_UNIT_ID =
    &_tao_tc_MCC7500SDK_UNIT_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_URID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/URID:1.0",
    "URID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_URID =
    &_tao_tc_MCC7500SDK_URID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_TONE_ID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/TONE_ID:1.0",
    "TONE_ID",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_TONE_ID =
    &_tao_tc_MCC7500SDK_TONE_ID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IN_ADDR (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/IN_ADDR:1.0",
    "IN_ADDR",
    &MCC7500SDK::_tc_DWORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_IN_ADDR =
    &_tao_tc_MCC7500SDK_IN_ADDR;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_OP_CID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/OP_CID:1.0",
    "OP_CID",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_OP_CID =
    &_tao_tc_MCC7500SDK_OP_CID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_OP_CAP_INDEX (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/OP_CAP_INDEX:1.0",
    "OP_CAP_INDEX",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_OP_CAP_INDEX =
    &_tao_tc_MCC7500SDK_OP_CAP_INDEX;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_RES_CID (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/RES_CID:1.0",
    "RES_CID",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_RES_CID =
    &_tao_tc_MCC7500SDK_RES_CID;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_RES_CAP_INDEX (
    ::CORBA::tk_alias,
    "IDL:MCC7500SDK/RES_CAP_INDEX:1.0",
    "RES_CAP_INDEX",
    &MCC7500SDK::_tc_WORD);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_RES_CAP_INDEX =
    &_tao_tc_MCC7500SDK_RES_CAP_INDEX;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_MCC7500SDK_EVariantType[] =
  {
    "eUINT8_T",
    "eUINT16_T",
    "eUINT32_T",
    "eUINT64_T",
    "eINT8_T",
    "eINT16_T",
    "eINT32_T",
    "eINT64_T",
    "eFLOAT32_T",
    "eFLOAT64_T",
    "eBOOLEAN_T",
    "eSEQUENCE_T",
    "eSTRING_T",
    "eWSTRING_T",
    "eEMPTY_T"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_EVariantType (
    "IDL:MCC7500SDK/EVariantType:1.0",
    "EVariantType",
    _tao_enumerators_MCC7500SDK_EVariantType,
    15);
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_EVariantType =
    &_tao_tc_MCC7500SDK_EVariantType;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:56

#if !defined (_MCC7500SDK_PARAMETERS_CS_)
#define _MCC7500SDK_PARAMETERS_CS_

MCC7500SDK::Parameters::Parameters (void)
{}

MCC7500SDK::Parameters::Parameters (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        UVariant
      > (max)
{}

MCC7500SDK::Parameters::Parameters (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    MCC7500SDK::UVariant * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        UVariant
      >
    (max, length, buffer, release)
{}

MCC7500SDK::Parameters::Parameters (
      const Parameters &seq)
    : ::TAO::unbounded_value_sequence<
          UVariant
        > (seq)
  {}
  
  MCC7500SDK::Parameters::~Parameters (void)
  {}
  
  void MCC7500SDK::Parameters::_tao_any_destructor (
      void * _tao_void_pointer)
  {
    Parameters * _tao_tmp_pointer =
      static_cast<Parameters *> (_tao_void_pointer);
    delete _tao_tmp_pointer;
  }

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:510
  
  
#ifndef _TAO_TYPECODE_MCC7500SDK_Parameters_GUARD
#define _TAO_TYPECODE_MCC7500SDK_Parameters_GUARD
  
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

  namespace TAO
  {
    namespace TypeCode
    {
      namespace
      {
        TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                                TAO::Null_RefCount_Policy>
          MCC7500SDK_Parameters_0 (
            ::CORBA::tk_sequence,
            &MCC7500SDK::_tc_UVariant,
            0U);
          
        ::CORBA::TypeCode_ptr const tc_MCC7500SDK_Parameters_0 =
          &MCC7500SDK_Parameters_0;
      }
    }
  }
  
TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_MCC7500SDK_Parameters_GUARD */
  
  static TAO::TypeCode::Alias<char const *,
                              ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
    _tao_tc_MCC7500SDK_Parameters (
      ::CORBA::tk_alias,
      "IDL:MCC7500SDK/Parameters:1.0",
      "Parameters",
      &TAO::TypeCode::tc_MCC7500SDK_Parameters_0);
    
  namespace MCC7500SDK
  {
    ::CORBA::TypeCode_ptr const _tc_Parameters =
      &_tao_tc_MCC7500SDK_Parameters;
  }
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_union/union_cs.cpp:82
  
  MCC7500SDK::UVariant::UVariant (void)
  {
    ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
    this->disc_ = (MCC7500SDK::EVariantType) -1;
  }
  
  MCC7500SDK::UVariant::UVariant (const ::MCC7500SDK::UVariant &u)
  {
    this->disc_ = u.disc_;
    switch (this->disc_)
    {
      case MCC7500SDK::eUINT8_T:
      {
        this->u_.V_UINT8_ = u.u_.V_UINT8_;
      }
      break;
      case MCC7500SDK::eUINT16_T:
      {
        this->u_.V_UINT16_ = u.u_.V_UINT16_;
      }
      break;
      case MCC7500SDK::eUINT32_T:
      {
        this->u_.V_UINT32_ = u.u_.V_UINT32_;
      }
      break;
      case MCC7500SDK::eUINT64_T:
      {
        this->u_.V_UINT64_ = u.u_.V_UINT64_;
      }
      break;
      case MCC7500SDK::eINT8_T:
      {
        this->u_.V_INT8_ = u.u_.V_INT8_;
      }
      break;
      case MCC7500SDK::eINT16_T:
      {
        this->u_.V_INT16_ = u.u_.V_INT16_;
      }
      break;
      case MCC7500SDK::eINT32_T:
      {
        this->u_.V_INT32_ = u.u_.V_INT32_;
      }
      break;
      case MCC7500SDK::eINT64_T:
      {
        this->u_.V_INT64_ = u.u_.V_INT64_;
      }
      break;
      case MCC7500SDK::eFLOAT32_T:
      {
        this->u_.V_FLOAT32_ = u.u_.V_FLOAT32_;
      }
      break;
      case MCC7500SDK::eFLOAT64_T:
      {
        this->u_.V_FLOAT64_ = u.u_.V_FLOAT64_;
      }
      break;
      case MCC7500SDK::eBOOLEAN_T:
      {
        this->u_.V_BOOLEAN_ = u.u_.V_BOOLEAN_;
      }
      break;
      case MCC7500SDK::eSEQUENCE_T:
      {
        if (u.u_.V_SEQUENCE_ == 0)
          {
            this->u_.V_SEQUENCE_ = 0;
          }
        else
          {
            ACE_NEW (
                this->u_.V_SEQUENCE_,
                MCC7500SDK::Parameters (*u.u_.V_SEQUENCE_)
              );
          }
      }
      break;
      case MCC7500SDK::eSTRING_T:
      {
        this->u_.V_STRING_ = ::CORBA::string_dup (u.u_.V_STRING_);
      }
      break;
      case MCC7500SDK::eWSTRING_T:
      {
        this->u_.V_WSTRING_ = ::CORBA::wstring_dup (u.u_.V_WSTRING_);
      }
      break;
      case MCC7500SDK::eEMPTY_T:
      {
        this->u_.V_EMPTY_ = u.u_.V_EMPTY_;
      }
      break;
      default:
      break;
    }
  }
  
  MCC7500SDK::UVariant::~UVariant (void)
  {
    // Finalize.
    this->_reset ();
  }
  
  void MCC7500SDK::UVariant::_tao_any_destructor (void *_tao_void_pointer)
  {
    UVariant *tmp =
      static_cast<UVariant *> (_tao_void_pointer);
    delete tmp;
  }
  
  MCC7500SDK::UVariant &
  MCC7500SDK::UVariant::operator= (const ::MCC7500SDK::UVariant &u)
  {
    if (&u == this)
      {
        return *this;
      }
    
    this->_reset ();
    this->disc_ = u.disc_;
    
    switch (this->disc_)
    {
      case MCC7500SDK::eUINT8_T:
      {
        this->u_.V_UINT8_ = u.u_.V_UINT8_;
      }
      break;
      case MCC7500SDK::eUINT16_T:
      {
        this->u_.V_UINT16_ = u.u_.V_UINT16_;
      }
      break;
      case MCC7500SDK::eUINT32_T:
      {
        this->u_.V_UINT32_ = u.u_.V_UINT32_;
      }
      break;
      case MCC7500SDK::eUINT64_T:
      {
        this->u_.V_UINT64_ = u.u_.V_UINT64_;
      }
      break;
      case MCC7500SDK::eINT8_T:
      {
        this->u_.V_INT8_ = u.u_.V_INT8_;
      }
      break;
      case MCC7500SDK::eINT16_T:
      {
        this->u_.V_INT16_ = u.u_.V_INT16_;
      }
      break;
      case MCC7500SDK::eINT32_T:
      {
        this->u_.V_INT32_ = u.u_.V_INT32_;
      }
      break;
      case MCC7500SDK::eINT64_T:
      {
        this->u_.V_INT64_ = u.u_.V_INT64_;
      }
      break;
      case MCC7500SDK::eFLOAT32_T:
      {
        this->u_.V_FLOAT32_ = u.u_.V_FLOAT32_;
      }
      break;
      case MCC7500SDK::eFLOAT64_T:
      {
        this->u_.V_FLOAT64_ = u.u_.V_FLOAT64_;
      }
      break;
      case MCC7500SDK::eBOOLEAN_T:
      {
        this->u_.V_BOOLEAN_ = u.u_.V_BOOLEAN_;
      }
      break;
      case MCC7500SDK::eSEQUENCE_T:
      {
        if (u.u_.V_SEQUENCE_ == 0)
          {
            this->u_.V_SEQUENCE_ = 0;
          }
        else
          {
            ACE_NEW_RETURN (
                this->u_.V_SEQUENCE_,
                MCC7500SDK::Parameters (*u.u_.V_SEQUENCE_),
                *this
              );
          }
      }
      break;
      case MCC7500SDK::eSTRING_T:
      {
        this->u_.V_STRING_ = ::CORBA::string_dup (u.u_.V_STRING_);
      }
      break;
      case MCC7500SDK::eWSTRING_T:
      {
        this->u_.V_WSTRING_ = ::CORBA::wstring_dup (u.u_.V_WSTRING_);
      }
      break;
      case MCC7500SDK::eEMPTY_T:
      {
        this->u_.V_EMPTY_ = u.u_.V_EMPTY_;
      }
      break;
      default:
      break;
    }
    
    return *this;
  }
  
  /// Reset method to reset old values of a union.
  void MCC7500SDK::UVariant::_reset (void)
  {
    switch (this->disc_)
    {
      
      case MCC7500SDK::eUINT8_T:
        break;
      case MCC7500SDK::eUINT16_T:
        break;
      case MCC7500SDK::eUINT32_T:
        break;
      case MCC7500SDK::eUINT64_T:
        break;
      case MCC7500SDK::eINT8_T:
        break;
      case MCC7500SDK::eINT16_T:
        break;
      case MCC7500SDK::eINT32_T:
        break;
      case MCC7500SDK::eINT64_T:
        break;
      case MCC7500SDK::eFLOAT32_T:
        break;
      case MCC7500SDK::eFLOAT64_T:
        break;
      case MCC7500SDK::eBOOLEAN_T:
        break;
      case MCC7500SDK::eSEQUENCE_T:
        delete this->u_.V_SEQUENCE_;
        this->u_.V_SEQUENCE_ = 0;
        break;
      case MCC7500SDK::eSTRING_T:
        ::CORBA::string_free (this->u_.V_STRING_);
        this->u_.V_STRING_ = 0;
        break;
      case MCC7500SDK::eWSTRING_T:
        ::CORBA::wstring_free (this->u_.V_WSTRING_);
        this->u_.V_WSTRING_ = 0;
        break;
      case MCC7500SDK::eEMPTY_T:
        break;
      default:
      break;
    }
  }
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/union_typecode.cpp:65
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:510
  
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__0 (MCC7500SDK::eUINT8_T, "V_UINT8", &CORBA::_tc_octet);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__1 (MCC7500SDK::eUINT16_T, "V_UINT16", &CORBA::_tc_ushort);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__2 (MCC7500SDK::eUINT32_T, "V_UINT32", &CORBA::_tc_ulong);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__3 (MCC7500SDK::eUINT64_T, "V_UINT64", &CORBA::_tc_ulonglong);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__4 (MCC7500SDK::eINT8_T, "V_INT8", &CORBA::_tc_char);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__5 (MCC7500SDK::eINT16_T, "V_INT16", &CORBA::_tc_short);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__6 (MCC7500SDK::eINT32_T, "V_INT32", &CORBA::_tc_long);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__7 (MCC7500SDK::eINT64_T, "V_INT64", &CORBA::_tc_longlong);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__8 (MCC7500SDK::eFLOAT32_T, "V_FLOAT32", &CORBA::_tc_float);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__9 (MCC7500SDK::eFLOAT64_T, "V_FLOAT64", &CORBA::_tc_double);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__10 (MCC7500SDK::eBOOLEAN_T, "V_BOOLEAN", &CORBA::_tc_boolean);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__11 (MCC7500SDK::eSEQUENCE_T, "V_SEQUENCE", &MCC7500SDK::_tc_Parameters);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__12 (MCC7500SDK::eSTRING_T, "V_STRING", &CORBA::_tc_string);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__13 (MCC7500SDK::eWSTRING_T, "V_WSTRING", &CORBA::_tc_wstring);
  static TAO::TypeCode::Case_T<MCC7500SDK::EVariantType, char const *, ::CORBA::TypeCode_ptr const *> const _tao_cases_MCC7500SDK_UVariant__14 (MCC7500SDK::eEMPTY_T, "V_EMPTY", &CORBA::_tc_octet);
  
  static TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const _tao_cases_MCC7500SDK_UVariant[] =
    {
      &_tao_cases_MCC7500SDK_UVariant__0,
      &_tao_cases_MCC7500SDK_UVariant__1,
      &_tao_cases_MCC7500SDK_UVariant__2,
      &_tao_cases_MCC7500SDK_UVariant__3,
      &_tao_cases_MCC7500SDK_UVariant__4,
      &_tao_cases_MCC7500SDK_UVariant__5,
      &_tao_cases_MCC7500SDK_UVariant__6,
      &_tao_cases_MCC7500SDK_UVariant__7,
      &_tao_cases_MCC7500SDK_UVariant__8,
      &_tao_cases_MCC7500SDK_UVariant__9,
      &_tao_cases_MCC7500SDK_UVariant__10,
      &_tao_cases_MCC7500SDK_UVariant__11,
      &_tao_cases_MCC7500SDK_UVariant__12,
      &_tao_cases_MCC7500SDK_UVariant__13,
      &_tao_cases_MCC7500SDK_UVariant__14
      
    };
  
  static TAO::TypeCode::Recursive_Type<
    TAO::TypeCode::Union<char const *,
                                ::CORBA::TypeCode_ptr const *,
                                TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const *,
                                TAO::Null_RefCount_Policy>,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Case<char const *, ::CORBA::TypeCode_ptr const *> const * const * >
  
    _tao_tc_MCC7500SDK_UVariant (
      "IDL:MCC7500SDK/UVariant:1.0",
      "UVariant",
      &MCC7500SDK::_tc_EVariantType,
      _tao_cases_MCC7500SDK_UVariant,
      15, -1);
    
  namespace MCC7500SDK
  {
    ::CORBA::TypeCode_ptr const _tc_UVariant =
      &_tao_tc_MCC7500SDK_UVariant;
  }
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84
  
  static TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const 
      _tao_fields_MCC7500SDK_Version[] =
        {
          { "Major", &MCC7500SDK::_tc_BYTE },
          { "Minor", &MCC7500SDK::_tc_BYTE }
        };
    
  static TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_Version (
    ::CORBA::tk_struct,
    "IDL:MCC7500SDK/Version:1.0",
    "Version",
    _tao_fields_MCC7500SDK_Version,
    2);
  
  namespace MCC7500SDK
  {
    ::CORBA::TypeCode_ptr const _tc_Version =
      &_tao_tc_MCC7500SDK_Version;
  }
  
  
  
  // TAO_IDL - Generated from 
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_structure/structure_cs.cpp:56
  
  void 
  MCC7500SDK::Version::_tao_any_destructor (
      void *_tao_void_pointer
    )
  {
    Version *_tao_tmp_pointer =
      static_cast<Version *> (_tao_void_pointer);
    delete _tao_tmp_pointer;
  }
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50
  
  static TAO::TypeCode::Alias<char const *,
                              ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
    _tao_tc_MCC7500SDK_METHOD_ID (
      ::CORBA::tk_alias,
      "IDL:MCC7500SDK/METHOD_ID:1.0",
      "METHOD_ID",
      &CORBA::_tc_short);
    
  namespace MCC7500SDK
  {
    ::CORBA::TypeCode_ptr const _tc_METHOD_ID =
      &_tao_tc_MCC7500SDK_METHOD_ID;
  }
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50
  
  static TAO::TypeCode::Alias<char const *,
                              ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
    _tao_tc_MCC7500SDK_RESPONSE_ID (
      ::CORBA::tk_alias,
      "IDL:MCC7500SDK/RESPONSE_ID:1.0",
      "RESPONSE_ID",
      &MCC7500SDK::_tc_WORD);
    
  namespace MCC7500SDK
  {
    ::CORBA::TypeCode_ptr const _tc_RESPONSE_ID =
      &_tao_tc_MCC7500SDK_RESPONSE_ID;
  }
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:51
  
  // Traits specializations for MCC7500SDK::IAPIResponse.
  
  MCC7500SDK::IAPIResponse_ptr
  TAO::Objref_Traits<MCC7500SDK::IAPIResponse>::duplicate (
      MCC7500SDK::IAPIResponse_ptr p)
  {
    return MCC7500SDK::IAPIResponse::_duplicate (p);
  }
  
  void
  TAO::Objref_Traits<MCC7500SDK::IAPIResponse>::release (
      MCC7500SDK::IAPIResponse_ptr p)
  {
    ::CORBA::release (p);
  }
  
  MCC7500SDK::IAPIResponse_ptr
  TAO::Objref_Traits<MCC7500SDK::IAPIResponse>::nil (void)
  {
    return MCC7500SDK::IAPIResponse::_nil ();
  }
  
  ::CORBA::Boolean
  TAO::Objref_Traits<MCC7500SDK::IAPIResponse>::marshal (
      const MCC7500SDK::IAPIResponse_ptr p,
      TAO_OutputCDR & cdr)
  {
    return ::CORBA::Object::marshal (p, cdr);
  }
  
  // Function pointer for collocation factory initialization.
  TAO::Collocation_Proxy_Broker * 
  (*MCC7500SDK__TAO_IAPIResponse_Proxy_Broker_Factory_function_pointer) (
      ::CORBA::Object_ptr obj) = 0;
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80
  
  void
  MCC7500SDK::IAPIResponse::CallBack (
    const ::MCC7500SDK::Parameters & Message)
  {
    if (!this->is_evaluated ())
      {
        ::CORBA::Object::tao_object_initialize (this);
      }
    
    if (this->the_TAO_IAPIResponse_Proxy_Broker_ == 0)
      {
        MCC7500SDK_IAPIResponse_setup_collocation ();
      }
    
    TAO::Arg_Traits< void>::ret_val _tao_retval;
    TAO::Arg_Traits< ::MCC7500SDK::Parameters>::in_arg_val _tao_Message (Message);
    
    TAO::Argument *_the_tao_operation_signature [] =
      {
        &_tao_retval,
        &_tao_Message
      };
    
    TAO::Invocation_Adapter _tao_call (
        this,
        _the_tao_operation_signature,
        2,
        "CallBack",
        8,
        this->the_TAO_IAPIResponse_Proxy_Broker_
      );
    
    _tao_call.invoke (0, 0);
  }
  
  MCC7500SDK::IAPIResponse::IAPIResponse (void)
   : the_TAO_IAPIResponse_Proxy_Broker_ (0)
  {
    this->MCC7500SDK_IAPIResponse_setup_collocation ();
  }

void
MCC7500SDK::IAPIResponse::MCC7500SDK_IAPIResponse_setup_collocation ()
{
  if (::MCC7500SDK__TAO_IAPIResponse_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IAPIResponse_Proxy_Broker_ =
        ::MCC7500SDK__TAO_IAPIResponse_Proxy_Broker_Factory_function_pointer (this);
    }
}

MCC7500SDK::IAPIResponse::~IAPIResponse (void)
{}

void 
MCC7500SDK::IAPIResponse::_tao_any_destructor (void *_tao_void_pointer)
{
  IAPIResponse *_tao_tmp_pointer =
    static_cast<IAPIResponse *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIResponse>::narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIResponse:1.0",
        MCC7500SDK__TAO_IAPIResponse_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIResponse>::unchecked_narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIResponse:1.0",
        MCC7500SDK__TAO_IAPIResponse_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_duplicate (IAPIResponse_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
MCC7500SDK::IAPIResponse::_tao_release (IAPIResponse_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MCC7500SDK::IAPIResponse::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IAPIResponse:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MCC7500SDK::IAPIResponse::_interface_repository_id (void) const
{
  return "IDL:MCC7500SDK/IAPIResponse:1.0";
}

::CORBA::Boolean
MCC7500SDK::IAPIResponse::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IAPIResponse (
    ::CORBA::tk_objref,
    "IDL:MCC7500SDK/IAPIResponse:1.0",
    "IAPIResponse");
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_IAPIResponse =
    &_tao_tc_MCC7500SDK_IAPIResponse;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:51

// Traits specializations for MCC7500SDK::IAPIRequestServer.

MCC7500SDK::IAPIRequestServer_ptr
TAO::Objref_Traits<MCC7500SDK::IAPIRequestServer>::duplicate (
    MCC7500SDK::IAPIRequestServer_ptr p)
{
  return MCC7500SDK::IAPIRequestServer::_duplicate (p);
}

void
TAO::Objref_Traits<MCC7500SDK::IAPIRequestServer>::release (
    MCC7500SDK::IAPIRequestServer_ptr p)
{
  ::CORBA::release (p);
}

MCC7500SDK::IAPIRequestServer_ptr
TAO::Objref_Traits<MCC7500SDK::IAPIRequestServer>::nil (void)
{
  return MCC7500SDK::IAPIRequestServer::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<MCC7500SDK::IAPIRequestServer>::marshal (
    const MCC7500SDK::IAPIRequestServer_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*MCC7500SDK__TAO_IAPIRequestServer_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::MCC7500SDK::Version
MCC7500SDK::IAPIRequestServer::ServerVersion (void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequestServer_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::MCC7500SDK::Version>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_ServerVersion",
      18,
      this->the_TAO_IAPIRequestServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::AnotherUserAlreadyRegistered (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequestServer/AnotherUserAlreadyRegistered:1.0",
        "AnotherUserAlreadyRegistered"
      )
{
}

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::~AnotherUserAlreadyRegistered (void)
{
}

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::AnotherUserAlreadyRegistered (const ::MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered&
MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::operator= (const ::MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_any_destructor (void *_tao_void_pointer)
{
  AnotherUserAlreadyRegistered *_tao_tmp_pointer =
    static_cast<AnotherUserAlreadyRegistered *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered *
MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<AnotherUserAlreadyRegistered *> (_tao_excp);
}

const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered *
MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const AnotherUserAlreadyRegistered *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_MCC7500SDK_IAPIRequestServer_AnotherUserAlreadyRegistered = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequestServer_AnotherUserAlreadyRegistered (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequestServer/AnotherUserAlreadyRegistered:1.0",
  "AnotherUserAlreadyRegistered",
  _tao_fields_MCC7500SDK_IAPIRequestServer_AnotherUserAlreadyRegistered,
  0);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered =
  &_tao_tc_MCC7500SDK_IAPIRequestServer_AnotherUserAlreadyRegistered;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::RegistrationInternalFail (
    ::CORBA::Long _tao_ErrorCode)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0",
        "RegistrationInternalFail"
      )
{
  this->ErrorCode = _tao_ErrorCode;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::RegistrationInternalFail (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0",
        "RegistrationInternalFail"
      )
{
}

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::~RegistrationInternalFail (void)
{
}

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::RegistrationInternalFail (const ::MCC7500SDK::IAPIRequestServer::RegistrationInternalFail &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->ErrorCode = _tao_excp.ErrorCode;
}

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail&
MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::operator= (const ::MCC7500SDK::IAPIRequestServer::RegistrationInternalFail &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->ErrorCode = _tao_excp.ErrorCode;
  return *this;
}

void MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_any_destructor (void *_tao_void_pointer)
{
  RegistrationInternalFail *_tao_tmp_pointer =
    static_cast<RegistrationInternalFail *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail *
MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<RegistrationInternalFail *> (_tao_excp);
}

const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail *
MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const RegistrationInternalFail *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequestServer::RegistrationInternalFail, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequestServer::RegistrationInternalFail (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_MCC7500SDK_IAPIRequestServer_RegistrationInternalFail[] =
      {
        { "ErrorCode", &CORBA::_tc_long }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequestServer_RegistrationInternalFail (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0",
  "RegistrationInternalFail",
  _tao_fields_MCC7500SDK_IAPIRequestServer_RegistrationInternalFail,
  1);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail =
  &_tao_tc_MCC7500SDK_IAPIRequestServer_RegistrationInternalFail;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::MCC7500SDK::BYTE
MCC7500SDK::IAPIRequestServer::RegisterApp (
  ::MCC7500SDK::IAPIResponse_ptr ClientCallback)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequestServer_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MCC7500SDK::IAPIResponse>::in_arg_val _tao_ClientCallback (ClientCallback);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ClientCallback
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequestServer_RegisterApp_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequestServer/AnotherUserAlreadyRegistered:1.0",
        MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0",
        MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "RegisterApp",
      11,
      this->the_TAO_IAPIRequestServer_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequestServer_RegisterApp_exceptiondata,
      2
    );
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::MCC7500SDK::BOOL
MCC7500SDK::IAPIRequestServer::DeregisterApp (
  ::MCC7500SDK::BYTE clientId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequestServer_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::in_arg_val _tao_clientId (clientId);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_clientId
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "DeregisterApp",
      13,
      this->the_TAO_IAPIRequestServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::MCC7500SDK::BOOL
MCC7500SDK::IAPIRequestServer::AuthenticateUser (
  const ::CORBA::WChar * UserName,
  const ::CORBA::WChar * Password,
  ::MCC7500SDK::BYTE ClientID,
  const ::CORBA::WChar * UserID)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequestServer_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::WChar *>::in_arg_val _tao_UserName (UserName);
  TAO::Arg_Traits< ::CORBA::WChar *>::in_arg_val _tao_Password (Password);
  TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::in_arg_val _tao_ClientID (ClientID);
  TAO::Arg_Traits< ::CORBA::WChar *>::in_arg_val _tao_UserID (UserID);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_UserName,
      &_tao_Password,
      &_tao_ClientID,
      &_tao_UserID
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "AuthenticateUser",
      16,
      this->the_TAO_IAPIRequestServer_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequestServer::UnsupportedVersion::UnsupportedVersion (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequestServer/UnsupportedVersion:1.0",
        "UnsupportedVersion"
      )
{
}

MCC7500SDK::IAPIRequestServer::UnsupportedVersion::~UnsupportedVersion (void)
{
}

MCC7500SDK::IAPIRequestServer::UnsupportedVersion::UnsupportedVersion (const ::MCC7500SDK::IAPIRequestServer::UnsupportedVersion &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

MCC7500SDK::IAPIRequestServer::UnsupportedVersion&
MCC7500SDK::IAPIRequestServer::UnsupportedVersion::operator= (const ::MCC7500SDK::IAPIRequestServer::UnsupportedVersion &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_any_destructor (void *_tao_void_pointer)
{
  UnsupportedVersion *_tao_tmp_pointer =
    static_cast<UnsupportedVersion *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequestServer::UnsupportedVersion *
MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnsupportedVersion *> (_tao_excp);
}

const MCC7500SDK::IAPIRequestServer::UnsupportedVersion *
MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnsupportedVersion *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequestServer::UnsupportedVersion, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequestServer::UnsupportedVersion (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_MCC7500SDK_IAPIRequestServer_UnsupportedVersion = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequestServer_UnsupportedVersion (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequestServer/UnsupportedVersion:1.0",
  "UnsupportedVersion",
  _tao_fields_MCC7500SDK_IAPIRequestServer_UnsupportedVersion,
  0);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion =
  &_tao_tc_MCC7500SDK_IAPIRequestServer_UnsupportedVersion;

// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequestServer::UnknownClientID::UnknownClientID (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequestServer/UnknownClientID:1.0",
        "UnknownClientID"
      )
{
}

MCC7500SDK::IAPIRequestServer::UnknownClientID::~UnknownClientID (void)
{
}

MCC7500SDK::IAPIRequestServer::UnknownClientID::UnknownClientID (const ::MCC7500SDK::IAPIRequestServer::UnknownClientID &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

MCC7500SDK::IAPIRequestServer::UnknownClientID&
MCC7500SDK::IAPIRequestServer::UnknownClientID::operator= (const ::MCC7500SDK::IAPIRequestServer::UnknownClientID &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_any_destructor (void *_tao_void_pointer)
{
  UnknownClientID *_tao_tmp_pointer =
    static_cast<UnknownClientID *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequestServer::UnknownClientID *
MCC7500SDK::IAPIRequestServer::UnknownClientID::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnknownClientID *> (_tao_excp);
}

const MCC7500SDK::IAPIRequestServer::UnknownClientID *
MCC7500SDK::IAPIRequestServer::UnknownClientID::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnknownClientID *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequestServer::UnknownClientID::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequestServer::UnknownClientID, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequestServer::UnknownClientID (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequestServer::UnknownClientID::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_MCC7500SDK_IAPIRequestServer_UnknownClientID = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequestServer_UnknownClientID (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequestServer/UnknownClientID:1.0",
  "UnknownClientID",
  _tao_fields_MCC7500SDK_IAPIRequestServer_UnknownClientID,
  0);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID =
  &_tao_tc_MCC7500SDK_IAPIRequestServer_UnknownClientID;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IAPIRequestServer::GetAPIRequest (
  ::MCC7500SDK::BYTE ClientID,
  const ::MCC7500SDK::Version & ClientRequestedVersion)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequestServer_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequestServer_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::MCC7500SDK::IBaseAPIRequest>::ret_val _tao_retval;
  TAO::Arg_Traits< ::ACE_InputCDR::to_octet>::in_arg_val _tao_ClientID (ClientID);
  TAO::Arg_Traits< ::MCC7500SDK::Version>::in_arg_val _tao_ClientRequestedVersion (ClientRequestedVersion);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ClientID,
      &_tao_ClientRequestedVersion
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequestServer_GetAPIRequest_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequestServer/UnsupportedVersion:1.0",
        MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequestServer/UnknownClientID:1.0",
        MCC7500SDK::IAPIRequestServer::UnknownClientID::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "GetAPIRequest",
      13,
      this->the_TAO_IAPIRequestServer_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequestServer_GetAPIRequest_exceptiondata,
      2
    );
  
  return _tao_retval.retn ();
}

MCC7500SDK::IAPIRequestServer::IAPIRequestServer (void)
 : the_TAO_IAPIRequestServer_Proxy_Broker_ (0)
{
  this->MCC7500SDK_IAPIRequestServer_setup_collocation ();
}

void
MCC7500SDK::IAPIRequestServer::MCC7500SDK_IAPIRequestServer_setup_collocation ()
{
  if (::MCC7500SDK__TAO_IAPIRequestServer_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IAPIRequestServer_Proxy_Broker_ =
        ::MCC7500SDK__TAO_IAPIRequestServer_Proxy_Broker_Factory_function_pointer (this);
    }
}

MCC7500SDK::IAPIRequestServer::~IAPIRequestServer (void)
{}

void 
MCC7500SDK::IAPIRequestServer::_tao_any_destructor (void *_tao_void_pointer)
{
  IAPIRequestServer *_tao_tmp_pointer =
    static_cast<IAPIRequestServer *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIRequestServer>::narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIRequestServer:1.0",
        MCC7500SDK__TAO_IAPIRequestServer_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIRequestServer>::unchecked_narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIRequestServer:1.0",
        MCC7500SDK__TAO_IAPIRequestServer_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_duplicate (IAPIRequestServer_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
MCC7500SDK::IAPIRequestServer::_tao_release (IAPIRequestServer_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MCC7500SDK::IAPIRequestServer::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IAPIRequestServer:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MCC7500SDK::IAPIRequestServer::_interface_repository_id (void) const
{
  return "IDL:MCC7500SDK/IAPIRequestServer:1.0";
}

::CORBA::Boolean
MCC7500SDK::IAPIRequestServer::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IAPIRequestServer (
    ::CORBA::tk_objref,
    "IDL:MCC7500SDK/IAPIRequestServer:1.0",
    "IAPIRequestServer");
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_IAPIRequestServer =
    &_tao_tc_MCC7500SDK_IAPIRequestServer;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:51

// Traits specializations for MCC7500SDK::IBaseAPIRequest.

MCC7500SDK::IBaseAPIRequest_ptr
TAO::Objref_Traits<MCC7500SDK::IBaseAPIRequest>::duplicate (
    MCC7500SDK::IBaseAPIRequest_ptr p)
{
  return MCC7500SDK::IBaseAPIRequest::_duplicate (p);
}

void
TAO::Objref_Traits<MCC7500SDK::IBaseAPIRequest>::release (
    MCC7500SDK::IBaseAPIRequest_ptr p)
{
  ::CORBA::release (p);
}

MCC7500SDK::IBaseAPIRequest_ptr
TAO::Objref_Traits<MCC7500SDK::IBaseAPIRequest>::nil (void)
{
  return MCC7500SDK::IBaseAPIRequest::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<MCC7500SDK::IBaseAPIRequest>::marshal (
    const MCC7500SDK::IBaseAPIRequest_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*MCC7500SDK__TAO_IBaseAPIRequest_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

::MCC7500SDK::Version
MCC7500SDK::IBaseAPIRequest::Ver (void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IBaseAPIRequest_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IBaseAPIRequest_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::MCC7500SDK::Version>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "_get_Ver",
      8,
      this->the_TAO_IBaseAPIRequest_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

MCC7500SDK::IBaseAPIRequest::IBaseAPIRequest (void)
 : the_TAO_IBaseAPIRequest_Proxy_Broker_ (0)
{
  this->MCC7500SDK_IBaseAPIRequest_setup_collocation ();
}

void
MCC7500SDK::IBaseAPIRequest::MCC7500SDK_IBaseAPIRequest_setup_collocation ()
{
  if (::MCC7500SDK__TAO_IBaseAPIRequest_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IBaseAPIRequest_Proxy_Broker_ =
        ::MCC7500SDK__TAO_IBaseAPIRequest_Proxy_Broker_Factory_function_pointer (this);
    }
}

MCC7500SDK::IBaseAPIRequest::~IBaseAPIRequest (void)
{}

void 
MCC7500SDK::IBaseAPIRequest::_tao_any_destructor (void *_tao_void_pointer)
{
  IBaseAPIRequest *_tao_tmp_pointer =
    static_cast<IBaseAPIRequest *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IBaseAPIRequest>::narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IBaseAPIRequest:1.0",
        MCC7500SDK__TAO_IBaseAPIRequest_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IBaseAPIRequest>::unchecked_narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IBaseAPIRequest:1.0",
        MCC7500SDK__TAO_IBaseAPIRequest_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_duplicate (IBaseAPIRequest_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
MCC7500SDK::IBaseAPIRequest::_tao_release (IBaseAPIRequest_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MCC7500SDK::IBaseAPIRequest::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IBaseAPIRequest:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MCC7500SDK::IBaseAPIRequest::_interface_repository_id (void) const
{
  return "IDL:MCC7500SDK/IBaseAPIRequest:1.0";
}

::CORBA::Boolean
MCC7500SDK::IBaseAPIRequest::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IBaseAPIRequest (
    ::CORBA::tk_objref,
    "IDL:MCC7500SDK/IBaseAPIRequest:1.0",
    "IBaseAPIRequest");
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_IBaseAPIRequest =
    &_tao_tc_MCC7500SDK_IBaseAPIRequest;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:51

// Traits specializations for MCC7500SDK::IAPIRequest.

MCC7500SDK::IAPIRequest_ptr
TAO::Objref_Traits<MCC7500SDK::IAPIRequest>::duplicate (
    MCC7500SDK::IAPIRequest_ptr p)
{
  return MCC7500SDK::IAPIRequest::_duplicate (p);
}

void
TAO::Objref_Traits<MCC7500SDK::IAPIRequest>::release (
    MCC7500SDK::IAPIRequest_ptr p)
{
  ::CORBA::release (p);
}

MCC7500SDK::IAPIRequest_ptr
TAO::Objref_Traits<MCC7500SDK::IAPIRequest>::nil (void)
{
  return MCC7500SDK::IAPIRequest::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<MCC7500SDK::IAPIRequest>::marshal (
    const MCC7500SDK::IAPIRequest_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*MCC7500SDK__TAO_IAPIRequest_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj) = 0;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

MCC7500SDK::IAPIRequest::UnknownApiRequest::UnknownApiRequest (
    ::MCC7500SDK::METHOD_ID _tao_methodId)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0",
        "UnknownApiRequest"
      )
{
  this->methodId = _tao_methodId;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequest::UnknownApiRequest::UnknownApiRequest (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0",
        "UnknownApiRequest"
      )
{
}

MCC7500SDK::IAPIRequest::UnknownApiRequest::~UnknownApiRequest (void)
{
}

MCC7500SDK::IAPIRequest::UnknownApiRequest::UnknownApiRequest (const ::MCC7500SDK::IAPIRequest::UnknownApiRequest &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->methodId = _tao_excp.methodId;
}

MCC7500SDK::IAPIRequest::UnknownApiRequest&
MCC7500SDK::IAPIRequest::UnknownApiRequest::operator= (const ::MCC7500SDK::IAPIRequest::UnknownApiRequest &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->methodId = _tao_excp.methodId;
  return *this;
}

void MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_any_destructor (void *_tao_void_pointer)
{
  UnknownApiRequest *_tao_tmp_pointer =
    static_cast<UnknownApiRequest *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequest::UnknownApiRequest *
MCC7500SDK::IAPIRequest::UnknownApiRequest::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<UnknownApiRequest *> (_tao_excp);
}

const MCC7500SDK::IAPIRequest::UnknownApiRequest *
MCC7500SDK::IAPIRequest::UnknownApiRequest::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const UnknownApiRequest *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequest::UnknownApiRequest::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest::UnknownApiRequest, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequest::UnknownApiRequest (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequest::UnknownApiRequest::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_MCC7500SDK_IAPIRequest_UnknownApiRequest[] =
      {
        { "methodId", &MCC7500SDK::_tc_METHOD_ID }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequest_UnknownApiRequest (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0",
  "UnknownApiRequest",
  _tao_fields_MCC7500SDK_IAPIRequest_UnknownApiRequest,
  1);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest =
  &_tao_tc_MCC7500SDK_IAPIRequest_UnknownApiRequest;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::ParameterTypeMismatch (
    ::CORBA::Octet _tao_parameter_num,
    MCC7500SDK::EVariantType _tao_actual,
    MCC7500SDK::EVariantType _tao_expected,
    ::MCC7500SDK::METHOD_ID _tao_methodId)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0",
        "ParameterTypeMismatch"
      )
{
  this->parameter_num = _tao_parameter_num;
  this->actual = _tao_actual;
  this->expected = _tao_expected;
  this->methodId = _tao_methodId;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::ParameterTypeMismatch (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0",
        "ParameterTypeMismatch"
      )
{
}

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::~ParameterTypeMismatch (void)
{
}

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::ParameterTypeMismatch (const ::MCC7500SDK::IAPIRequest::ParameterTypeMismatch &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->parameter_num = _tao_excp.parameter_num;
  this->actual = _tao_excp.actual;
  this->expected = _tao_excp.expected;
  this->methodId = _tao_excp.methodId;
}

MCC7500SDK::IAPIRequest::ParameterTypeMismatch&
MCC7500SDK::IAPIRequest::ParameterTypeMismatch::operator= (const ::MCC7500SDK::IAPIRequest::ParameterTypeMismatch &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->parameter_num = _tao_excp.parameter_num;
  this->actual = _tao_excp.actual;
  this->expected = _tao_excp.expected;
  this->methodId = _tao_excp.methodId;
  return *this;
}

void MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_any_destructor (void *_tao_void_pointer)
{
  ParameterTypeMismatch *_tao_tmp_pointer =
    static_cast<ParameterTypeMismatch *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequest::ParameterTypeMismatch *
MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ParameterTypeMismatch *> (_tao_excp);
}

const MCC7500SDK::IAPIRequest::ParameterTypeMismatch *
MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ParameterTypeMismatch *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest::ParameterTypeMismatch, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequest::ParameterTypeMismatch (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_MCC7500SDK_IAPIRequest_ParameterTypeMismatch[] =
      {
        { "parameter_num", &CORBA::_tc_octet },
        { "actual", &MCC7500SDK::_tc_EVariantType },
        { "expected", &MCC7500SDK::_tc_EVariantType },
        { "methodId", &MCC7500SDK::_tc_METHOD_ID }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequest_ParameterTypeMismatch (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0",
  "ParameterTypeMismatch",
  _tao_fields_MCC7500SDK_IAPIRequest_ParameterTypeMismatch,
  4);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch =
  &_tao_tc_MCC7500SDK_IAPIRequest_ParameterTypeMismatch;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

MCC7500SDK::IAPIRequest::ParameterCountMismatch::ParameterCountMismatch (
    ::CORBA::Octet _tao_actual,
    ::CORBA::Octet _tao_expected,
    ::MCC7500SDK::METHOD_ID _tao_methodId)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0",
        "ParameterCountMismatch"
      )
{
  this->actual = _tao_actual;
  this->expected = _tao_expected;
  this->methodId = _tao_methodId;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequest::ParameterCountMismatch::ParameterCountMismatch (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0",
        "ParameterCountMismatch"
      )
{
}

MCC7500SDK::IAPIRequest::ParameterCountMismatch::~ParameterCountMismatch (void)
{
}

MCC7500SDK::IAPIRequest::ParameterCountMismatch::ParameterCountMismatch (const ::MCC7500SDK::IAPIRequest::ParameterCountMismatch &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->actual = _tao_excp.actual;
  this->expected = _tao_excp.expected;
  this->methodId = _tao_excp.methodId;
}

MCC7500SDK::IAPIRequest::ParameterCountMismatch&
MCC7500SDK::IAPIRequest::ParameterCountMismatch::operator= (const ::MCC7500SDK::IAPIRequest::ParameterCountMismatch &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->actual = _tao_excp.actual;
  this->expected = _tao_excp.expected;
  this->methodId = _tao_excp.methodId;
  return *this;
}

void MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_any_destructor (void *_tao_void_pointer)
{
  ParameterCountMismatch *_tao_tmp_pointer =
    static_cast<ParameterCountMismatch *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequest::ParameterCountMismatch *
MCC7500SDK::IAPIRequest::ParameterCountMismatch::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ParameterCountMismatch *> (_tao_excp);
}

const MCC7500SDK::IAPIRequest::ParameterCountMismatch *
MCC7500SDK::IAPIRequest::ParameterCountMismatch::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ParameterCountMismatch *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequest::ParameterCountMismatch::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest::ParameterCountMismatch, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequest::ParameterCountMismatch (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequest::ParameterCountMismatch::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_MCC7500SDK_IAPIRequest_ParameterCountMismatch[] =
      {
        { "actual", &CORBA::_tc_octet },
        { "expected", &CORBA::_tc_octet },
        { "methodId", &MCC7500SDK::_tc_METHOD_ID }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequest_ParameterCountMismatch (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0",
  "ParameterCountMismatch",
  _tao_fields_MCC7500SDK_IAPIRequest_ParameterCountMismatch,
  3);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch =
  &_tao_tc_MCC7500SDK_IAPIRequest_ParameterCountMismatch;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::ApiRequestInternalFail (
    ::CORBA::Long _tao_ErrorCode,
    ::MCC7500SDK::METHOD_ID _tao_methodId)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0",
        "ApiRequestInternalFail"
      )
{
  this->ErrorCode = _tao_ErrorCode;
  this->methodId = _tao_methodId;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::ApiRequestInternalFail (void)
  : ::CORBA::UserException (
        "IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0",
        "ApiRequestInternalFail"
      )
{
}

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::~ApiRequestInternalFail (void)
{
}

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::ApiRequestInternalFail (const ::MCC7500SDK::IAPIRequest::ApiRequestInternalFail &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
  this->ErrorCode = _tao_excp.ErrorCode;
  this->methodId = _tao_excp.methodId;
}

MCC7500SDK::IAPIRequest::ApiRequestInternalFail&
MCC7500SDK::IAPIRequest::ApiRequestInternalFail::operator= (const ::MCC7500SDK::IAPIRequest::ApiRequestInternalFail &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  this->ErrorCode = _tao_excp.ErrorCode;
  this->methodId = _tao_excp.methodId;
  return *this;
}

void MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_any_destructor (void *_tao_void_pointer)
{
  ApiRequestInternalFail *_tao_tmp_pointer =
    static_cast<ApiRequestInternalFail *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequest::ApiRequestInternalFail *
MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ApiRequestInternalFail *> (_tao_excp);
}

const MCC7500SDK::IAPIRequest::ApiRequestInternalFail *
MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ApiRequestInternalFail *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest::ApiRequestInternalFail, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequest::ApiRequestInternalFail (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_MCC7500SDK_IAPIRequest_ApiRequestInternalFail[] =
      {
        { "ErrorCode", &CORBA::_tc_long },
        { "methodId", &MCC7500SDK::_tc_METHOD_ID }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequest_ApiRequestInternalFail (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0",
  "ApiRequestInternalFail",
  _tao_fields_MCC7500SDK_IAPIRequest_ApiRequestInternalFail,
  2);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail =
  &_tao_tc_MCC7500SDK_IAPIRequest_ApiRequestInternalFail;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
MCC7500SDK::IAPIRequest::ApiRequest (
  ::MCC7500SDK::METHOD_ID methodId,
  const ::MCC7500SDK::Parameters & paramListIn,
  ::MCC7500SDK::Parameters_out paramListOut,
  ::MCC7500SDK::UVariant_out returnValue)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequest_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequest_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MCC7500SDK::METHOD_ID>::in_arg_val _tao_methodId (methodId);
  TAO::Arg_Traits< ::MCC7500SDK::Parameters>::in_arg_val _tao_paramListIn (paramListIn);
  TAO::Arg_Traits< ::MCC7500SDK::Parameters>::out_arg_val _tao_paramListOut (paramListOut);
  TAO::Arg_Traits< ::MCC7500SDK::UVariant>::out_arg_val _tao_returnValue (returnValue);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_methodId,
      &_tao_paramListIn,
      &_tao_paramListOut,
      &_tao_returnValue
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequest_ApiRequest_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0",
        MCC7500SDK::IAPIRequest::UnknownApiRequest::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0",
        MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0",
        MCC7500SDK::IAPIRequest::ParameterCountMismatch::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0",
        MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "ApiRequest",
      10,
      this->the_TAO_IAPIRequest_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequest_ApiRequest_exceptiondata,
      4
    );
}

MCC7500SDK::IAPIRequest::IAPIRequest (void)
 : the_TAO_IAPIRequest_Proxy_Broker_ (0)
{
  this->MCC7500SDK_IAPIRequest_setup_collocation ();
}

void
MCC7500SDK::IAPIRequest::MCC7500SDK_IAPIRequest_setup_collocation ()
{
  if (::MCC7500SDK__TAO_IAPIRequest_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IAPIRequest_Proxy_Broker_ =
        ::MCC7500SDK__TAO_IAPIRequest_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->MCC7500SDK_IBaseAPIRequest_setup_collocation ();
}

MCC7500SDK::IAPIRequest::~IAPIRequest (void)
{}

void 
MCC7500SDK::IAPIRequest::_tao_any_destructor (void *_tao_void_pointer)
{
  IAPIRequest *_tao_tmp_pointer =
    static_cast<IAPIRequest *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIRequest>::narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIRequest:1.0",
        MCC7500SDK__TAO_IAPIRequest_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIRequest>::unchecked_narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIRequest:1.0",
        MCC7500SDK__TAO_IAPIRequest_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_duplicate (IAPIRequest_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
MCC7500SDK::IAPIRequest::_tao_release (IAPIRequest_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MCC7500SDK::IAPIRequest::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IBaseAPIRequest:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IAPIRequest:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MCC7500SDK::IAPIRequest::_interface_repository_id (void) const
{
  return "IDL:MCC7500SDK/IAPIRequest:1.0";
}

::CORBA::Boolean
MCC7500SDK::IAPIRequest::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IAPIRequest (
    ::CORBA::tk_objref,
    "IDL:MCC7500SDK/IAPIRequest:1.0",
    "IAPIRequest");
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_IAPIRequest =
    &_tao_tc_MCC7500SDK_IAPIRequest;
}



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/sequence_cs.cpp:56

#if !defined (_MCC7500SDK_RESPONSEIDS_CS_)
#define _MCC7500SDK_RESPONSEIDS_CS_

MCC7500SDK::ResponseIDs::ResponseIDs (void)
{}

MCC7500SDK::ResponseIDs::ResponseIDs (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        RESPONSE_ID
      > (max)
{}

MCC7500SDK::ResponseIDs::ResponseIDs (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    ::CORBA::UShort * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        RESPONSE_ID
      >
    (max, length, buffer, release)
{}

MCC7500SDK::ResponseIDs::ResponseIDs (
      const ResponseIDs &seq)
    : ::TAO::unbounded_value_sequence<
          RESPONSE_ID
        > (seq)
  {}
  
  MCC7500SDK::ResponseIDs::~ResponseIDs (void)
  {}
  
  void MCC7500SDK::ResponseIDs::_tao_any_destructor (
      void * _tao_void_pointer)
  {
    ResponseIDs * _tao_tmp_pointer =
      static_cast<ResponseIDs *> (_tao_void_pointer);
    delete _tao_tmp_pointer;
  }

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/alias_typecode.cpp:50
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/typecode_defn.cpp:510
  
  
#ifndef _TAO_TYPECODE_MCC7500SDK_ResponseIDs_GUARD
#define _TAO_TYPECODE_MCC7500SDK_ResponseIDs_GUARD
  
TAO_BEGIN_VERSIONED_NAMESPACE_DECL

  namespace TAO
  {
    namespace TypeCode
    {
      namespace
      {
        TAO::TypeCode::Sequence< ::CORBA::TypeCode_ptr const *,
                                TAO::Null_RefCount_Policy>
          MCC7500SDK_ResponseIDs_0 (
            ::CORBA::tk_sequence,
            &MCC7500SDK::_tc_RESPONSE_ID,
            0U);
          
        ::CORBA::TypeCode_ptr const tc_MCC7500SDK_ResponseIDs_0 =
          &MCC7500SDK_ResponseIDs_0;
      }
    }
  }
  
TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_TYPECODE_MCC7500SDK_ResponseIDs_GUARD */
  
  static TAO::TypeCode::Alias<char const *,
                              ::CORBA::TypeCode_ptr const *,
                              TAO::Null_RefCount_Policy>
    _tao_tc_MCC7500SDK_ResponseIDs (
      ::CORBA::tk_alias,
      "IDL:MCC7500SDK/ResponseIDs:1.0",
      "ResponseIDs",
      &TAO::TypeCode::tc_MCC7500SDK_ResponseIDs_0);
    
  namespace MCC7500SDK
  {
    ::CORBA::TypeCode_ptr const _tc_ResponseIDs =
      &_tao_tc_MCC7500SDK_ResponseIDs;
  }
  
  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/interface_cs.cpp:51
  
  // Traits specializations for MCC7500SDK::IAPIRequest2.
  
  MCC7500SDK::IAPIRequest2_ptr
  TAO::Objref_Traits<MCC7500SDK::IAPIRequest2>::duplicate (
      MCC7500SDK::IAPIRequest2_ptr p)
  {
    return MCC7500SDK::IAPIRequest2::_duplicate (p);
  }
  
  void
  TAO::Objref_Traits<MCC7500SDK::IAPIRequest2>::release (
      MCC7500SDK::IAPIRequest2_ptr p)
  {
    ::CORBA::release (p);
  }
  
  MCC7500SDK::IAPIRequest2_ptr
  TAO::Objref_Traits<MCC7500SDK::IAPIRequest2>::nil (void)
  {
    return MCC7500SDK::IAPIRequest2::_nil ();
  }
  
  ::CORBA::Boolean
  TAO::Objref_Traits<MCC7500SDK::IAPIRequest2>::marshal (
      const MCC7500SDK::IAPIRequest2_ptr p,
      TAO_OutputCDR & cdr)
  {
    return ::CORBA::Object::marshal (p, cdr);
  }
  
  // Function pointer for collocation factory initialization.
  TAO::Collocation_Proxy_Broker * 
  (*MCC7500SDK__TAO_IAPIRequest2_Proxy_Broker_Factory_function_pointer) (
      ::CORBA::Object_ptr obj) = 0;  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56
  
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::InvalidResponseIdException (
      ::MCC7500SDK::RESPONSE_ID _tao_responseID)
    : ::CORBA::UserException (
          "IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0",
          "InvalidResponseIdException"
        )
  {
    this->responseID = _tao_responseID;
  }
  
  
  
  // TAO_IDL - Generated from 
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101
  
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::InvalidResponseIdException (void)
    : ::CORBA::UserException (
          "IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0",
          "InvalidResponseIdException"
        )
  {
  }
  
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::~InvalidResponseIdException (void)
  {
  }
  
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::InvalidResponseIdException (const ::MCC7500SDK::IAPIRequest2::InvalidResponseIdException &_tao_excp)
    : ::CORBA::UserException (
          _tao_excp._rep_id (),
          _tao_excp._name ()
        )
  {
    this->responseID = _tao_excp.responseID;
  }
  
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException&
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::operator= (const ::MCC7500SDK::IAPIRequest2::InvalidResponseIdException &_tao_excp)
  {
    this->::CORBA::UserException::operator= (_tao_excp);
    this->responseID = _tao_excp.responseID;
    return *this;
  }
  
  void MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_any_destructor (void *_tao_void_pointer)
  {
    InvalidResponseIdException *_tao_tmp_pointer =
      static_cast<InvalidResponseIdException *> (_tao_void_pointer);
    delete _tao_tmp_pointer;
  }
  
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException *
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_downcast ( ::CORBA::Exception *_tao_excp)
  {
    return dynamic_cast<InvalidResponseIdException *> (_tao_excp);
  }
  
  const MCC7500SDK::IAPIRequest2::InvalidResponseIdException *
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_downcast ( ::CORBA::Exception const *_tao_excp)
  {
    return dynamic_cast<const InvalidResponseIdException *> (_tao_excp);
  }
  
  ::CORBA::Exception *MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_alloc (void)
  {
    ::CORBA::Exception *retval = 0;
    ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest2::InvalidResponseIdException, 0);
    return retval;
  }
  
  ::CORBA::Exception *
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_duplicate (void) const
  {
    ::CORBA::Exception *result = 0;
    ACE_NEW_RETURN (
        result,
        ::MCC7500SDK::IAPIRequest2::InvalidResponseIdException (*this),
        0
      );
    return result;
  }
  
  void MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_raise (void) const
  {
    throw *this;
  }
  
  void MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_encode (TAO_OutputCDR &cdr) const
  {
    if (!(cdr << *this))
      {
        throw ::CORBA::MARSHAL ();
      }
  }
  
  void MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_decode (TAO_InputCDR &cdr)
  {
    if (!(cdr >> *this))
      {
        throw ::CORBA::MARSHAL ();
      }
  }
  
  // TAO extension - the virtual _type method.
  ::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_type (void) const
  {
    return ::MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException;
  }
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84
  
  static TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const 
      _tao_fields_MCC7500SDK_IAPIRequest2_InvalidResponseIdException[] =
        {
          { "responseID", &MCC7500SDK::_tc_RESPONSE_ID }
        };
    
  static TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IAPIRequest2_InvalidResponseIdException (
    ::CORBA::tk_except,
    "IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0",
    "InvalidResponseIdException",
    _tao_fields_MCC7500SDK_IAPIRequest2_InvalidResponseIdException,
    1);
  
  ::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException =
    &_tao_tc_MCC7500SDK_IAPIRequest2_InvalidResponseIdException;  
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_ctor.cpp:56
  
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::FilterInternalFailureException (
      ::CORBA::Long _tao_errorCode,
      ::MCC7500SDK::RESPONSE_ID _tao_responseID)
    : ::CORBA::UserException (
          "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
          "FilterInternalFailureException"
        )
  {
    this->errorCode = _tao_errorCode;
    this->responseID = _tao_responseID;
  }
  
  
  
  // TAO_IDL - Generated from 
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101
  
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::FilterInternalFailureException (void)
    : ::CORBA::UserException (
          "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
          "FilterInternalFailureException"
        )
  {
  }
  
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::~FilterInternalFailureException (void)
  {
  }
  
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::FilterInternalFailureException (const ::MCC7500SDK::IAPIRequest2::FilterInternalFailureException &_tao_excp)
    : ::CORBA::UserException (
          _tao_excp._rep_id (),
          _tao_excp._name ()
        )
  {
    this->errorCode = _tao_excp.errorCode;
    this->responseID = _tao_excp.responseID;
  }
  
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException&
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::operator= (const ::MCC7500SDK::IAPIRequest2::FilterInternalFailureException &_tao_excp)
  {
    this->::CORBA::UserException::operator= (_tao_excp);
    this->errorCode = _tao_excp.errorCode;
    this->responseID = _tao_excp.responseID;
    return *this;
  }
  
  void MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_any_destructor (void *_tao_void_pointer)
  {
    FilterInternalFailureException *_tao_tmp_pointer =
      static_cast<FilterInternalFailureException *> (_tao_void_pointer);
    delete _tao_tmp_pointer;
  }
  
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException *
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_downcast ( ::CORBA::Exception *_tao_excp)
  {
    return dynamic_cast<FilterInternalFailureException *> (_tao_excp);
  }
  
  const MCC7500SDK::IAPIRequest2::FilterInternalFailureException *
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_downcast ( ::CORBA::Exception const *_tao_excp)
  {
    return dynamic_cast<const FilterInternalFailureException *> (_tao_excp);
  }
  
  ::CORBA::Exception *MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_alloc (void)
  {
    ::CORBA::Exception *retval = 0;
    ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest2::FilterInternalFailureException, 0);
    return retval;
  }
  
  ::CORBA::Exception *
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_duplicate (void) const
  {
    ::CORBA::Exception *result = 0;
    ACE_NEW_RETURN (
        result,
        ::MCC7500SDK::IAPIRequest2::FilterInternalFailureException (*this),
        0
      );
    return result;
  }
  
  void MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_raise (void) const
  {
    throw *this;
  }
  
  void MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_encode (TAO_OutputCDR &cdr) const
  {
    if (!(cdr << *this))
      {
        throw ::CORBA::MARSHAL ();
      }
  }
  
  void MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_decode (TAO_InputCDR &cdr)
  {
    if (!(cdr >> *this))
      {
        throw ::CORBA::MARSHAL ();
      }
  }
  
  // TAO extension - the virtual _type method.
  ::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_type (void) const
  {
    return ::MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException;
  }
  
  // TAO_IDL - Generated from
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84
  
  static TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const 
      _tao_fields_MCC7500SDK_IAPIRequest2_FilterInternalFailureException[] =
        {
          { "errorCode", &CORBA::_tc_long },
          { "responseID", &MCC7500SDK::_tc_RESPONSE_ID }
        };
    
  static TAO::TypeCode::Struct<
    char const *,
    ::CORBA::TypeCode_ptr const *,
    TAO::TypeCode::Struct_Field<
      char const *,
      ::CORBA::TypeCode_ptr const *> const *,
    TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IAPIRequest2_FilterInternalFailureException (
    ::CORBA::tk_except,
    "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
    "FilterInternalFailureException",
    _tao_fields_MCC7500SDK_IAPIRequest2_FilterInternalFailureException,
    2);
  
  ::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException =
    &_tao_tc_MCC7500SDK_IAPIRequest2_FilterInternalFailureException;  
  
  // TAO_IDL - Generated from 
  // e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/exception_cs.cpp:101
  
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::ClientNotRegisteredException (void)
    : ::CORBA::UserException (
          "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0",
          "ClientNotRegisteredException"
        )
  {
  }
  
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::~ClientNotRegisteredException (void)
  {
  }
  
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::ClientNotRegisteredException (const ::MCC7500SDK::IAPIRequest2::ClientNotRegisteredException &_tao_excp)
    : ::CORBA::UserException (
          _tao_excp._rep_id (),
          _tao_excp._name ()
        )
  {
}

MCC7500SDK::IAPIRequest2::ClientNotRegisteredException&
MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::operator= (const ::MCC7500SDK::IAPIRequest2::ClientNotRegisteredException &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

void MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_any_destructor (void *_tao_void_pointer)
{
  ClientNotRegisteredException *_tao_tmp_pointer =
    static_cast<ClientNotRegisteredException *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

MCC7500SDK::IAPIRequest2::ClientNotRegisteredException *
MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<ClientNotRegisteredException *> (_tao_excp);
}

const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException *
MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const ClientNotRegisteredException *> (_tao_excp);
}

::CORBA::Exception *MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::MCC7500SDK::IAPIRequest2::ClientNotRegisteredException, 0);
  return retval;
}

::CORBA::Exception *
MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::MCC7500SDK::IAPIRequest2::ClientNotRegisteredException (*this),
      0
    );
  return result;
}

void MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_raise (void) const
{
  throw *this;
}

void MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

// TAO extension - the virtual _type method.
::CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_type (void) const
{
  return ::MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException;
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const * const 
    _tao_fields_MCC7500SDK_IAPIRequest2_ClientNotRegisteredException = 0;
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_MCC7500SDK_IAPIRequest2_ClientNotRegisteredException (
  ::CORBA::tk_except,
  "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0",
  "ClientNotRegisteredException",
  _tao_fields_MCC7500SDK_IAPIRequest2_ClientNotRegisteredException,
  0);

::CORBA::TypeCode_ptr const MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException =
  &_tao_tc_MCC7500SDK_IAPIRequest2_ClientNotRegisteredException;

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
MCC7500SDK::IAPIRequest2::FilterAPIResponse (
  const ::MCC7500SDK::ResponseIDs & msgResponseIDs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequest2_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequest2_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MCC7500SDK::ResponseIDs>::in_arg_val _tao_msgResponseIDs (msgResponseIDs);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_msgResponseIDs
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequest2_FilterAPIResponse_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0",
        MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
        MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0",
        MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "FilterAPIResponse",
      17,
      this->the_TAO_IAPIRequest2_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequest2_FilterAPIResponse_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
MCC7500SDK::IAPIRequest2::UnfilterAPIResponse (
  const ::MCC7500SDK::ResponseIDs & msgResponseIDs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequest2_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequest2_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MCC7500SDK::ResponseIDs>::in_arg_val _tao_msgResponseIDs (msgResponseIDs);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_msgResponseIDs
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequest2_UnfilterAPIResponse_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0",
        MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
        MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0",
        MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "UnfilterAPIResponse",
      19,
      this->the_TAO_IAPIRequest2_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequest2_UnfilterAPIResponse_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
MCC7500SDK::IAPIRequest2::UnfilterAllAPIResponses (void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequest2_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequest2_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequest2_UnfilterAllAPIResponses_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
        MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0",
        MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "UnfilterAllAPIResponses",
      23,
      this->the_TAO_IAPIRequest2_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequest2_UnfilterAllAPIResponses_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_operation/operation_cs.cpp:80

void
MCC7500SDK::IAPIRequest2::GetFilteredAPIResponses (
  ::MCC7500SDK::ResponseIDs_out msgResponseIDs)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_IAPIRequest2_Proxy_Broker_ == 0)
    {
      MCC7500SDK_IAPIRequest2_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::MCC7500SDK::ResponseIDs>::out_arg_val _tao_msgResponseIDs (msgResponseIDs);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_msgResponseIDs
    };
  
  static TAO::Exception_Data
  _tao_MCC7500SDK_IAPIRequest2_GetFilteredAPIResponses_exceptiondata [] = 
    {
      {
        "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0",
        MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException
#endif /* TAO_HAS_INTERCEPTORS */
      },
      
      {
        "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0",
        MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "GetFilteredAPIResponses",
      23,
      this->the_TAO_IAPIRequest2_Proxy_Broker_
    );
  
  _tao_call.invoke (
      _tao_MCC7500SDK_IAPIRequest2_GetFilteredAPIResponses_exceptiondata,
      2
    );
}

MCC7500SDK::IAPIRequest2::IAPIRequest2 (void)
 : the_TAO_IAPIRequest2_Proxy_Broker_ (0)
{
  this->MCC7500SDK_IAPIRequest2_setup_collocation ();
}

void
MCC7500SDK::IAPIRequest2::MCC7500SDK_IAPIRequest2_setup_collocation ()
{
  if (::MCC7500SDK__TAO_IAPIRequest2_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_IAPIRequest2_Proxy_Broker_ =
        ::MCC7500SDK__TAO_IAPIRequest2_Proxy_Broker_Factory_function_pointer (this);
    }
  
  this->MCC7500SDK_IAPIRequest_setup_collocation ();
}

MCC7500SDK::IAPIRequest2::~IAPIRequest2 (void)
{}

void 
MCC7500SDK::IAPIRequest2::_tao_any_destructor (void *_tao_void_pointer)
{
  IAPIRequest2 *_tao_tmp_pointer =
    static_cast<IAPIRequest2 *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIRequest2>::narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIRequest2:1.0",
        MCC7500SDK__TAO_IAPIRequest2_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<IAPIRequest2>::unchecked_narrow (
        _tao_objref,
        "IDL:MCC7500SDK/IAPIRequest2:1.0",
        MCC7500SDK__TAO_IAPIRequest2_Proxy_Broker_Factory_function_pointer
      );
}

MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_duplicate (IAPIRequest2_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
MCC7500SDK::IAPIRequest2::_tao_release (IAPIRequest2_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
MCC7500SDK::IAPIRequest2::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IBaseAPIRequest:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IAPIRequest:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:MCC7500SDK/IAPIRequest2:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* MCC7500SDK::IAPIRequest2::_interface_repository_id (void) const
{
  return "IDL:MCC7500SDK/IAPIRequest2:1.0";
}

::CORBA::Boolean
MCC7500SDK::IAPIRequest2::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_MCC7500SDK_IAPIRequest2 (
    ::CORBA::tk_objref,
    "IDL:MCC7500SDK/IAPIRequest2:1.0",
    "IAPIRequest2");
  
namespace MCC7500SDK
{
  ::CORBA::TypeCode_ptr const _tc_IAPIRequest2 =
    &_tao_tc_MCC7500SDK_IAPIRequest2;
}



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_enum/any_op_cs.cpp:43

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::EVariantType _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<MCC7500SDK::EVariantType>::insert (
      _tao_any,
      MCC7500SDK::_tc_EVariantType,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::EVariantType &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<MCC7500SDK::EVariantType>::extract (
        _tao_any,
        MCC7500SDK::_tc_EVariantType,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::Parameters &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<MCC7500SDK::Parameters *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<MCC7500SDK::Parameters>::insert_copy (
        _tao_any,
        MCC7500SDK::Parameters::_tao_any_destructor,
        MCC7500SDK::_tc_Parameters,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::Parameters *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::Parameters>::insert (
      _tao_any,
      MCC7500SDK::Parameters::_tao_any_destructor,
      MCC7500SDK::_tc_Parameters,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::Parameters *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::Parameters *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::Parameters *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::Parameters>::extract (
        _tao_any,
        MCC7500SDK::Parameters::_tao_any_destructor,
        MCC7500SDK::_tc_Parameters,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_union/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::UVariant &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<MCC7500SDK::UVariant *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<MCC7500SDK::UVariant>::insert_copy (
        _tao_any,
        MCC7500SDK::UVariant::_tao_any_destructor,
        MCC7500SDK::_tc_UVariant,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::UVariant *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::UVariant>::insert (
      _tao_any,
      MCC7500SDK::UVariant::_tao_any_destructor,
      MCC7500SDK::_tc_UVariant,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::UVariant *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::UVariant *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::UVariant *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::UVariant>::extract (
        _tao_any,
        MCC7500SDK::UVariant::_tao_any_destructor,
        MCC7500SDK::_tc_UVariant,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_structure/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::Version &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<MCC7500SDK::Version *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<MCC7500SDK::Version>::insert_copy (
        _tao_any,
        MCC7500SDK::Version::_tao_any_destructor,
        MCC7500SDK::_tc_Version,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::Version *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::Version>::insert (
      _tao_any,
      MCC7500SDK::Version::_tao_any_destructor,
      MCC7500SDK::_tc_Version,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::Version *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::Version *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::Version *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::Version>::extract (
        _tao_any,
        MCC7500SDK::Version::_tao_any_destructor,
        MCC7500SDK::_tc_Version,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MCC7500SDK::IAPIResponse>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MCC7500SDK
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIResponse_ptr _tao_elem)
  {
    IAPIResponse_ptr _tao_objptr =
      IAPIResponse::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIResponse_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IAPIResponse>::insert (
        _tao_any,
        IAPIResponse::_tao_any_destructor,
        _tc_IAPIResponse,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IAPIResponse_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IAPIResponse>::extract (
          _tao_any,
          IAPIResponse::_tao_any_destructor,
          _tc_IAPIResponse,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIResponse_ptr _tao_elem)
{
  MCC7500SDK::IAPIResponse_ptr _tao_objptr =
    MCC7500SDK::IAPIResponse::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIResponse_ptr *_tao_elem)
{
  TAO::Any_Impl_T<MCC7500SDK::IAPIResponse>::insert (
      _tao_any,
      MCC7500SDK::IAPIResponse::_tao_any_destructor,
      MCC7500SDK::_tc_IAPIResponse,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIResponse_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<MCC7500SDK::IAPIResponse>::extract (
        _tao_any,
        MCC7500SDK::IAPIResponse::_tao_any_destructor,
        MCC7500SDK::_tc_IAPIResponse,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MCC7500SDK::IAPIRequestServer>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MCC7500SDK
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIRequestServer_ptr _tao_elem)
  {
    IAPIRequestServer_ptr _tao_objptr =
      IAPIRequestServer::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIRequestServer_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IAPIRequestServer>::insert (
        _tao_any,
        IAPIRequestServer::_tao_any_destructor,
        _tc_IAPIRequestServer,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IAPIRequestServer_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IAPIRequestServer>::extract (
          _tao_any,
          IAPIRequestServer::_tao_any_destructor,
          _tc_IAPIRequestServer,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer_ptr _tao_elem)
{
  MCC7500SDK::IAPIRequestServer_ptr _tao_objptr =
    MCC7500SDK::IAPIRequestServer::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer_ptr *_tao_elem)
{
  TAO::Any_Impl_T<MCC7500SDK::IAPIRequestServer>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::_tao_any_destructor,
      MCC7500SDK::_tc_IAPIRequestServer,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<MCC7500SDK::IAPIRequestServer>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequestServer::_tao_any_destructor,
        MCC7500SDK::_tc_IAPIRequestServer,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_tao_any_destructor,
        MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::RegistrationInternalFail>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::RegistrationInternalFail>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::RegistrationInternalFail *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::RegistrationInternalFail>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::RegistrationInternalFail *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::RegistrationInternalFail>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_tao_any_destructor,
        MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnsupportedVersion>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::UnsupportedVersion &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnsupportedVersion>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::UnsupportedVersion *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnsupportedVersion>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::UnsupportedVersion *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequestServer::UnsupportedVersion *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::UnsupportedVersion *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnsupportedVersion>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_tao_any_destructor,
        MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnknownClientID>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::UnknownClientID &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnknownClientID>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::UnknownClientID *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnknownClientID>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_any_destructor,
      MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequestServer::UnknownClientID *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequestServer::UnknownClientID *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequestServer::UnknownClientID *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequestServer::UnknownClientID>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequestServer::UnknownClientID::_tao_any_destructor,
        MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MCC7500SDK::IBaseAPIRequest>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MCC7500SDK
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IBaseAPIRequest_ptr _tao_elem)
  {
    IBaseAPIRequest_ptr _tao_objptr =
      IBaseAPIRequest::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IBaseAPIRequest_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IBaseAPIRequest>::insert (
        _tao_any,
        IBaseAPIRequest::_tao_any_destructor,
        _tc_IBaseAPIRequest,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IBaseAPIRequest_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IBaseAPIRequest>::extract (
          _tao_any,
          IBaseAPIRequest::_tao_any_destructor,
          _tc_IBaseAPIRequest,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IBaseAPIRequest_ptr _tao_elem)
{
  MCC7500SDK::IBaseAPIRequest_ptr _tao_objptr =
    MCC7500SDK::IBaseAPIRequest::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IBaseAPIRequest_ptr *_tao_elem)
{
  TAO::Any_Impl_T<MCC7500SDK::IBaseAPIRequest>::insert (
      _tao_any,
      MCC7500SDK::IBaseAPIRequest::_tao_any_destructor,
      MCC7500SDK::_tc_IBaseAPIRequest,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IBaseAPIRequest_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<MCC7500SDK::IBaseAPIRequest>::extract (
        _tao_any,
        MCC7500SDK::IBaseAPIRequest::_tao_any_destructor,
        MCC7500SDK::_tc_IBaseAPIRequest,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MCC7500SDK::IAPIRequest>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MCC7500SDK
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIRequest_ptr _tao_elem)
  {
    IAPIRequest_ptr _tao_objptr =
      IAPIRequest::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIRequest_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IAPIRequest>::insert (
        _tao_any,
        IAPIRequest::_tao_any_destructor,
        _tc_IAPIRequest,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IAPIRequest_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IAPIRequest>::extract (
          _tao_any,
          IAPIRequest::_tao_any_destructor,
          _tc_IAPIRequest,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest_ptr _tao_elem)
{
  MCC7500SDK::IAPIRequest_ptr _tao_objptr =
    MCC7500SDK::IAPIRequest::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest_ptr *_tao_elem)
{
  TAO::Any_Impl_T<MCC7500SDK::IAPIRequest>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest::_tao_any_destructor,
      MCC7500SDK::_tc_IAPIRequest,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<MCC7500SDK::IAPIRequest>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest::_tao_any_destructor,
        MCC7500SDK::_tc_IAPIRequest,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::UnknownApiRequest>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::UnknownApiRequest &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::UnknownApiRequest>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::UnknownApiRequest *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::UnknownApiRequest>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::UnknownApiRequest *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest::UnknownApiRequest *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::UnknownApiRequest *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::UnknownApiRequest>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest::UnknownApiRequest::_tao_any_destructor,
        MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterTypeMismatch>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::ParameterTypeMismatch &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterTypeMismatch>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::ParameterTypeMismatch *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterTypeMismatch>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::ParameterTypeMismatch *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest::ParameterTypeMismatch *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::ParameterTypeMismatch *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterTypeMismatch>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_tao_any_destructor,
        MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterCountMismatch>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::ParameterCountMismatch &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterCountMismatch>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::ParameterCountMismatch *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterCountMismatch>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::ParameterCountMismatch *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest::ParameterCountMismatch *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::ParameterCountMismatch *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ParameterCountMismatch>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest::ParameterCountMismatch::_tao_any_destructor,
        MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ApiRequestInternalFail>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::ApiRequestInternalFail &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ApiRequestInternalFail>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::ApiRequestInternalFail *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ApiRequestInternalFail>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_any_destructor,
      MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest::ApiRequestInternalFail *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest::ApiRequestInternalFail *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest::ApiRequestInternalFail *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest::ApiRequestInternalFail>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_tao_any_destructor,
        MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/any_op_cs.cpp:45


TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::ResponseIDs &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<MCC7500SDK::ResponseIDs *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<MCC7500SDK::ResponseIDs>::insert_copy (
        _tao_any,
        MCC7500SDK::ResponseIDs::_tao_any_destructor,
        MCC7500SDK::_tc_ResponseIDs,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::ResponseIDs *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::ResponseIDs>::insert (
      _tao_any,
      MCC7500SDK::ResponseIDs::_tao_any_destructor,
      MCC7500SDK::_tc_ResponseIDs,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::ResponseIDs *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::ResponseIDs *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::ResponseIDs *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::ResponseIDs>::extract (
        _tao_any,
        MCC7500SDK::ResponseIDs::_tao_any_destructor,
        MCC7500SDK::_tc_ResponseIDs,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/any_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<MCC7500SDK::IAPIRequest2>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace MCC7500SDK
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIRequest2_ptr _tao_elem)
  {
    IAPIRequest2_ptr _tao_objptr =
      IAPIRequest2::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      IAPIRequest2_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<IAPIRequest2>::insert (
        _tao_any,
        IAPIRequest2::_tao_any_destructor,
        _tc_IAPIRequest2,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      IAPIRequest2_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<IAPIRequest2>::extract (
          _tao_any,
          IAPIRequest2::_tao_any_destructor,
          _tc_IAPIRequest2,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2_ptr _tao_elem)
{
  MCC7500SDK::IAPIRequest2_ptr _tao_objptr =
    MCC7500SDK::IAPIRequest2::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2_ptr *_tao_elem)
{
  TAO::Any_Impl_T<MCC7500SDK::IAPIRequest2>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest2::_tao_any_destructor,
      MCC7500SDK::_tc_IAPIRequest2,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<MCC7500SDK::IAPIRequest2>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest2::_tao_any_destructor,
        MCC7500SDK::_tc_IAPIRequest2,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::InvalidResponseIdException>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest2::InvalidResponseIdException &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::InvalidResponseIdException>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_any_destructor,
      MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2::InvalidResponseIdException *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::InvalidResponseIdException>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_any_destructor,
      MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2::InvalidResponseIdException *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest2::InvalidResponseIdException *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest2::InvalidResponseIdException *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::InvalidResponseIdException>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_tao_any_destructor,
        MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::FilterInternalFailureException>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest2::FilterInternalFailureException &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::FilterInternalFailureException>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_any_destructor,
      MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::FilterInternalFailureException>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_any_destructor,
      MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest2::FilterInternalFailureException *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest2::FilterInternalFailureException *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::FilterInternalFailureException>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_tao_any_destructor,
        MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/any_op_cs.cpp:48
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::ClientNotRegisteredException>::demarshal_value (
      TAO_InputCDR & cdr
    )
  {
    ::CORBA::String_var id;
    
    if (!(cdr >> id.out ()))
      {
        return false;
      }
    
    try
      {
        this->value_->_tao_decode (cdr);
      }
    catch (const ::CORBA::Exception &)
      {
        return false;
      }
    
    return true;
  }
}

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException &_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::ClientNotRegisteredException>::insert_copy (
      _tao_any,
      MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_any_destructor,
      MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException,
      _tao_elem
    );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::ClientNotRegisteredException>::insert (
      _tao_any,
      MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_any_destructor,
      MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<MCC7500SDK::IAPIRequest2::ClientNotRegisteredException>::extract (
        _tao_any,
        MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_tao_any_destructor,
        MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_enum/cdr_op_cs.cpp:41


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, MCC7500SDK::EVariantType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, MCC7500SDK::EVariantType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<MCC7500SDK::EVariantType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:94
#if !defined _TAO_CDR_OP_MCC7500SDK_Parameters_CPP_
#define _TAO_CDR_OP_MCC7500SDK_Parameters_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::Parameters &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::Parameters &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_MCC7500SDK_Parameters_CPP_ */

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_union/cdr_op_cs.cpp:58


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::UVariant &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;
  
  switch (_tao_union._d ())
  {
    case MCC7500SDK::eUINT8_T:
      {
        result = strm << ::ACE_OutputCDR::from_octet (_tao_union.V_UINT8 ());
      }
      break;
    case MCC7500SDK::eUINT16_T:
      {
        result = strm << _tao_union.V_UINT16 ();
      }
      break;
    case MCC7500SDK::eUINT32_T:
      {
        result = strm << _tao_union.V_UINT32 ();
      }
      break;
    case MCC7500SDK::eUINT64_T:
      {
        result = strm << _tao_union.V_UINT64 ();
      }
      break;
    case MCC7500SDK::eINT8_T:
      {
        result = strm << ::ACE_OutputCDR::from_char (_tao_union.V_INT8 ());
      }
      break;
    case MCC7500SDK::eINT16_T:
      {
        result = strm << _tao_union.V_INT16 ();
      }
      break;
    case MCC7500SDK::eINT32_T:
      {
        result = strm << _tao_union.V_INT32 ();
      }
      break;
    case MCC7500SDK::eINT64_T:
      {
        result = strm << _tao_union.V_INT64 ();
      }
      break;
    case MCC7500SDK::eFLOAT32_T:
      {
        result = strm << _tao_union.V_FLOAT32 ();
      }
      break;
    case MCC7500SDK::eFLOAT64_T:
      {
        result = strm << _tao_union.V_FLOAT64 ();
      }
      break;
    case MCC7500SDK::eBOOLEAN_T:
      {
        result = strm << ::ACE_OutputCDR::from_boolean (_tao_union.V_BOOLEAN ());
      }
      break;
    case MCC7500SDK::eSEQUENCE_T:
      {
        result = strm << _tao_union.V_SEQUENCE ();
      }
      break;
    case MCC7500SDK::eSTRING_T:
      {
        result = strm << _tao_union.V_STRING ();
      }
      break;
    case MCC7500SDK::eWSTRING_T:
      {
        result = strm << _tao_union.V_WSTRING ();
      }
      break;
    case MCC7500SDK::eEMPTY_T:
      {
        result = strm << ::ACE_OutputCDR::from_octet (_tao_union.V_EMPTY ());
      }
      break;
    default:
      break;
  }
  
  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::UVariant &_tao_union
  )
{
  MCC7500SDK::EVariantType _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;
  
  switch (_tao_discriminant)
  {
    case MCC7500SDK::eUINT8_T:
      {
        ::CORBA::Octet _tao_union_tmp;
        ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        
        if (result)
          {
            _tao_union.V_UINT8 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eUINT16_T:
      {
        CORBA::UShort _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_UINT16 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eUINT32_T:
      {
        CORBA::ULong _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_UINT32 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eUINT64_T:
      {
        CORBA::ULongLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_UINT64 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eINT8_T:
      {
        ::CORBA::Char _tao_union_tmp;
        ::ACE_InputCDR::to_char _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        
        if (result)
          {
            _tao_union.V_INT8 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eINT16_T:
      {
        CORBA::Short _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_INT16 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eINT32_T:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_INT32 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eINT64_T:
      {
        CORBA::LongLong _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_INT64 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eFLOAT32_T:
      {
        CORBA::Float _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_FLOAT32 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eFLOAT64_T:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_FLOAT64 (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eBOOLEAN_T:
      {
        ::CORBA::Boolean _tao_union_tmp;
        ::ACE_InputCDR::to_boolean _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        
        if (result)
          {
            _tao_union.V_BOOLEAN (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eSEQUENCE_T:
      {
        MCC7500SDK::Parameters _tao_union_tmp;
        result = strm >> _tao_union_tmp;
        
        if (result)
          {
            _tao_union.V_SEQUENCE (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eSTRING_T:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        
        if (result)
          {
            _tao_union.V_STRING (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eWSTRING_T:
      {
        ::CORBA::WString_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();
        
        if (result)
          {
            _tao_union.V_WSTRING (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case MCC7500SDK::eEMPTY_T:
      {
        ::CORBA::Octet _tao_union_tmp;
        ::ACE_InputCDR::to_octet _tao_union_helper (_tao_union_tmp);
        result = strm >> _tao_union_helper;
        
        if (result)
          {
            _tao_union.V_EMPTY (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }
  
  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_structure/cdr_op_cs.cpp:52


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::Version &_tao_aggregate
  )
{
  return
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.Major)) &&
    (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.Minor));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::Version &_tao_aggregate
  )
{
  return
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.Major)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.Minor));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIResponse_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIResponse_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MCC7500SDK::IAPIResponse RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        MCC7500SDK__TAO_IAPIResponse_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.ErrorCode)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequestServer::RegistrationInternalFail &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.ErrorCode)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequestServer::UnsupportedVersion &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    MCC7500SDK::IAPIRequestServer::UnsupportedVersion&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequestServer::UnknownClientID &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    MCC7500SDK::IAPIRequestServer::UnknownClientID&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequestServer_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequestServer_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MCC7500SDK::IAPIRequestServer RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        MCC7500SDK__TAO_IAPIRequestServer_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IBaseAPIRequest_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IBaseAPIRequest_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MCC7500SDK::IBaseAPIRequest RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        MCC7500SDK__TAO_IBaseAPIRequest_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest::UnknownApiRequest &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.methodId)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest::UnknownApiRequest &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.methodId)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest::ParameterTypeMismatch &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.parameter_num)) &&
        (strm << _tao_aggregate.actual) &&
        (strm << _tao_aggregate.expected) &&
        (strm << _tao_aggregate.methodId)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest::ParameterTypeMismatch &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.parameter_num)) &&
    (strm >> _tao_aggregate.actual) &&
    (strm >> _tao_aggregate.expected) &&
    (strm >> _tao_aggregate.methodId)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest::ParameterCountMismatch &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.actual)) &&
        (strm << ::ACE_OutputCDR::from_octet (_tao_aggregate.expected)) &&
        (strm << _tao_aggregate.methodId)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest::ParameterCountMismatch &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.actual)) &&
    (strm >> ::ACE_InputCDR::to_octet (_tao_aggregate.expected)) &&
    (strm >> _tao_aggregate.methodId)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest::ApiRequestInternalFail &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.ErrorCode) &&
        (strm << _tao_aggregate.methodId)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest::ApiRequestInternalFail &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.ErrorCode) &&
    (strm >> _tao_aggregate.methodId)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MCC7500SDK::IAPIRequest RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        MCC7500SDK__TAO_IAPIRequest_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_sequence/cdr_op_cs.cpp:94
#if !defined _TAO_CDR_OP_MCC7500SDK_ResponseIDs_CPP_
#define _TAO_CDR_OP_MCC7500SDK_ResponseIDs_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::ResponseIDs &_tao_sequence
  )
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::ResponseIDs &_tao_sequence
  )
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_MCC7500SDK_ResponseIDs_CPP_ */

// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest2::InvalidResponseIdException &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.responseID)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest2::InvalidResponseIdException &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.responseID)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest2::FilterInternalFailureException &_tao_aggregate
  )
{
  // First marshal the repository ID.
  if (strm << _tao_aggregate._rep_id ())
    {
      // Now marshal the members (if any).
      return (
        (strm << _tao_aggregate.errorCode) &&
        (strm << _tao_aggregate.responseID)
       );
    }
  else
    {
      return false;
    }
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException &_tao_aggregate
  )
{
  // Demarshal the members.
  return (
    (strm >> _tao_aggregate.errorCode) &&
    (strm >> _tao_aggregate.responseID)
  );
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_exception/cdr_op_cs.cpp:49
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// e:\ace+tao-5.8.0\ace_wrappers\tao\tao_idl\be\be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const MCC7500SDK::IAPIRequest2_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    MCC7500SDK::IAPIRequest2_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::MCC7500SDK::IAPIRequest2 RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        MCC7500SDK__TAO_IAPIRequest2_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



