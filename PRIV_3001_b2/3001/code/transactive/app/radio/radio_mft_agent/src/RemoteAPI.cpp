// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "RemoteAPI.h"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



MCC7500SDK::Parameters::Parameters(const ::MCC7500SDK::Parameters& _s)
  : _CORBA_Unbounded_Sequence_Forward< MCC7500SDK::UVariant > (_s.pd_max, 0, 0, 1)
{
  length(_s.pd_len);
  for (_CORBA_ULong _i=0; _i < pd_len; _i++) {
    pd_buf[_i] = _s.pd_buf[_i];
  }
}

void
MCC7500SDK::Parameters::operator<<= (cdrStream& _s)
{
  _CORBA_ULong _l;
  _l <<= _s;
  if (!_s.checkInputOverrun(1,_l)) {
    _CORBA_marshal_sequence_range_check_error(_s);
    // never reach here
  }
  length(_l);
  for( _CORBA_ULong _i = 0; _i < _l; _i++ )
    pd_buf[_i] <<= _s;
}

void
MCC7500SDK::Parameters::operator>>= (cdrStream& _s) const
{
  ::operator>>=(_CORBA_ULong(pd_len), _s);
  for( _CORBA_ULong _i = 0; _i < pd_len; _i++ )
    pd_buf[_i] >>= _s;
}

MCC7500SDK::Parameters&
MCC7500SDK::Parameters::operator=(const ::MCC7500SDK::Parameters& _s)
{
  length(_s.pd_len);
  for (unsigned long _i=0; _i < pd_len; _i++) {
    pd_buf[_i] = _s.pd_buf[_i];
  }
  return *this;
}

MCC7500SDK::UVariant&
MCC7500SDK::Parameters::operator[](_CORBA_ULong _index)
{
  if (_index >= pd_len) _CORBA_bound_check_error();
  return pd_buf[_index];
}

const MCC7500SDK::UVariant&
MCC7500SDK::Parameters::operator[](_CORBA_ULong _index) const
{
  if (_index >= pd_len) _CORBA_bound_check_error();
  return pd_buf[_index];
}

MCC7500SDK::UVariant*
MCC7500SDK::Parameters::allocbuf(_CORBA_ULong _nelems)
{
  ::MCC7500SDK::UVariant* _tmp = 0;
  if (_nelems) {
    _tmp = new ::MCC7500SDK::UVariant[_nelems];
  }
  return _tmp;
}

void
MCC7500SDK::Parameters::freebuf(::MCC7500SDK::UVariant* _b)
{
  if (_b) delete [] _b;
}

void
MCC7500SDK::Parameters::NP_freebuf()
{
  if (pd_buf) delete [] pd_buf;
}

MCC7500SDK::Parameters::~Parameters()
{
  if (pd_rel && pd_buf) delete [] pd_buf;
  pd_buf = 0;
}

void
MCC7500SDK::Parameters::NP_copybuffer(_CORBA_ULong _newmax)
{
  // replace pd_data with a new buffer of size newmax.
  // Invariant:  pd_len <= newmax
  //
  ::MCC7500SDK::UVariant* _newbuf = allocbuf(_newmax);
  if (!_newbuf) {
    _CORBA_new_operator_return_null();
    // never reach here
  }
  for (unsigned long _i=0; _i < pd_len; _i++) {
    _newbuf[_i] = pd_buf[_i];
  }
  if (pd_rel && pd_buf) {
    freebuf(pd_buf);
  }
  else {
    pd_rel = 1;
  }
  pd_buf = _newbuf;
  pd_max = _newmax;
}

void
MCC7500SDK::UVariant::operator>>= (cdrStream& _n) const
{
  _pd__d >>= _n;

  switch(_pd__d) {
    case eUINT8_T:
      _n.marshalOctet(_pd_V_UINT8);
      break;
    case eUINT16_T:
      _pd_V_UINT16 >>= _n;
      break;
    case eUINT32_T:
      _pd_V_UINT32 >>= _n;
      break;
    case eUINT64_T:
      _pd_V_UINT64 >>= _n;
      break;
    case eINT8_T:
      _n.marshalChar(_pd_V_INT8);
      break;
    case eINT16_T:
      _pd_V_INT16 >>= _n;
      break;
    case eINT32_T:
      _pd_V_INT32 >>= _n;
      break;
    case eINT64_T:
      _pd_V_INT64 >>= _n;
      break;
    case eFLOAT32_T:
      _pd_V_FLOAT32 >>= _n;
      break;
    case eFLOAT64_T:
      _pd_V_FLOAT64 >>= _n;
      break;
    case eBOOLEAN_T:
      _n.marshalBoolean(_pd_V_BOOLEAN);
      break;
    case eSEQUENCE_T:
      (const Parameters&) _pd_V_SEQUENCE >>= _n;
      break;
    case eSTRING_T:
      _n.marshalString(_pd_V_STRING,0);
      break;
    case eWSTRING_T:
      _n.marshalWString(_pd_V_WSTRING,0);
      break;
    case eEMPTY_T:
      _n.marshalOctet(_pd_V_EMPTY);
      break;
    default: break;

  
  }


}

void
MCC7500SDK::UVariant::operator<<= (cdrStream& _n)
{
  (EVariantType&)_pd__d <<= _n;

  switch(_pd__d) {
    case eUINT8_T:
      _pd__default = 0;
      _pd_V_UINT8 = _n.unmarshalOctet();
      break;
    case eUINT16_T:
      _pd__default = 0;
      (::CORBA::UShort&)_pd_V_UINT16 <<= _n;
      break;
    case eUINT32_T:
      _pd__default = 0;
      (::CORBA::ULong&)_pd_V_UINT32 <<= _n;
      break;
    case eUINT64_T:
      _pd__default = 0;
      (::CORBA::ULongLong&)_pd_V_UINT64 <<= _n;
      break;
    case eINT8_T:
      _pd__default = 0;
      _pd_V_INT8 = _n.unmarshalChar();
      break;
    case eINT16_T:
      _pd__default = 0;
      (::CORBA::Short&)_pd_V_INT16 <<= _n;
      break;
    case eINT32_T:
      _pd__default = 0;
      (::CORBA::Long&)_pd_V_INT32 <<= _n;
      break;
    case eINT64_T:
      _pd__default = 0;
      (::CORBA::LongLong&)_pd_V_INT64 <<= _n;
      break;
    case eFLOAT32_T:
      _pd__default = 0;
      (::CORBA::Float&)_pd_V_FLOAT32 <<= _n;
      break;
    case eFLOAT64_T:
      _pd__default = 0;
      (::CORBA::Double&)_pd_V_FLOAT64 <<= _n;
      break;
    case eBOOLEAN_T:
      _pd__default = 0;
      _pd_V_BOOLEAN = _n.unmarshalBoolean();
      break;
    case eSEQUENCE_T:
      _pd__default = 0;
      (Parameters&)_pd_V_SEQUENCE <<= _n;
      break;
    case eSTRING_T:
      _pd__default = 0;
      _pd_V_STRING = _n.unmarshalString(0);
      break;
    case eWSTRING_T:
      _pd__default = 0;
      _pd_V_WSTRING = _n.unmarshalWString(0);
      break;
    case eEMPTY_T:
      _pd__default = 0;
      _pd_V_EMPTY = _n.unmarshalOctet();
      break;

  }
  _pd__initialised = 1;
}

void
MCC7500SDK::Version::operator>>= (cdrStream &_n) const
{
  _n.marshalOctet(Major);
  _n.marshalOctet(Minor);

}

void
MCC7500SDK::Version::operator<<= (cdrStream &_n)
{
  Major = _n.unmarshalOctet();
  Minor = _n.unmarshalOctet();

}

MCC7500SDK::IAPIResponse_ptr MCC7500SDK::IAPIResponse_Helper::_nil() {
  return ::MCC7500SDK::IAPIResponse::_nil();
}

::CORBA::Boolean MCC7500SDK::IAPIResponse_Helper::is_nil(::MCC7500SDK::IAPIResponse_ptr p) {
  return ::CORBA::is_nil(p);

}

void MCC7500SDK::IAPIResponse_Helper::release(::MCC7500SDK::IAPIResponse_ptr p) {
  ::CORBA::release(p);
}

void MCC7500SDK::IAPIResponse_Helper::marshalObjRef(::MCC7500SDK::IAPIResponse_ptr obj, cdrStream& s) {
  ::MCC7500SDK::IAPIResponse::_marshalObjRef(obj, s);
}

MCC7500SDK::IAPIResponse_ptr MCC7500SDK::IAPIResponse_Helper::unmarshalObjRef(cdrStream& s) {
  return ::MCC7500SDK::IAPIResponse::_unmarshalObjRef(s);
}

void MCC7500SDK::IAPIResponse_Helper::duplicate(::MCC7500SDK::IAPIResponse_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_duplicate(::MCC7500SDK::IAPIResponse_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

MCC7500SDK::IAPIResponse_ptr
MCC7500SDK::IAPIResponse::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_IAPIResponse _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_IAPIResponse* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_IAPIResponse;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* MCC7500SDK::IAPIResponse::_PD_repoId = "IDL:MCC7500SDK/IAPIResponse:1.0";


MCC7500SDK::_objref_IAPIResponse::~_objref_IAPIResponse() {
  
}


MCC7500SDK::_objref_IAPIResponse::_objref_IAPIResponse(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::MCC7500SDK::IAPIResponse::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
MCC7500SDK::_objref_IAPIResponse::_ptrToObjRef(const char* id)
{
  if( id == ::MCC7500SDK::IAPIResponse::_PD_repoId )
    return (::MCC7500SDK::IAPIResponse_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIResponse::_PD_repoId) )
    return (::MCC7500SDK::IAPIResponse_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cMCC7500SDK_mParameters
class _0RL_cd_9DD00009099B7268_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  
  static const char* const _user_exns[];

  MCC7500SDK::Parameters_var arg_0_;
  const MCC7500SDK::Parameters* arg_0;
};

void _0RL_cd_9DD00009099B7268_00000000::marshalArguments(cdrStream& _n)
{
  (const MCC7500SDK::Parameters&) *arg_0 >>= _n;

}

void _0RL_cd_9DD00009099B7268_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new MCC7500SDK::Parameters;
  (MCC7500SDK::Parameters&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_9DD00009099B7268_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_00000000* tcd = (_0RL_cd_9DD00009099B7268_00000000*)cd;
  MCC7500SDK::_impl_IAPIResponse* impl = (MCC7500SDK::_impl_IAPIResponse*) svnt->_ptrToInterface(MCC7500SDK::IAPIResponse::_PD_repoId);
  impl->CallBack(*tcd->arg_0);


}

void MCC7500SDK::_objref_IAPIResponse::CallBack(const ::MCC7500SDK::Parameters& Message)
{
  _0RL_cd_9DD00009099B7268_00000000 _call_desc(_0RL_lcfn_9DD00009099B7268_10000000, "CallBack", 9);
  _call_desc.arg_0 = &(::MCC7500SDK::Parameters&) Message;

  _invoke(_call_desc);



}
MCC7500SDK::_pof_IAPIResponse::~_pof_IAPIResponse() {}


omniObjRef*
MCC7500SDK::_pof_IAPIResponse::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::MCC7500SDK::_objref_IAPIResponse(ior, id);
}


::CORBA::Boolean
MCC7500SDK::_pof_IAPIResponse::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::MCC7500SDK::IAPIResponse::_PD_repoId) )
    return 1;
  
  return 0;
}

const MCC7500SDK::_pof_IAPIResponse _the_pof_MCC7500SDK_mIAPIResponse;

MCC7500SDK::_impl_IAPIResponse::~_impl_IAPIResponse() {}


::CORBA::Boolean
MCC7500SDK::_impl_IAPIResponse::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "CallBack") ) {

    _0RL_cd_9DD00009099B7268_00000000 _call_desc(_0RL_lcfn_9DD00009099B7268_10000000, "CallBack", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
MCC7500SDK::_impl_IAPIResponse::_ptrToInterface(const char* id)
{
  if( id == ::MCC7500SDK::IAPIResponse::_PD_repoId )
    return (::MCC7500SDK::_impl_IAPIResponse*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIResponse::_PD_repoId) )
    return (::MCC7500SDK::_impl_IAPIResponse*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
MCC7500SDK::_impl_IAPIResponse::_mostDerivedRepoId()
{
  return ::MCC7500SDK::IAPIResponse::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::AnotherUserAlreadyRegistered(const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered& _s) : ::CORBA::UserException(_s)
{
  
}



MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered& MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::operator=(const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::~AnotherUserAlreadyRegistered() {}

void MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_PD_repoId = "IDL:MCC7500SDK/IAPIRequestServer/AnotherUserAlreadyRegistered:1.0";
const char* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered";

MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_downcast(::CORBA::Exception* _e) {
  return (AnotherUserAlreadyRegistered*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_downcast(const ::CORBA::Exception* _e) {
  return (const AnotherUserAlreadyRegistered*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_NP_duplicate() const {
  return new AnotherUserAlreadyRegistered(*this);
}

const char* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequestServer/AnotherUserAlreadyRegistered:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::RegistrationInternalFail(const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail& _s) : ::CORBA::UserException(_s)
{
  ErrorCode = _s.ErrorCode;

}

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::RegistrationInternalFail(::CORBA::Long _ErrorCode)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::insertToAnyFnNCP;
  ErrorCode = _ErrorCode;

}



MCC7500SDK::IAPIRequestServer::RegistrationInternalFail& MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::operator=(const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  ErrorCode = _s.ErrorCode;

  return *this;
}

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::~RegistrationInternalFail() {}

void MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_PD_repoId = "IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0";
const char* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequestServer::RegistrationInternalFail";

MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_downcast(::CORBA::Exception* _e) {
  return (RegistrationInternalFail*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_downcast(const ::CORBA::Exception* _e) {
  return (const RegistrationInternalFail*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_NP_duplicate() const {
  return new RegistrationInternalFail(*this);
}

const char* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::operator>>= (cdrStream& _n) const
{
  ErrorCode >>= _n;

}

void
MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::operator<<= (cdrStream& _n)
{
  (::CORBA::Long&)ErrorCode <<= _n;

}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequestServer::UnsupportedVersion::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequestServer::UnsupportedVersion::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequestServer::UnsupportedVersion::UnsupportedVersion(const MCC7500SDK::IAPIRequestServer::UnsupportedVersion& _s) : ::CORBA::UserException(_s)
{
  
}



MCC7500SDK::IAPIRequestServer::UnsupportedVersion& MCC7500SDK::IAPIRequestServer::UnsupportedVersion::operator=(const MCC7500SDK::IAPIRequestServer::UnsupportedVersion& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

MCC7500SDK::IAPIRequestServer::UnsupportedVersion::~UnsupportedVersion() {}

void MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_PD_repoId = "IDL:MCC7500SDK/IAPIRequestServer/UnsupportedVersion:1.0";
const char* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequestServer::UnsupportedVersion";

MCC7500SDK::IAPIRequestServer::UnsupportedVersion* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_downcast(::CORBA::Exception* _e) {
  return (UnsupportedVersion*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequestServer::UnsupportedVersion* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_downcast(const ::CORBA::Exception* _e) {
  return (const UnsupportedVersion*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_NP_duplicate() const {
  return new UnsupportedVersion(*this);
}

const char* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequestServer/UnsupportedVersion:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequestServer::UnknownClientID::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequestServer::UnknownClientID::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequestServer::UnknownClientID::UnknownClientID(const MCC7500SDK::IAPIRequestServer::UnknownClientID& _s) : ::CORBA::UserException(_s)
{
  
}



MCC7500SDK::IAPIRequestServer::UnknownClientID& MCC7500SDK::IAPIRequestServer::UnknownClientID::operator=(const MCC7500SDK::IAPIRequestServer::UnknownClientID& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

MCC7500SDK::IAPIRequestServer::UnknownClientID::~UnknownClientID() {}

void MCC7500SDK::IAPIRequestServer::UnknownClientID::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequestServer::UnknownClientID::_PD_repoId = "IDL:MCC7500SDK/IAPIRequestServer/UnknownClientID:1.0";
const char* MCC7500SDK::IAPIRequestServer::UnknownClientID::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequestServer::UnknownClientID";

MCC7500SDK::IAPIRequestServer::UnknownClientID* MCC7500SDK::IAPIRequestServer::UnknownClientID::_downcast(::CORBA::Exception* _e) {
  return (UnknownClientID*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequestServer::UnknownClientID* MCC7500SDK::IAPIRequestServer::UnknownClientID::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownClientID*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequestServer::UnknownClientID::_NP_duplicate() const {
  return new UnknownClientID(*this);
}

const char* MCC7500SDK::IAPIRequestServer::UnknownClientID::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequestServer::UnknownClientID::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequestServer/UnknownClientID:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequestServer::UnknownClientID::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

MCC7500SDK::IAPIRequestServer_ptr MCC7500SDK::IAPIRequestServer_Helper::_nil() {
  return ::MCC7500SDK::IAPIRequestServer::_nil();
}

::CORBA::Boolean MCC7500SDK::IAPIRequestServer_Helper::is_nil(::MCC7500SDK::IAPIRequestServer_ptr p) {
  return ::CORBA::is_nil(p);

}

void MCC7500SDK::IAPIRequestServer_Helper::release(::MCC7500SDK::IAPIRequestServer_ptr p) {
  ::CORBA::release(p);
}

void MCC7500SDK::IAPIRequestServer_Helper::marshalObjRef(::MCC7500SDK::IAPIRequestServer_ptr obj, cdrStream& s) {
  ::MCC7500SDK::IAPIRequestServer::_marshalObjRef(obj, s);
}

MCC7500SDK::IAPIRequestServer_ptr MCC7500SDK::IAPIRequestServer_Helper::unmarshalObjRef(cdrStream& s) {
  return ::MCC7500SDK::IAPIRequestServer::_unmarshalObjRef(s);
}

void MCC7500SDK::IAPIRequestServer_Helper::duplicate(::MCC7500SDK::IAPIRequestServer_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_duplicate(::MCC7500SDK::IAPIRequestServer_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

MCC7500SDK::IAPIRequestServer_ptr
MCC7500SDK::IAPIRequestServer::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_IAPIRequestServer _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_IAPIRequestServer* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_IAPIRequestServer;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* MCC7500SDK::IAPIRequestServer::_PD_repoId = "IDL:MCC7500SDK/IAPIRequestServer:1.0";


MCC7500SDK::_objref_IAPIRequestServer::~_objref_IAPIRequestServer() {
  
}


MCC7500SDK::_objref_IAPIRequestServer::_objref_IAPIRequestServer(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::MCC7500SDK::IAPIRequestServer::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
MCC7500SDK::_objref_IAPIRequestServer::_ptrToObjRef(const char* id)
{
  if( id == ::MCC7500SDK::IAPIRequestServer::_PD_repoId )
    return (::MCC7500SDK::IAPIRequestServer_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequestServer::_PD_repoId) )
    return (::MCC7500SDK::IAPIRequestServer_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _coctet_i_cMCC7500SDK_mIAPIResponse_e_cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_e_cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail
class _0RL_cd_9DD00009099B7268_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  MCC7500SDK::IAPIResponse_var arg_0_;
  MCC7500SDK::IAPIResponse_ptr arg_0;
  MCC7500SDK::BYTE result;
};

void _0RL_cd_9DD00009099B7268_20000000::marshalArguments(cdrStream& _n)
{
  MCC7500SDK::IAPIResponse::_marshalObjRef(arg_0,_n);

}

void _0RL_cd_9DD00009099B7268_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = MCC7500SDK::IAPIResponse::_unmarshalObjRef(_n);
  arg_0 = arg_0_.in();

}

void _0RL_cd_9DD00009099B7268_20000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalOctet(result);

}

void _0RL_cd_9DD00009099B7268_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalOctet();

}

const char* const _0RL_cd_9DD00009099B7268_20000000::_user_exns[] = {
  MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_PD_repoId,
  MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_PD_repoId
};

void _0RL_cd_9DD00009099B7268_20000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::_PD_repoId) ) {
    MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::_PD_repoId) ) {
    MCC7500SDK::IAPIRequestServer::RegistrationInternalFail _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_20000000* tcd = (_0RL_cd_9DD00009099B7268_20000000*)cd;
  MCC7500SDK::_impl_IAPIRequestServer* impl = (MCC7500SDK::_impl_IAPIRequestServer*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequestServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->RegisterApp(tcd->arg_0);
#else
  if (!cd->is_upcall())
    tcd->result = impl->RegisterApp(tcd->arg_0);
  else {
    try {
      tcd->result = impl->RegisterApp(tcd->arg_0);
    }
    catch(MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequestServer::RegistrationInternalFail& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

MCC7500SDK::BYTE MCC7500SDK::_objref_IAPIRequestServer::RegisterApp(::MCC7500SDK::IAPIResponse_ptr ClientCallback)
{
  _0RL_cd_9DD00009099B7268_20000000 _call_desc(_0RL_lcfn_9DD00009099B7268_30000000, "RegisterApp", 12);
  _call_desc.arg_0 = ClientCallback;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_coctet
class _0RL_cd_9DD00009099B7268_40000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_40000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  MCC7500SDK::BYTE arg_0;
  MCC7500SDK::BOOL result;
};

void _0RL_cd_9DD00009099B7268_40000000::marshalArguments(cdrStream& _n)
{
  _n.marshalOctet(arg_0);

}

void _0RL_cd_9DD00009099B7268_40000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalOctet();

}

void _0RL_cd_9DD00009099B7268_40000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_9DD00009099B7268_40000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_9DD00009099B7268_40000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_50000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_40000000* tcd = (_0RL_cd_9DD00009099B7268_40000000*)cd;
  MCC7500SDK::_impl_IAPIRequestServer* impl = (MCC7500SDK::_impl_IAPIRequestServer*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequestServer::_PD_repoId);
  tcd->result = impl->DeregisterApp(tcd->arg_0);


}

MCC7500SDK::BOOL MCC7500SDK::_objref_IAPIRequestServer::DeregisterApp(::MCC7500SDK::BYTE clientId)
{
  _0RL_cd_9DD00009099B7268_40000000 _call_desc(_0RL_lcfn_9DD00009099B7268_50000000, "DeregisterApp", 14);
  _call_desc.arg_0 = clientId;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cwstring_i_cwstring_i_coctet_i_cwstring
class _0RL_cd_9DD00009099B7268_60000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_60000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::WString_var arg_0_;
  const ::CORBA::WChar* arg_0;
  ::CORBA::WString_var arg_1_;
  const ::CORBA::WChar* arg_1;
  MCC7500SDK::BYTE arg_2;
  ::CORBA::WString_var arg_3_;
  const ::CORBA::WChar* arg_3;
  MCC7500SDK::BOOL result;
};

void _0RL_cd_9DD00009099B7268_60000000::marshalArguments(cdrStream& _n)
{
  _n.marshalWString(arg_0,0);
  _n.marshalWString(arg_1,0);
  _n.marshalOctet(arg_2);
  _n.marshalWString(arg_3,0);

}

void _0RL_cd_9DD00009099B7268_60000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalWString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalWString(0);
  arg_1 = arg_1_.in();
  arg_2 = _n.unmarshalOctet();
  arg_3_ = _n.unmarshalWString(0);
  arg_3 = arg_3_.in();

}

void _0RL_cd_9DD00009099B7268_60000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_9DD00009099B7268_60000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_9DD00009099B7268_60000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_70000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_60000000* tcd = (_0RL_cd_9DD00009099B7268_60000000*)cd;
  MCC7500SDK::_impl_IAPIRequestServer* impl = (MCC7500SDK::_impl_IAPIRequestServer*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequestServer::_PD_repoId);
  tcd->result = impl->AuthenticateUser(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

MCC7500SDK::BOOL MCC7500SDK::_objref_IAPIRequestServer::AuthenticateUser(const ::CORBA::WChar* UserName, const ::CORBA::WChar* Password, ::MCC7500SDK::BYTE ClientID, const ::CORBA::WChar* UserID)
{
  _0RL_cd_9DD00009099B7268_60000000 _call_desc(_0RL_lcfn_9DD00009099B7268_70000000, "AuthenticateUser", 17);
  _call_desc.arg_0 = UserName;
  _call_desc.arg_1 = Password;
  _call_desc.arg_2 = ClientID;
  _call_desc.arg_3 = UserID;

  _invoke(_call_desc);
  return _call_desc.result;


}
// Proxy call descriptor class. Mangled signature:
//  _cMCC7500SDK_mIBaseAPIRequest_i_coctet_i_cMCC7500SDK_mVersion_e_cMCC7500SDK_mIAPIRequestServer_mUnknownClientID_e_cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion
class _0RL_cd_9DD00009099B7268_80000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_80000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  MCC7500SDK::BYTE arg_0;
  MCC7500SDK::Version arg_1_;
  const MCC7500SDK::Version* arg_1;
  MCC7500SDK::IBaseAPIRequest_var result;
};

void _0RL_cd_9DD00009099B7268_80000000::marshalArguments(cdrStream& _n)
{
  _n.marshalOctet(arg_0);
  (const MCC7500SDK::Version&) *arg_1 >>= _n;

}

void _0RL_cd_9DD00009099B7268_80000000::unmarshalArguments(cdrStream& _n)
{
  arg_0 = _n.unmarshalOctet();
  (MCC7500SDK::Version&)arg_1_ <<= _n;
  arg_1 = &arg_1_;

}

void _0RL_cd_9DD00009099B7268_80000000::marshalReturnedValues(cdrStream& _n)
{
  MCC7500SDK::IBaseAPIRequest_Helper::marshalObjRef(result,_n);

}

void _0RL_cd_9DD00009099B7268_80000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = MCC7500SDK::IBaseAPIRequest_Helper::unmarshalObjRef(_n);

}

const char* const _0RL_cd_9DD00009099B7268_80000000::_user_exns[] = {
  MCC7500SDK::IAPIRequestServer::UnknownClientID::_PD_repoId,
  MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_PD_repoId
};

void _0RL_cd_9DD00009099B7268_80000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequestServer::UnknownClientID::_PD_repoId) ) {
    MCC7500SDK::IAPIRequestServer::UnknownClientID _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequestServer::UnsupportedVersion::_PD_repoId) ) {
    MCC7500SDK::IAPIRequestServer::UnsupportedVersion _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_90000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_80000000* tcd = (_0RL_cd_9DD00009099B7268_80000000*)cd;
  MCC7500SDK::_impl_IAPIRequestServer* impl = (MCC7500SDK::_impl_IAPIRequestServer*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequestServer::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  tcd->result = impl->GetAPIRequest(tcd->arg_0, *tcd->arg_1);
#else
  if (!cd->is_upcall())
    tcd->result = impl->GetAPIRequest(tcd->arg_0, *tcd->arg_1);
  else {
    try {
      tcd->result = impl->GetAPIRequest(tcd->arg_0, *tcd->arg_1);
    }
    catch(MCC7500SDK::IAPIRequestServer::UnsupportedVersion& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequestServer::UnknownClientID& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

MCC7500SDK::IBaseAPIRequest_ptr MCC7500SDK::_objref_IAPIRequestServer::GetAPIRequest(::MCC7500SDK::BYTE ClientID, const ::MCC7500SDK::Version& ClientRequestedVersion)
{
  _0RL_cd_9DD00009099B7268_80000000 _call_desc(_0RL_lcfn_9DD00009099B7268_90000000, "GetAPIRequest", 14);
  _call_desc.arg_0 = ClientID;
  _call_desc.arg_1 = &(::MCC7500SDK::Version&) ClientRequestedVersion;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cMCC7500SDK_mVersion
class _0RL_cd_9DD00009099B7268_a0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_a0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  MCC7500SDK::Version result;
};

void _0RL_cd_9DD00009099B7268_a0000000::marshalReturnedValues(cdrStream& _n)
{
  (const MCC7500SDK::Version&) result >>= _n;

}

void _0RL_cd_9DD00009099B7268_a0000000::unmarshalReturnedValues(cdrStream& _n)
{
  (MCC7500SDK::Version&)result <<= _n;

}

const char* const _0RL_cd_9DD00009099B7268_a0000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_b0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_a0000000* tcd = (_0RL_cd_9DD00009099B7268_a0000000*)cd;
  MCC7500SDK::_impl_IAPIRequestServer* impl = (MCC7500SDK::_impl_IAPIRequestServer*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequestServer::_PD_repoId);
  tcd->result = impl->ServerVersion();


}

MCC7500SDK::Version MCC7500SDK::_objref_IAPIRequestServer::ServerVersion()
{
  _0RL_cd_9DD00009099B7268_a0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_b0000000, "_get_ServerVersion", 19);


  _invoke(_call_desc);
  return _call_desc.result;


}
MCC7500SDK::_pof_IAPIRequestServer::~_pof_IAPIRequestServer() {}


omniObjRef*
MCC7500SDK::_pof_IAPIRequestServer::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::MCC7500SDK::_objref_IAPIRequestServer(ior, id);
}


::CORBA::Boolean
MCC7500SDK::_pof_IAPIRequestServer::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::MCC7500SDK::IAPIRequestServer::_PD_repoId) )
    return 1;
  
  return 0;
}

const MCC7500SDK::_pof_IAPIRequestServer _the_pof_MCC7500SDK_mIAPIRequestServer;

MCC7500SDK::_impl_IAPIRequestServer::~_impl_IAPIRequestServer() {}


::CORBA::Boolean
MCC7500SDK::_impl_IAPIRequestServer::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "RegisterApp") ) {

    _0RL_cd_9DD00009099B7268_20000000 _call_desc(_0RL_lcfn_9DD00009099B7268_30000000, "RegisterApp", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "DeregisterApp") ) {

    _0RL_cd_9DD00009099B7268_40000000 _call_desc(_0RL_lcfn_9DD00009099B7268_50000000, "DeregisterApp", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "AuthenticateUser") ) {

    _0RL_cd_9DD00009099B7268_60000000 _call_desc(_0RL_lcfn_9DD00009099B7268_70000000, "AuthenticateUser", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "GetAPIRequest") ) {

    _0RL_cd_9DD00009099B7268_80000000 _call_desc(_0RL_lcfn_9DD00009099B7268_90000000, "GetAPIRequest", 14, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "_get_ServerVersion") ) {

    _0RL_cd_9DD00009099B7268_a0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_b0000000, "_get_ServerVersion", 19, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
MCC7500SDK::_impl_IAPIRequestServer::_ptrToInterface(const char* id)
{
  if( id == ::MCC7500SDK::IAPIRequestServer::_PD_repoId )
    return (::MCC7500SDK::_impl_IAPIRequestServer*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequestServer::_PD_repoId) )
    return (::MCC7500SDK::_impl_IAPIRequestServer*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
MCC7500SDK::_impl_IAPIRequestServer::_mostDerivedRepoId()
{
  return ::MCC7500SDK::IAPIRequestServer::_PD_repoId;
}

MCC7500SDK::IBaseAPIRequest_ptr MCC7500SDK::IBaseAPIRequest_Helper::_nil() {
  return ::MCC7500SDK::IBaseAPIRequest::_nil();
}

::CORBA::Boolean MCC7500SDK::IBaseAPIRequest_Helper::is_nil(::MCC7500SDK::IBaseAPIRequest_ptr p) {
  return ::CORBA::is_nil(p);

}

void MCC7500SDK::IBaseAPIRequest_Helper::release(::MCC7500SDK::IBaseAPIRequest_ptr p) {
  ::CORBA::release(p);
}

void MCC7500SDK::IBaseAPIRequest_Helper::marshalObjRef(::MCC7500SDK::IBaseAPIRequest_ptr obj, cdrStream& s) {
  ::MCC7500SDK::IBaseAPIRequest::_marshalObjRef(obj, s);
}

MCC7500SDK::IBaseAPIRequest_ptr MCC7500SDK::IBaseAPIRequest_Helper::unmarshalObjRef(cdrStream& s) {
  return ::MCC7500SDK::IBaseAPIRequest::_unmarshalObjRef(s);
}

void MCC7500SDK::IBaseAPIRequest_Helper::duplicate(::MCC7500SDK::IBaseAPIRequest_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_duplicate(::MCC7500SDK::IBaseAPIRequest_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

MCC7500SDK::IBaseAPIRequest_ptr
MCC7500SDK::IBaseAPIRequest::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_IBaseAPIRequest _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_IBaseAPIRequest* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_IBaseAPIRequest;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* MCC7500SDK::IBaseAPIRequest::_PD_repoId = "IDL:MCC7500SDK/IBaseAPIRequest:1.0";


MCC7500SDK::_objref_IBaseAPIRequest::~_objref_IBaseAPIRequest() {
  
}


MCC7500SDK::_objref_IBaseAPIRequest::_objref_IBaseAPIRequest(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::MCC7500SDK::IBaseAPIRequest::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
MCC7500SDK::_objref_IBaseAPIRequest::_ptrToObjRef(const char* id)
{
  if( id == ::MCC7500SDK::IBaseAPIRequest::_PD_repoId )
    return (::MCC7500SDK::IBaseAPIRequest_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::IBaseAPIRequest_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_c0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_a0000000* tcd = (_0RL_cd_9DD00009099B7268_a0000000*)cd;
  MCC7500SDK::_impl_IBaseAPIRequest* impl = (MCC7500SDK::_impl_IBaseAPIRequest*) svnt->_ptrToInterface(MCC7500SDK::IBaseAPIRequest::_PD_repoId);
  tcd->result = impl->Ver();


}

MCC7500SDK::Version MCC7500SDK::_objref_IBaseAPIRequest::Ver()
{
  _0RL_cd_9DD00009099B7268_a0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_c0000000, "_get_Ver", 9);


  _invoke(_call_desc);
  return _call_desc.result;


}
MCC7500SDK::_pof_IBaseAPIRequest::~_pof_IBaseAPIRequest() {}


omniObjRef*
MCC7500SDK::_pof_IBaseAPIRequest::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::MCC7500SDK::_objref_IBaseAPIRequest(ior, id);
}


::CORBA::Boolean
MCC7500SDK::_pof_IBaseAPIRequest::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return 1;
  
  return 0;
}

const MCC7500SDK::_pof_IBaseAPIRequest _the_pof_MCC7500SDK_mIBaseAPIRequest;

MCC7500SDK::_impl_IBaseAPIRequest::~_impl_IBaseAPIRequest() {}


::CORBA::Boolean
MCC7500SDK::_impl_IBaseAPIRequest::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "_get_Ver") ) {

    _0RL_cd_9DD00009099B7268_a0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_c0000000, "_get_Ver", 9, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
MCC7500SDK::_impl_IBaseAPIRequest::_ptrToInterface(const char* id)
{
  if( id == ::MCC7500SDK::IBaseAPIRequest::_PD_repoId )
    return (::MCC7500SDK::_impl_IBaseAPIRequest*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::_impl_IBaseAPIRequest*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
MCC7500SDK::_impl_IBaseAPIRequest::_mostDerivedRepoId()
{
  return ::MCC7500SDK::IBaseAPIRequest::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest::UnknownApiRequest::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest::UnknownApiRequest::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest::UnknownApiRequest::UnknownApiRequest(const MCC7500SDK::IAPIRequest::UnknownApiRequest& _s) : ::CORBA::UserException(_s)
{
  methodId = _s.methodId;

}

MCC7500SDK::IAPIRequest::UnknownApiRequest::UnknownApiRequest(METHOD_ID _methodId)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequest::UnknownApiRequest::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequest::UnknownApiRequest::insertToAnyFnNCP;
  methodId = _methodId;

}



MCC7500SDK::IAPIRequest::UnknownApiRequest& MCC7500SDK::IAPIRequest::UnknownApiRequest::operator=(const MCC7500SDK::IAPIRequest::UnknownApiRequest& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  methodId = _s.methodId;

  return *this;
}

MCC7500SDK::IAPIRequest::UnknownApiRequest::~UnknownApiRequest() {}

void MCC7500SDK::IAPIRequest::UnknownApiRequest::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest::UnknownApiRequest::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0";
const char* MCC7500SDK::IAPIRequest::UnknownApiRequest::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest::UnknownApiRequest";

MCC7500SDK::IAPIRequest::UnknownApiRequest* MCC7500SDK::IAPIRequest::UnknownApiRequest::_downcast(::CORBA::Exception* _e) {
  return (UnknownApiRequest*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest::UnknownApiRequest* MCC7500SDK::IAPIRequest::UnknownApiRequest::_downcast(const ::CORBA::Exception* _e) {
  return (const UnknownApiRequest*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest::UnknownApiRequest::_NP_duplicate() const {
  return new UnknownApiRequest(*this);
}

const char* MCC7500SDK::IAPIRequest::UnknownApiRequest::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest::UnknownApiRequest::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest::UnknownApiRequest::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequest::UnknownApiRequest::operator>>= (cdrStream& _n) const
{
  methodId >>= _n;

}

void
MCC7500SDK::IAPIRequest::UnknownApiRequest::operator<<= (cdrStream& _n)
{
  (METHOD_ID&)methodId <<= _n;

}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest::ParameterTypeMismatch::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest::ParameterTypeMismatch::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::ParameterTypeMismatch(const MCC7500SDK::IAPIRequest::ParameterTypeMismatch& _s) : ::CORBA::UserException(_s)
{
  parameter_num = _s.parameter_num;
  actual = _s.actual;
  expected = _s.expected;
  methodId = _s.methodId;

}

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::ParameterTypeMismatch(::CORBA::Octet _parameter_num, EVariantType _actual, EVariantType _expected, METHOD_ID _methodId)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequest::ParameterTypeMismatch::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequest::ParameterTypeMismatch::insertToAnyFnNCP;
  parameter_num = _parameter_num;
  actual = _actual;
  expected = _expected;
  methodId = _methodId;

}



MCC7500SDK::IAPIRequest::ParameterTypeMismatch& MCC7500SDK::IAPIRequest::ParameterTypeMismatch::operator=(const MCC7500SDK::IAPIRequest::ParameterTypeMismatch& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  parameter_num = _s.parameter_num;
  actual = _s.actual;
  expected = _s.expected;
  methodId = _s.methodId;

  return *this;
}

MCC7500SDK::IAPIRequest::ParameterTypeMismatch::~ParameterTypeMismatch() {}

void MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0";
const char* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest::ParameterTypeMismatch";

MCC7500SDK::IAPIRequest::ParameterTypeMismatch* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_downcast(::CORBA::Exception* _e) {
  return (ParameterTypeMismatch*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest::ParameterTypeMismatch* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_downcast(const ::CORBA::Exception* _e) {
  return (const ParameterTypeMismatch*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_NP_duplicate() const {
  return new ParameterTypeMismatch(*this);
}

const char* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequest::ParameterTypeMismatch::operator>>= (cdrStream& _n) const
{
  _n.marshalOctet(parameter_num);
  actual >>= _n;
  expected >>= _n;
  methodId >>= _n;

}

void
MCC7500SDK::IAPIRequest::ParameterTypeMismatch::operator<<= (cdrStream& _n)
{
  parameter_num = _n.unmarshalOctet();
  (EVariantType&)actual <<= _n;
  (EVariantType&)expected <<= _n;
  (METHOD_ID&)methodId <<= _n;

}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest::ParameterCountMismatch::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest::ParameterCountMismatch::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest::ParameterCountMismatch::ParameterCountMismatch(const MCC7500SDK::IAPIRequest::ParameterCountMismatch& _s) : ::CORBA::UserException(_s)
{
  actual = _s.actual;
  expected = _s.expected;
  methodId = _s.methodId;

}

MCC7500SDK::IAPIRequest::ParameterCountMismatch::ParameterCountMismatch(::CORBA::Octet _actual, ::CORBA::Octet _expected, METHOD_ID _methodId)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequest::ParameterCountMismatch::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequest::ParameterCountMismatch::insertToAnyFnNCP;
  actual = _actual;
  expected = _expected;
  methodId = _methodId;

}



MCC7500SDK::IAPIRequest::ParameterCountMismatch& MCC7500SDK::IAPIRequest::ParameterCountMismatch::operator=(const MCC7500SDK::IAPIRequest::ParameterCountMismatch& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  actual = _s.actual;
  expected = _s.expected;
  methodId = _s.methodId;

  return *this;
}

MCC7500SDK::IAPIRequest::ParameterCountMismatch::~ParameterCountMismatch() {}

void MCC7500SDK::IAPIRequest::ParameterCountMismatch::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0";
const char* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest::ParameterCountMismatch";

MCC7500SDK::IAPIRequest::ParameterCountMismatch* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_downcast(::CORBA::Exception* _e) {
  return (ParameterCountMismatch*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest::ParameterCountMismatch* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_downcast(const ::CORBA::Exception* _e) {
  return (const ParameterCountMismatch*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_NP_duplicate() const {
  return new ParameterCountMismatch(*this);
}

const char* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest::ParameterCountMismatch::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest::ParameterCountMismatch::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequest::ParameterCountMismatch::operator>>= (cdrStream& _n) const
{
  _n.marshalOctet(actual);
  _n.marshalOctet(expected);
  methodId >>= _n;

}

void
MCC7500SDK::IAPIRequest::ParameterCountMismatch::operator<<= (cdrStream& _n)
{
  actual = _n.unmarshalOctet();
  expected = _n.unmarshalOctet();
  (METHOD_ID&)methodId <<= _n;

}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest::ApiRequestInternalFail::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest::ApiRequestInternalFail::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::ApiRequestInternalFail(const MCC7500SDK::IAPIRequest::ApiRequestInternalFail& _s) : ::CORBA::UserException(_s)
{
  ErrorCode = _s.ErrorCode;
  methodId = _s.methodId;

}

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::ApiRequestInternalFail(::CORBA::Long _ErrorCode, METHOD_ID _methodId)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequest::ApiRequestInternalFail::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequest::ApiRequestInternalFail::insertToAnyFnNCP;
  ErrorCode = _ErrorCode;
  methodId = _methodId;

}



MCC7500SDK::IAPIRequest::ApiRequestInternalFail& MCC7500SDK::IAPIRequest::ApiRequestInternalFail::operator=(const MCC7500SDK::IAPIRequest::ApiRequestInternalFail& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  ErrorCode = _s.ErrorCode;
  methodId = _s.methodId;

  return *this;
}

MCC7500SDK::IAPIRequest::ApiRequestInternalFail::~ApiRequestInternalFail() {}

void MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0";
const char* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest::ApiRequestInternalFail";

MCC7500SDK::IAPIRequest::ApiRequestInternalFail* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_downcast(::CORBA::Exception* _e) {
  return (ApiRequestInternalFail*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest::ApiRequestInternalFail* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_downcast(const ::CORBA::Exception* _e) {
  return (const ApiRequestInternalFail*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_NP_duplicate() const {
  return new ApiRequestInternalFail(*this);
}

const char* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequest::ApiRequestInternalFail::operator>>= (cdrStream& _n) const
{
  ErrorCode >>= _n;
  methodId >>= _n;

}

void
MCC7500SDK::IAPIRequest::ApiRequestInternalFail::operator<<= (cdrStream& _n)
{
  (::CORBA::Long&)ErrorCode <<= _n;
  (METHOD_ID&)methodId <<= _n;

}

MCC7500SDK::IAPIRequest_ptr MCC7500SDK::IAPIRequest_Helper::_nil() {
  return ::MCC7500SDK::IAPIRequest::_nil();
}

::CORBA::Boolean MCC7500SDK::IAPIRequest_Helper::is_nil(::MCC7500SDK::IAPIRequest_ptr p) {
  return ::CORBA::is_nil(p);

}

void MCC7500SDK::IAPIRequest_Helper::release(::MCC7500SDK::IAPIRequest_ptr p) {
  ::CORBA::release(p);
}

void MCC7500SDK::IAPIRequest_Helper::marshalObjRef(::MCC7500SDK::IAPIRequest_ptr obj, cdrStream& s) {
  ::MCC7500SDK::IAPIRequest::_marshalObjRef(obj, s);
}

MCC7500SDK::IAPIRequest_ptr MCC7500SDK::IAPIRequest_Helper::unmarshalObjRef(cdrStream& s) {
  return ::MCC7500SDK::IAPIRequest::_unmarshalObjRef(s);
}

void MCC7500SDK::IAPIRequest_Helper::duplicate(::MCC7500SDK::IAPIRequest_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_duplicate(::MCC7500SDK::IAPIRequest_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

MCC7500SDK::IAPIRequest_ptr
MCC7500SDK::IAPIRequest::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_IAPIRequest _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_IAPIRequest* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_IAPIRequest;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* MCC7500SDK::IAPIRequest::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest:1.0";


MCC7500SDK::_objref_IAPIRequest::~_objref_IAPIRequest() {
  
}


MCC7500SDK::_objref_IAPIRequest::_objref_IAPIRequest(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::MCC7500SDK::IAPIRequest::_PD_repoId, ior, id, 1),
   _objref_IBaseAPIRequest(ior, id)
   
{
  _PR_setobj(this);
}

void*
MCC7500SDK::_objref_IAPIRequest::_ptrToObjRef(const char* id)
{
  if( id == ::MCC7500SDK::IAPIRequest::_PD_repoId )
    return (::MCC7500SDK::IAPIRequest_ptr) this;
  if( id == ::MCC7500SDK::IBaseAPIRequest::_PD_repoId )
    return (::MCC7500SDK::IBaseAPIRequest_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::IAPIRequest_ptr) this;
  if( omni::strMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::IBaseAPIRequest_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cshort_i_cMCC7500SDK_mParameters_o_cMCC7500SDK_mParameters_o_cMCC7500SDK_mUVariant_e_cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail_e_cMCC7500SDK_mIAPIRequest_mParameterCountMismatch_e_cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch_e_cMCC7500SDK_mIAPIRequest_mUnknownApiRequest
class _0RL_cd_9DD00009099B7268_d0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_d0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 4, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  MCC7500SDK::METHOD_ID arg_0;
  MCC7500SDK::Parameters_var arg_1_;
  const MCC7500SDK::Parameters* arg_1;
  MCC7500SDK::Parameters_var arg_2;
  MCC7500SDK::UVariant_var arg_3;
};

void _0RL_cd_9DD00009099B7268_d0000000::marshalArguments(cdrStream& _n)
{
  arg_0 >>= _n;
  (const MCC7500SDK::Parameters&) *arg_1 >>= _n;

}

void _0RL_cd_9DD00009099B7268_d0000000::unmarshalArguments(cdrStream& _n)
{
  (MCC7500SDK::METHOD_ID&)arg_0 <<= _n;
  arg_1_ = new MCC7500SDK::Parameters;
  (MCC7500SDK::Parameters&)arg_1_ <<= _n;
  arg_1 = &arg_1_.in();

}

void _0RL_cd_9DD00009099B7268_d0000000::marshalReturnedValues(cdrStream& _n)
{
  (const MCC7500SDK::Parameters&) arg_2 >>= _n;
  (const MCC7500SDK::UVariant&) arg_3 >>= _n;

}

void _0RL_cd_9DD00009099B7268_d0000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_2 = new MCC7500SDK::Parameters;
  (MCC7500SDK::Parameters&)arg_2 <<= _n;
  arg_3 = new MCC7500SDK::UVariant;
  (MCC7500SDK::UVariant&)arg_3 <<= _n;

}

const char* const _0RL_cd_9DD00009099B7268_d0000000::_user_exns[] = {
  MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_PD_repoId,
  MCC7500SDK::IAPIRequest::ParameterCountMismatch::_PD_repoId,
  MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_PD_repoId,
  MCC7500SDK::IAPIRequest::UnknownApiRequest::_PD_repoId
};

void _0RL_cd_9DD00009099B7268_d0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest::ApiRequestInternalFail::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest::ApiRequestInternalFail _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest::ParameterCountMismatch::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest::ParameterCountMismatch _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest::ParameterTypeMismatch::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest::ParameterTypeMismatch _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest::UnknownApiRequest::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest::UnknownApiRequest _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_e0000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_d0000000* tcd = (_0RL_cd_9DD00009099B7268_d0000000*)cd;
  MCC7500SDK::_impl_IAPIRequest* impl = (MCC7500SDK::_impl_IAPIRequest*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequest::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->ApiRequest(tcd->arg_0, *tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());
#else
  if (!cd->is_upcall())
    impl->ApiRequest(tcd->arg_0, *tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());
  else {
    try {
      impl->ApiRequest(tcd->arg_0, *tcd->arg_1, tcd->arg_2.out(), tcd->arg_3.out());
    }
    catch(MCC7500SDK::IAPIRequest::UnknownApiRequest& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest::ParameterTypeMismatch& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest::ParameterCountMismatch& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest::ApiRequestInternalFail& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void MCC7500SDK::_objref_IAPIRequest::ApiRequest(::MCC7500SDK::METHOD_ID methodId, const ::MCC7500SDK::Parameters& paramListIn, ::MCC7500SDK::Parameters_out paramListOut, ::MCC7500SDK::UVariant_out returnValue)
{
  _0RL_cd_9DD00009099B7268_d0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_e0000000, "ApiRequest", 11);
  _call_desc.arg_0 = methodId;
  _call_desc.arg_1 = &(::MCC7500SDK::Parameters&) paramListIn;

  _invoke(_call_desc);
  paramListOut = _call_desc.arg_2._retn();
  returnValue = _call_desc.arg_3._retn();


}
MCC7500SDK::_pof_IAPIRequest::~_pof_IAPIRequest() {}


omniObjRef*
MCC7500SDK::_pof_IAPIRequest::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::MCC7500SDK::_objref_IAPIRequest(ior, id);
}


::CORBA::Boolean
MCC7500SDK::_pof_IAPIRequest::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::MCC7500SDK::IAPIRequest::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return 1;


  return 0;
}

const MCC7500SDK::_pof_IAPIRequest _the_pof_MCC7500SDK_mIAPIRequest;

MCC7500SDK::_impl_IAPIRequest::~_impl_IAPIRequest() {}


::CORBA::Boolean
MCC7500SDK::_impl_IAPIRequest::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "ApiRequest") ) {

    _0RL_cd_9DD00009099B7268_d0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_e0000000, "ApiRequest", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_IBaseAPIRequest::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_IBaseAPIRequest*)this)->
      _impl_IBaseAPIRequest::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
MCC7500SDK::_impl_IAPIRequest::_ptrToInterface(const char* id)
{
  if( id == ::MCC7500SDK::IAPIRequest::_PD_repoId )
    return (::MCC7500SDK::_impl_IAPIRequest*) this;
  if( id == ::MCC7500SDK::IBaseAPIRequest::_PD_repoId )
    return (::MCC7500SDK::_impl_IBaseAPIRequest*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::_impl_IAPIRequest*) this;
  if( omni::strMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::_impl_IBaseAPIRequest*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
MCC7500SDK::_impl_IAPIRequest::_mostDerivedRepoId()
{
  return ::MCC7500SDK::IAPIRequest::_PD_repoId;
}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest2::InvalidResponseIdException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest2::InvalidResponseIdException::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest2::InvalidResponseIdException::InvalidResponseIdException(const MCC7500SDK::IAPIRequest2::InvalidResponseIdException& _s) : ::CORBA::UserException(_s)
{
  responseID = _s.responseID;

}

MCC7500SDK::IAPIRequest2::InvalidResponseIdException::InvalidResponseIdException(RESPONSE_ID _responseID)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequest2::InvalidResponseIdException::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequest2::InvalidResponseIdException::insertToAnyFnNCP;
  responseID = _responseID;

}



MCC7500SDK::IAPIRequest2::InvalidResponseIdException& MCC7500SDK::IAPIRequest2::InvalidResponseIdException::operator=(const MCC7500SDK::IAPIRequest2::InvalidResponseIdException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  responseID = _s.responseID;

  return *this;
}

MCC7500SDK::IAPIRequest2::InvalidResponseIdException::~InvalidResponseIdException() {}

void MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0";
const char* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest2::InvalidResponseIdException";

MCC7500SDK::IAPIRequest2::InvalidResponseIdException* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_downcast(::CORBA::Exception* _e) {
  return (InvalidResponseIdException*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest2::InvalidResponseIdException* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_downcast(const ::CORBA::Exception* _e) {
  return (const InvalidResponseIdException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_NP_duplicate() const {
  return new InvalidResponseIdException(*this);
}

const char* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequest2::InvalidResponseIdException::operator>>= (cdrStream& _n) const
{
  responseID >>= _n;

}

void
MCC7500SDK::IAPIRequest2::InvalidResponseIdException::operator<<= (cdrStream& _n)
{
  (RESPONSE_ID&)responseID <<= _n;

}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest2::FilterInternalFailureException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest2::FilterInternalFailureException::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest2::FilterInternalFailureException::FilterInternalFailureException(const MCC7500SDK::IAPIRequest2::FilterInternalFailureException& _s) : ::CORBA::UserException(_s)
{
  errorCode = _s.errorCode;
  responseID = _s.responseID;

}

MCC7500SDK::IAPIRequest2::FilterInternalFailureException::FilterInternalFailureException(::CORBA::Long _errorCode, RESPONSE_ID _responseID)
{
  pd_insertToAnyFn    = MCC7500SDK::IAPIRequest2::FilterInternalFailureException::insertToAnyFn;
  pd_insertToAnyFnNCP = MCC7500SDK::IAPIRequest2::FilterInternalFailureException::insertToAnyFnNCP;
  errorCode = _errorCode;
  responseID = _responseID;

}



MCC7500SDK::IAPIRequest2::FilterInternalFailureException& MCC7500SDK::IAPIRequest2::FilterInternalFailureException::operator=(const MCC7500SDK::IAPIRequest2::FilterInternalFailureException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  errorCode = _s.errorCode;
  responseID = _s.responseID;

  return *this;
}

MCC7500SDK::IAPIRequest2::FilterInternalFailureException::~FilterInternalFailureException() {}

void MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0";
const char* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest2::FilterInternalFailureException";

MCC7500SDK::IAPIRequest2::FilterInternalFailureException* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_downcast(::CORBA::Exception* _e) {
  return (FilterInternalFailureException*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest2::FilterInternalFailureException* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_downcast(const ::CORBA::Exception* _e) {
  return (const FilterInternalFailureException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_NP_duplicate() const {
  return new FilterInternalFailureException(*this);
}

const char* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

void
MCC7500SDK::IAPIRequest2::FilterInternalFailureException::operator>>= (cdrStream& _n) const
{
  errorCode >>= _n;
  responseID >>= _n;

}

void
MCC7500SDK::IAPIRequest2::FilterInternalFailureException::operator<<= (cdrStream& _n)
{
  (::CORBA::Long&)errorCode <<= _n;
  (RESPONSE_ID&)responseID <<= _n;

}

::CORBA::Exception::insertExceptionToAny MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::insertToAnyFn = 0;
::CORBA::Exception::insertExceptionToAnyNCP MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::insertToAnyFnNCP = 0;

MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::ClientNotRegisteredException(const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& _s) : ::CORBA::UserException(_s)
{
  
}



MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::operator=(const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& _s)
{
  ((::CORBA::UserException*) this)->operator=(_s);
  
  return *this;
}

MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::~ClientNotRegisteredException() {}

void MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_raise() const { throw *this; }

const char* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0";
const char* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_typeId = "Exception/UserException/MCC7500SDK::IAPIRequest2::ClientNotRegisteredException";

MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_downcast(::CORBA::Exception* _e) {
  return (ClientNotRegisteredException*) _NP_is_a(_e, _PD_typeId);
}

const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_downcast(const ::CORBA::Exception* _e) {
  return (const ClientNotRegisteredException*) _NP_is_a(_e, _PD_typeId);
}

::CORBA::Exception* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_NP_duplicate() const {
  return new ClientNotRegisteredException(*this);
}

const char* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_NP_typeId() const {
  return _PD_typeId;
}

const char* MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_NP_repoId(int* _size) const {
  *_size = sizeof("IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0");
  return _PD_repoId;
}
 
void MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_NP_marshal(cdrStream& _s) const {
  *this >>= _s;
}

MCC7500SDK::IAPIRequest2_ptr MCC7500SDK::IAPIRequest2_Helper::_nil() {
  return ::MCC7500SDK::IAPIRequest2::_nil();
}

::CORBA::Boolean MCC7500SDK::IAPIRequest2_Helper::is_nil(::MCC7500SDK::IAPIRequest2_ptr p) {
  return ::CORBA::is_nil(p);

}

void MCC7500SDK::IAPIRequest2_Helper::release(::MCC7500SDK::IAPIRequest2_ptr p) {
  ::CORBA::release(p);
}

void MCC7500SDK::IAPIRequest2_Helper::marshalObjRef(::MCC7500SDK::IAPIRequest2_ptr obj, cdrStream& s) {
  ::MCC7500SDK::IAPIRequest2::_marshalObjRef(obj, s);
}

MCC7500SDK::IAPIRequest2_ptr MCC7500SDK::IAPIRequest2_Helper::unmarshalObjRef(cdrStream& s) {
  return ::MCC7500SDK::IAPIRequest2::_unmarshalObjRef(s);
}

void MCC7500SDK::IAPIRequest2_Helper::duplicate(::MCC7500SDK::IAPIRequest2_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_duplicate(::MCC7500SDK::IAPIRequest2_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

MCC7500SDK::IAPIRequest2_ptr
MCC7500SDK::IAPIRequest2::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_IAPIRequest2 _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_IAPIRequest2* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_IAPIRequest2;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* MCC7500SDK::IAPIRequest2::_PD_repoId = "IDL:MCC7500SDK/IAPIRequest2:1.0";


MCC7500SDK::_objref_IAPIRequest2::~_objref_IAPIRequest2() {
  
}


MCC7500SDK::_objref_IAPIRequest2::_objref_IAPIRequest2(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::MCC7500SDK::IAPIRequest2::_PD_repoId, ior, id, 1),
   _objref_IAPIRequest(ior, id)
   
{
  _PR_setobj(this);
}

void*
MCC7500SDK::_objref_IAPIRequest2::_ptrToObjRef(const char* id)
{
  if( id == ::MCC7500SDK::IAPIRequest2::_PD_repoId )
    return (::MCC7500SDK::IAPIRequest2_ptr) this;
  if( id == ::MCC7500SDK::IAPIRequest::_PD_repoId )
    return (::MCC7500SDK::IAPIRequest_ptr) this;

  if( id == ::MCC7500SDK::IBaseAPIRequest::_PD_repoId )
    return (::MCC7500SDK::IBaseAPIRequest_ptr) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequest2::_PD_repoId) )
    return (::MCC7500SDK::IAPIRequest2_ptr) this;
  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::IAPIRequest_ptr) this;

  if( omni::strMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::IBaseAPIRequest_ptr) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  void_i_cMCC7500SDK_mResponseIDs_e_cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_e_cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_e_cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException
class _0RL_cd_9DD00009099B7268_f0000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_f0000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 3, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  MCC7500SDK::ResponseIDs_var arg_0_;
  const MCC7500SDK::ResponseIDs* arg_0;
};

void _0RL_cd_9DD00009099B7268_f0000000::marshalArguments(cdrStream& _n)
{
  (const MCC7500SDK::ResponseIDs&) *arg_0 >>= _n;

}

void _0RL_cd_9DD00009099B7268_f0000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = new MCC7500SDK::ResponseIDs;
  (MCC7500SDK::ResponseIDs&)arg_0_ <<= _n;
  arg_0 = &arg_0_.in();

}

const char* const _0RL_cd_9DD00009099B7268_f0000000::_user_exns[] = {
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId,
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId,
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_PD_repoId
};

void _0RL_cd_9DD00009099B7268_f0000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::InvalidResponseIdException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::InvalidResponseIdException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_01000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_f0000000* tcd = (_0RL_cd_9DD00009099B7268_f0000000*)cd;
  MCC7500SDK::_impl_IAPIRequest2* impl = (MCC7500SDK::_impl_IAPIRequest2*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequest2::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->FilterAPIResponse(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->FilterAPIResponse(*tcd->arg_0);
  else {
    try {
      impl->FilterAPIResponse(*tcd->arg_0);
    }
    catch(MCC7500SDK::IAPIRequest2::InvalidResponseIdException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest2::FilterInternalFailureException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void MCC7500SDK::_objref_IAPIRequest2::FilterAPIResponse(const ::MCC7500SDK::ResponseIDs& msgResponseIDs)
{
  _0RL_cd_9DD00009099B7268_f0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_01000000, "FilterAPIResponse", 18);
  _call_desc.arg_0 = &(::MCC7500SDK::ResponseIDs&) msgResponseIDs;

  _invoke(_call_desc);



}
// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_11000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_f0000000* tcd = (_0RL_cd_9DD00009099B7268_f0000000*)cd;
  MCC7500SDK::_impl_IAPIRequest2* impl = (MCC7500SDK::_impl_IAPIRequest2*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequest2::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->UnfilterAPIResponse(*tcd->arg_0);
#else
  if (!cd->is_upcall())
    impl->UnfilterAPIResponse(*tcd->arg_0);
  else {
    try {
      impl->UnfilterAPIResponse(*tcd->arg_0);
    }
    catch(MCC7500SDK::IAPIRequest2::InvalidResponseIdException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest2::FilterInternalFailureException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void MCC7500SDK::_objref_IAPIRequest2::UnfilterAPIResponse(const ::MCC7500SDK::ResponseIDs& msgResponseIDs)
{
  _0RL_cd_9DD00009099B7268_f0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_11000000, "UnfilterAPIResponse", 20);
  _call_desc.arg_0 = &(::MCC7500SDK::ResponseIDs&) msgResponseIDs;

  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_e_cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_e_cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException
class _0RL_cd_9DD00009099B7268_21000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_21000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
    
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  
};

const char* const _0RL_cd_9DD00009099B7268_21000000::_user_exns[] = {
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId,
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId
};

void _0RL_cd_9DD00009099B7268_21000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_31000000(omniCallDescriptor* cd, omniServant* svnt)
{
  
  MCC7500SDK::_impl_IAPIRequest2* impl = (MCC7500SDK::_impl_IAPIRequest2*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequest2::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->UnfilterAllAPIResponses();
#else
  if (!cd->is_upcall())
    impl->UnfilterAllAPIResponses();
  else {
    try {
      impl->UnfilterAllAPIResponses();
    }
    catch(MCC7500SDK::IAPIRequest2::FilterInternalFailureException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void MCC7500SDK::_objref_IAPIRequest2::UnfilterAllAPIResponses()
{
  _0RL_cd_9DD00009099B7268_21000000 _call_desc(_0RL_lcfn_9DD00009099B7268_31000000, "UnfilterAllAPIResponses", 24);


  _invoke(_call_desc);



}
// Proxy call descriptor class. Mangled signature:
//  void_o_cMCC7500SDK_mResponseIDs_e_cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_e_cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException
class _0RL_cd_9DD00009099B7268_41000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_9DD00009099B7268_41000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 2, upcall)
  {
    
  }
  
  
  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  void userException(cdrStream&,_OMNI_NS(IOP_C)*,const char*);
  static const char* const _user_exns[];

  MCC7500SDK::ResponseIDs_var arg_0;
};

void _0RL_cd_9DD00009099B7268_41000000::marshalReturnedValues(cdrStream& _n)
{
  (const MCC7500SDK::ResponseIDs&) arg_0 >>= _n;

}

void _0RL_cd_9DD00009099B7268_41000000::unmarshalReturnedValues(cdrStream& _n)
{
  arg_0 = new MCC7500SDK::ResponseIDs;
  (MCC7500SDK::ResponseIDs&)arg_0 <<= _n;

}

const char* const _0RL_cd_9DD00009099B7268_41000000::_user_exns[] = {
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId,
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId
};

void _0RL_cd_9DD00009099B7268_41000000::userException(cdrStream& s, _OMNI_NS(IOP_C)* iop_client, const char* repoId)
{
  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }

  if ( omni::strMatch(repoId, MCC7500SDK::IAPIRequest2::FilterInternalFailureException::_PD_repoId) ) {
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException _ex;
    _ex <<= s;
    if (iop_client) iop_client->RequestCompleted();
    throw _ex;
  }


  else {
    if (iop_client) iop_client->RequestCompleted(1);
    OMNIORB_THROW(UNKNOWN,UNKNOWN_UserException,
                  (::CORBA::CompletionStatus)s.completion());
  }
}

// Local call call-back function.
static void
_0RL_lcfn_9DD00009099B7268_51000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_9DD00009099B7268_41000000* tcd = (_0RL_cd_9DD00009099B7268_41000000*)cd;
  MCC7500SDK::_impl_IAPIRequest2* impl = (MCC7500SDK::_impl_IAPIRequest2*) svnt->_ptrToInterface(MCC7500SDK::IAPIRequest2::_PD_repoId);
#ifdef HAS_Cplusplus_catch_exception_by_base
  impl->GetFilteredAPIResponses(tcd->arg_0.out());
#else
  if (!cd->is_upcall())
    impl->GetFilteredAPIResponses(tcd->arg_0.out());
  else {
    try {
      impl->GetFilteredAPIResponses(tcd->arg_0.out());
    }
    catch(MCC7500SDK::IAPIRequest2::FilterInternalFailureException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }

    catch(MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& ex) {
      throw omniORB::StubUserException(ex._NP_duplicate());
    }


  }
#endif


}

void MCC7500SDK::_objref_IAPIRequest2::GetFilteredAPIResponses(::MCC7500SDK::ResponseIDs_out msgResponseIDs)
{
  _0RL_cd_9DD00009099B7268_41000000 _call_desc(_0RL_lcfn_9DD00009099B7268_51000000, "GetFilteredAPIResponses", 24);


  _invoke(_call_desc);
  msgResponseIDs = _call_desc.arg_0._retn();


}
MCC7500SDK::_pof_IAPIRequest2::~_pof_IAPIRequest2() {}


omniObjRef*
MCC7500SDK::_pof_IAPIRequest2::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::MCC7500SDK::_objref_IAPIRequest2(ior, id);
}


::CORBA::Boolean
MCC7500SDK::_pof_IAPIRequest2::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::MCC7500SDK::IAPIRequest2::_PD_repoId) )
    return 1;
  if( omni::ptrStrMatch(id, MCC7500SDK::IAPIRequest::_PD_repoId) )
    return 1;

  if( omni::ptrStrMatch(id, MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return 1;


  return 0;
}

const MCC7500SDK::_pof_IAPIRequest2 _the_pof_MCC7500SDK_mIAPIRequest2;

MCC7500SDK::_impl_IAPIRequest2::~_impl_IAPIRequest2() {}


::CORBA::Boolean
MCC7500SDK::_impl_IAPIRequest2::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "FilterAPIResponse") ) {

    _0RL_cd_9DD00009099B7268_f0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_01000000, "FilterAPIResponse", 18, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "UnfilterAPIResponse") ) {

    _0RL_cd_9DD00009099B7268_f0000000 _call_desc(_0RL_lcfn_9DD00009099B7268_11000000, "UnfilterAPIResponse", 20, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "UnfilterAllAPIResponses") ) {

    _0RL_cd_9DD00009099B7268_21000000 _call_desc(_0RL_lcfn_9DD00009099B7268_31000000, "UnfilterAllAPIResponses", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "GetFilteredAPIResponses") ) {

    _0RL_cd_9DD00009099B7268_41000000 _call_desc(_0RL_lcfn_9DD00009099B7268_51000000, "GetFilteredAPIResponses", 24, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  
#ifndef _MSC_VER
  if( _impl_IAPIRequest::_dispatch(_handle) ) {
    return 1;
  }
#else
  // Work-around for incorrect MSVC code generation.
  if( ((_impl_IAPIRequest*)this)->
      _impl_IAPIRequest::_dispatch(_handle) ) {
    return 1;
  }
#endif


  return 0;
}

void*
MCC7500SDK::_impl_IAPIRequest2::_ptrToInterface(const char* id)
{
  if( id == ::MCC7500SDK::IAPIRequest2::_PD_repoId )
    return (::MCC7500SDK::_impl_IAPIRequest2*) this;
  if( id == ::MCC7500SDK::IAPIRequest::_PD_repoId )
    return (::MCC7500SDK::_impl_IAPIRequest*) this;

  if( id == ::MCC7500SDK::IBaseAPIRequest::_PD_repoId )
    return (::MCC7500SDK::_impl_IBaseAPIRequest*) this;


  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequest2::_PD_repoId) )
    return (::MCC7500SDK::_impl_IAPIRequest2*) this;
  if( omni::strMatch(id, ::MCC7500SDK::IAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::_impl_IAPIRequest*) this;

  if( omni::strMatch(id, ::MCC7500SDK::IBaseAPIRequest::_PD_repoId) )
    return (::MCC7500SDK::_impl_IBaseAPIRequest*) this;


  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
MCC7500SDK::_impl_IAPIRequest2::_mostDerivedRepoId()
{
  return ::MCC7500SDK::IAPIRequest2::_PD_repoId;
}

POA_MCC7500SDK::IAPIResponse::~IAPIResponse() {}

POA_MCC7500SDK::IAPIRequestServer::~IAPIRequestServer() {}

POA_MCC7500SDK::IBaseAPIRequest::~IBaseAPIRequest() {}

POA_MCC7500SDK::IAPIRequest::~IAPIRequest() {}

POA_MCC7500SDK::IAPIRequest2::~IAPIRequest2() {}

