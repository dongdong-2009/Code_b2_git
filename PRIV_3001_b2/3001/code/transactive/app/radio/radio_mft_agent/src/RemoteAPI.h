// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.
#ifndef __RemoteAPI_hh__
#define __RemoteAPI_hh__

#ifndef __CORBA_H_EXTERNAL_GUARD__
#include <omniORB4/CORBA.h>
#endif

#ifndef  USE_stub_in_nt_dll
# define USE_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
#endif
#ifndef  USE_core_stub_in_nt_dll
# define USE_core_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
#endif
#ifndef  USE_dyn_stub_in_nt_dll
# define USE_dyn_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
#endif






#ifdef USE_stub_in_nt_dll
# ifndef USE_core_stub_in_nt_dll
#  define USE_core_stub_in_nt_dll
# endif
# ifndef USE_dyn_stub_in_nt_dll
#  define USE_dyn_stub_in_nt_dll
# endif
#endif

#ifdef _core_attr
# error "A local CPP macro _core_attr has already been defined."
#else
# ifdef  USE_core_stub_in_nt_dll
#  define _core_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _core_attr
# endif
#endif

#ifdef _dyn_attr
# error "A local CPP macro _dyn_attr has already been defined."
#else
# ifdef  USE_dyn_stub_in_nt_dll
#  define _dyn_attr _OMNIORB_NTDLL_IMPORT
# else
#  define _dyn_attr
# endif
#endif





_CORBA_MODULE MCC7500SDK

_CORBA_MODULE_BEG

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_DWORD;

  typedef ::CORBA::ULong DWORD;
  typedef ::CORBA::ULong_out DWORD_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_WORD;

  typedef ::CORBA::UShort WORD;
  typedef ::CORBA::UShort_out WORD_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BYTE;

  typedef ::CORBA::Octet BYTE;
  typedef ::CORBA::Octet_out BYTE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_BOOL;

  typedef ::CORBA::Boolean BOOL;
  typedef ::CORBA::Boolean_out BOOL_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_HANDLE;

  typedef ::CORBA::Long HANDLE;
  typedef ::CORBA::Long_out HANDLE_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RID;

  typedef DWORD RID;
  typedef DWORD_out RID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_USER_ID;

  typedef DWORD USER_ID;
  typedef DWORD_out USER_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SITE_ID;

  typedef WORD SITE_ID;
  typedef WORD_out SITE_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ZONE_ID;

  typedef WORD ZONE_ID;
  typedef WORD_out ZONE_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_LC_ID;

  typedef WORD LC_ID;
  typedef WORD_out LC_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_SPEAKER_ID;

  typedef BYTE SPEAKER_ID;
  typedef BYTE_out SPEAKER_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_AUXID;

  typedef DWORD AUXID;
  typedef DWORD_out AUXID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OPID;

  typedef DWORD OPID;
  typedef DWORD_out OPID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UNIT_ID;

  typedef DWORD UNIT_ID;
  typedef DWORD_out UNIT_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_URID;

  typedef DWORD URID;
  typedef DWORD_out URID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_TONE_ID;

  typedef DWORD TONE_ID;
  typedef DWORD_out TONE_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IN_ADDR;

  typedef DWORD IN_ADDR;
  typedef DWORD_out IN_ADDR_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OP_CID;

  typedef WORD OP_CID;
  typedef WORD_out OP_CID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_OP_CAP_INDEX;

  typedef WORD OP_CAP_INDEX;
  typedef WORD_out OP_CAP_INDEX_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RES_CID;

  typedef WORD RES_CID;
  typedef WORD_out RES_CID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RES_CAP_INDEX;

  typedef WORD RES_CAP_INDEX;
  typedef WORD_out RES_CAP_INDEX_out;

  enum EVariantType { eUINT8_T, eUINT16_T, eUINT32_T, eUINT64_T, eINT8_T, eINT16_T, eINT32_T, eINT64_T, eFLOAT32_T, eFLOAT64_T, eBOOLEAN_T, eSEQUENCE_T, eSTRING_T, eWSTRING_T, eEMPTY_T /*, __max_EVariantType=0xffffffff */ };
  typedef EVariantType& EVariantType_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_EVariantType;

  class UVariant;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Parameters;

  class Parameters_var;

  class Parameters : public _CORBA_Unbounded_Sequence_Forward< UVariant >  {
  public:
    typedef Parameters_var _var_type;

    inline Parameters() {}
    Parameters(const Parameters& _s);
    Parameters& operator=(const Parameters& _s);

    inline Parameters(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_Forward< UVariant > (_max) {}
    inline Parameters(_CORBA_ULong _max, _CORBA_ULong _len, UVariant* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_Forward< UVariant > (_max, _len, _val, _rel) {}

  

    virtual ~Parameters();

    UVariant& operator[] (_CORBA_ULong _index);
    const UVariant& operator[] (_CORBA_ULong _index) const;
    static UVariant* allocbuf(_CORBA_ULong _nelems);
    static void freebuf(UVariant* _b);

    void operator>>= (cdrStream &_s) const;
    void operator<<= (cdrStream &_s);

  protected:
    void NP_copybuffer(_CORBA_ULong _newmax);
    void NP_freebuf();
  };

  class Parameters_out;

  class Parameters_var {
  public:
    inline Parameters_var() : _pd_seq(0) {}
    inline Parameters_var(Parameters* _s) : _pd_seq(_s) {}
    inline Parameters_var(const Parameters_var& _s) {
      if( _s._pd_seq )  _pd_seq = new Parameters(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~Parameters_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline Parameters_var& operator = (Parameters* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline Parameters_var& operator = (const Parameters_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new Parameters;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline UVariant& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline Parameters* operator -> () { return _pd_seq; }
    inline const Parameters* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator Parameters& () const { return *_pd_seq; }
#else
    inline operator const Parameters& () const { return *_pd_seq; }
    inline operator Parameters& () { return *_pd_seq; }
#endif
      
    inline const Parameters& in() const { return *_pd_seq; }
    inline Parameters&       inout()    { return *_pd_seq; }
    inline Parameters*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline Parameters* _retn() { Parameters* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class Parameters_out;
    
  private:
    Parameters* _pd_seq;
  };

  class Parameters_out {
  public:
    inline Parameters_out(Parameters*& _s) : _data(_s) { _data = 0; }
    inline Parameters_out(Parameters_var& _s)
      : _data(_s._pd_seq) { _s = (Parameters*) 0; }
    inline Parameters_out(const Parameters_out& _s) : _data(_s._data) {}
    inline Parameters_out& operator = (const Parameters_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline Parameters_out& operator = (Parameters* _s) {
      _data = _s;
      return *this;
    }
    inline operator Parameters*&()  { return _data; }
    inline Parameters*& ptr()       { return _data; }
    inline Parameters* operator->() { return _data; }

    inline UVariant& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    Parameters*& _data;

  private:
    Parameters_out();
    Parameters_out& operator=(const Parameters_var&);
  };

  class UVariant {
  public:

    typedef _CORBA_ConstrType_Variable_Var<UVariant> _var_type;

    

    UVariant(): _pd__initialised(0) {
      
    }
    
    UVariant(const UVariant& _value) {
      _pd__initialised = _value._pd__initialised;
      switch(_value._pd__d) {
        case eUINT8_T: V_UINT8(_value._pd_V_UINT8); break;

        case eUINT16_T: V_UINT16(_value._pd_V_UINT16); break;

        case eUINT32_T: V_UINT32(_value._pd_V_UINT32); break;

        case eUINT64_T: V_UINT64(_value._pd_V_UINT64); break;

        case eINT8_T: V_INT8(_value._pd_V_INT8); break;

        case eINT16_T: V_INT16(_value._pd_V_INT16); break;

        case eINT32_T: V_INT32(_value._pd_V_INT32); break;

        case eINT64_T: V_INT64(_value._pd_V_INT64); break;

        case eFLOAT32_T: V_FLOAT32(_value._pd_V_FLOAT32); break;

        case eFLOAT64_T: V_FLOAT64(_value._pd_V_FLOAT64); break;

        case eBOOLEAN_T: V_BOOLEAN(_value._pd_V_BOOLEAN); break;

        case eSEQUENCE_T: V_SEQUENCE(_value._pd_V_SEQUENCE); break;

        case eSTRING_T: V_STRING(_value._pd_V_STRING); break;

        case eWSTRING_T: V_WSTRING(_value._pd_V_WSTRING); break;

        case eEMPTY_T: V_EMPTY(_value._pd_V_EMPTY); break;

          default: break;

      
      }
      _pd__d = _value._pd__d;
  
    }

    ~UVariant() {}

    UVariant& operator=(const UVariant& _value) {
      _pd__initialised = _value._pd__initialised;
      switch(_value._pd__d) {
        case eUINT8_T: V_UINT8(_value._pd_V_UINT8); break;

        case eUINT16_T: V_UINT16(_value._pd_V_UINT16); break;

        case eUINT32_T: V_UINT32(_value._pd_V_UINT32); break;

        case eUINT64_T: V_UINT64(_value._pd_V_UINT64); break;

        case eINT8_T: V_INT8(_value._pd_V_INT8); break;

        case eINT16_T: V_INT16(_value._pd_V_INT16); break;

        case eINT32_T: V_INT32(_value._pd_V_INT32); break;

        case eINT64_T: V_INT64(_value._pd_V_INT64); break;

        case eFLOAT32_T: V_FLOAT32(_value._pd_V_FLOAT32); break;

        case eFLOAT64_T: V_FLOAT64(_value._pd_V_FLOAT64); break;

        case eBOOLEAN_T: V_BOOLEAN(_value._pd_V_BOOLEAN); break;

        case eSEQUENCE_T: V_SEQUENCE(_value._pd_V_SEQUENCE); break;

        case eSTRING_T: V_STRING(_value._pd_V_STRING); break;

        case eWSTRING_T: V_WSTRING(_value._pd_V_WSTRING); break;

        case eEMPTY_T: V_EMPTY(_value._pd_V_EMPTY); break;

          default: break;

      
      }
      _pd__d = _value._pd__d;
  
      return *this;
    }

    EVariantType _d() const { return _pd__d;}
    void _d(EVariantType _value){
      // illegal to set discriminator before making a member active
      if (!_pd__initialised)
        OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);

      if (_value == _pd__d) return; // no change

      switch (_pd__d){
        case eUINT8_T: goto fail;
        case eUINT16_T: goto fail;
        case eUINT32_T: goto fail;
        case eUINT64_T: goto fail;
        case eINT8_T: goto fail;
        case eINT16_T: goto fail;
        case eINT32_T: goto fail;
        case eINT64_T: goto fail;
        case eFLOAT32_T: goto fail;
        case eFLOAT64_T: goto fail;
        case eBOOLEAN_T: goto fail;
        case eSEQUENCE_T: goto fail;
        case eSTRING_T: goto fail;
        case eWSTRING_T: goto fail;
        case eEMPTY_T: goto fail;
        default: goto fail;

      };
      

      fail:
      OMNIORB_THROW(BAD_PARAM,_OMNI_NS(BAD_PARAM_InvalidUnionDiscValue),::CORBA::COMPLETED_NO);


  
    }

    

    ::CORBA::Octet V_UINT8 () const { return _pd_V_UINT8; }
    void V_UINT8 (::CORBA::Octet  _value) {
      _pd__initialised = 1;
      _pd__d = eUINT8_T;
      _pd__default = 0;
      _pd_V_UINT8 = _value;
    }

    ::CORBA::UShort V_UINT16 () const { return _pd_V_UINT16; }
    void V_UINT16 (::CORBA::UShort  _value) {
      _pd__initialised = 1;
      _pd__d = eUINT16_T;
      _pd__default = 0;
      _pd_V_UINT16 = _value;
    }

    ::CORBA::ULong V_UINT32 () const { return _pd_V_UINT32; }
    void V_UINT32 (::CORBA::ULong  _value) {
      _pd__initialised = 1;
      _pd__d = eUINT32_T;
      _pd__default = 0;
      _pd_V_UINT32 = _value;
    }

    ::CORBA::ULongLong V_UINT64 () const { return _pd_V_UINT64; }
    void V_UINT64 (::CORBA::ULongLong  _value) {
      _pd__initialised = 1;
      _pd__d = eUINT64_T;
      _pd__default = 0;
      _pd_V_UINT64 = _value;
    }

    ::CORBA::Char V_INT8 () const { return _pd_V_INT8; }
    void V_INT8 (::CORBA::Char  _value) {
      _pd__initialised = 1;
      _pd__d = eINT8_T;
      _pd__default = 0;
      _pd_V_INT8 = _value;
    }

    ::CORBA::Short V_INT16 () const { return _pd_V_INT16; }
    void V_INT16 (::CORBA::Short  _value) {
      _pd__initialised = 1;
      _pd__d = eINT16_T;
      _pd__default = 0;
      _pd_V_INT16 = _value;
    }

    ::CORBA::Long V_INT32 () const { return _pd_V_INT32; }
    void V_INT32 (::CORBA::Long  _value) {
      _pd__initialised = 1;
      _pd__d = eINT32_T;
      _pd__default = 0;
      _pd_V_INT32 = _value;
    }

    ::CORBA::LongLong V_INT64 () const { return _pd_V_INT64; }
    void V_INT64 (::CORBA::LongLong  _value) {
      _pd__initialised = 1;
      _pd__d = eINT64_T;
      _pd__default = 0;
      _pd_V_INT64 = _value;
    }

    ::CORBA::Float V_FLOAT32 () const { return _pd_V_FLOAT32; }
    void V_FLOAT32 (::CORBA::Float  _value) {
      _pd__initialised = 1;
      _pd__d = eFLOAT32_T;
      _pd__default = 0;
      _pd_V_FLOAT32 = _value;
    }

    ::CORBA::Double V_FLOAT64 () const { return _pd_V_FLOAT64; }
    void V_FLOAT64 (::CORBA::Double  _value) {
      _pd__initialised = 1;
      _pd__d = eFLOAT64_T;
      _pd__default = 0;
      _pd_V_FLOAT64 = _value;
    }

    ::CORBA::Boolean V_BOOLEAN () const { return _pd_V_BOOLEAN; }
    void V_BOOLEAN (::CORBA::Boolean  _value) {
      _pd__initialised = 1;
      _pd__d = eBOOLEAN_T;
      _pd__default = 0;
      _pd_V_BOOLEAN = _value;
    }

    const Parameters &V_SEQUENCE () const { return _pd_V_SEQUENCE; }
    Parameters &V_SEQUENCE () { return _pd_V_SEQUENCE; }
    void V_SEQUENCE (const Parameters& _value) {
      _pd__initialised = 1;
      _pd__d = eSEQUENCE_T;
      _pd__default = 0;
      _pd_V_SEQUENCE = _value;
    }

    const char * V_STRING () const { return (const char*) _pd_V_STRING; }
    void V_STRING(char* _value) {
      _pd__initialised = 1;
      _pd__d = eSTRING_T;
      _pd__default = 0;
      _pd_V_STRING = _value;
    }
    void V_STRING(const char*  _value) {
      _pd__initialised = 1;
      _pd__d = eSTRING_T;
      _pd__default = 0;
      _pd_V_STRING = _value;
    }
    void V_STRING(const ::CORBA::String_var& _value) {
      _pd__initialised = 1;
      _pd__d = eSTRING_T;
      _pd__default = 0;
      _pd_V_STRING = _value;
    }
    void V_STRING(const ::CORBA::String_member& _value) {
      _pd__initialised = 1;
      _pd__d = eSTRING_T;
      _pd__default = 0;
      _pd_V_STRING = _value;
    }

    const ::CORBA::WChar * V_WSTRING () const {
        return (const ::CORBA::WChar*) _pd_V_WSTRING;
    }
    void V_WSTRING(::CORBA::WChar* _value) {
      _pd__initialised = 1;
      _pd__d = eWSTRING_T;
      _pd__default = 0;
      _pd_V_WSTRING = _value;
    }
    void V_WSTRING(const ::CORBA::WChar*  _value) {
      _pd__initialised = 1;
      _pd__d = eWSTRING_T;
      _pd__default = 0;
      _pd_V_WSTRING = _value;
    }
    void V_WSTRING(const ::CORBA::WString_var& _value) {
      _pd__initialised = 1;
      _pd__d = eWSTRING_T;
      _pd__default = 0;
      _pd_V_WSTRING = _value;
    }
    void V_WSTRING(const ::CORBA::WString_member& _value) {
      _pd__initialised = 1;
      _pd__d = eWSTRING_T;
      _pd__default = 0;
      _pd_V_WSTRING = _value;
    }

    ::CORBA::Octet V_EMPTY () const { return _pd_V_EMPTY; }
    void V_EMPTY (::CORBA::Octet  _value) {
      _pd__initialised = 1;
      _pd__d = eEMPTY_T;
      _pd__default = 0;
      _pd_V_EMPTY = _value;
    }

  
    
    void operator>>= (cdrStream&) const;
    void operator<<= (cdrStream&);

  private:
    EVariantType _pd__d;
    _CORBA_Boolean _pd__default;
    _CORBA_Boolean _pd__initialised;

    union {
      ::CORBA::Octet _pd_V_UINT8;

      ::CORBA::UShort _pd_V_UINT16;

      ::CORBA::ULong _pd_V_UINT32;

      ::CORBA::ULongLong _pd_V_UINT64;

      ::CORBA::Char _pd_V_INT8;

      ::CORBA::Short _pd_V_INT16;

      ::CORBA::Long _pd_V_INT32;

      ::CORBA::LongLong _pd_V_INT64;


#ifndef USING_PROXY_FLOAT
        ::CORBA::Float _pd_V_FLOAT32;
#endif


#ifndef USING_PROXY_FLOAT
        ::CORBA::Double _pd_V_FLOAT64;
#endif

      ::CORBA::Boolean _pd_V_BOOLEAN;

      ::CORBA::Octet _pd_V_EMPTY;


    };

  
    
#ifdef USING_PROXY_FLOAT
      ::CORBA::Float _pd_V_FLOAT32;
#endif


#ifdef USING_PROXY_FLOAT
      ::CORBA::Double _pd_V_FLOAT64;
#endif

    Parameters _pd_V_SEQUENCE;

    ::CORBA::String_member _pd_V_STRING;

    ::CORBA::WString_member _pd_V_WSTRING;

  
  };

  typedef UVariant::_var_type UVariant_var;

  typedef _CORBA_ConstrType_Variable_OUT_arg< UVariant,UVariant_var > UVariant_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_UVariant;

  struct Version {
    typedef _CORBA_ConstrType_Fix_Var<Version> _var_type;

    
    BYTE Major;

    BYTE Minor;

  

    void operator>>= (cdrStream &) const;
    void operator<<= (cdrStream &);
  };

  typedef Version::_var_type Version_var;

  typedef Version& Version_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_Version;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_METHOD_ID;

  typedef ::CORBA::Short METHOD_ID;
  typedef ::CORBA::Short_out METHOD_ID_out;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_RESPONSE_ID;

  typedef WORD RESPONSE_ID;
  typedef WORD_out RESPONSE_ID_out;

#ifndef __MCC7500SDK_mIBaseAPIRequest__
#define __MCC7500SDK_mIBaseAPIRequest__

  class IBaseAPIRequest;
  class _objref_IBaseAPIRequest;
  class _impl_IBaseAPIRequest;
  
  typedef _objref_IBaseAPIRequest* IBaseAPIRequest_ptr;
  typedef IBaseAPIRequest_ptr IBaseAPIRequestRef;

  class IBaseAPIRequest_Helper {
  public:
    typedef IBaseAPIRequest_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IBaseAPIRequest, IBaseAPIRequest_Helper> IBaseAPIRequest_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IBaseAPIRequest,IBaseAPIRequest_Helper > IBaseAPIRequest_out;

#endif

#ifndef __MCC7500SDK_mIAPIResponse__
#define __MCC7500SDK_mIAPIResponse__

  class IAPIResponse;
  class _objref_IAPIResponse;
  class _impl_IAPIResponse;
  
  typedef _objref_IAPIResponse* IAPIResponse_ptr;
  typedef IAPIResponse_ptr IAPIResponseRef;

  class IAPIResponse_Helper {
  public:
    typedef IAPIResponse_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IAPIResponse, IAPIResponse_Helper> IAPIResponse_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IAPIResponse,IAPIResponse_Helper > IAPIResponse_out;

#endif

  // interface IAPIResponse
  class IAPIResponse {
  public:
    // Declarations for this interface type.
    typedef IAPIResponse_ptr _ptr_type;
    typedef IAPIResponse_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_IAPIResponse :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    void CallBack(const ::MCC7500SDK::Parameters& Message);

    inline _objref_IAPIResponse()  { _PR_setobj(0); }  // nil
    _objref_IAPIResponse(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IAPIResponse();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IAPIResponse(const _objref_IAPIResponse&);
    _objref_IAPIResponse& operator = (const _objref_IAPIResponse&);
    // not implemented

    friend class IAPIResponse;
  };

  class _pof_IAPIResponse : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IAPIResponse() : _OMNI_NS(proxyObjectFactory)(IAPIResponse::_PD_repoId) {}
    virtual ~_pof_IAPIResponse();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IAPIResponse :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IAPIResponse();

    virtual void CallBack(const ::MCC7500SDK::Parameters& Message) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IAPIResponse;

#ifndef __MCC7500SDK_mIAPIRequestServer__
#define __MCC7500SDK_mIAPIRequestServer__

  class IAPIRequestServer;
  class _objref_IAPIRequestServer;
  class _impl_IAPIRequestServer;
  
  typedef _objref_IAPIRequestServer* IAPIRequestServer_ptr;
  typedef IAPIRequestServer_ptr IAPIRequestServerRef;

  class IAPIRequestServer_Helper {
  public:
    typedef IAPIRequestServer_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IAPIRequestServer, IAPIRequestServer_Helper> IAPIRequestServer_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IAPIRequestServer,IAPIRequestServer_Helper > IAPIRequestServer_out;

#endif

  // interface IAPIRequestServer
  class IAPIRequestServer {
  public:
    // Declarations for this interface type.
    typedef IAPIRequestServer_ptr _ptr_type;
    typedef IAPIRequestServer_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class AnotherUserAlreadyRegistered : public ::CORBA::UserException {
    public:
      
      

      inline AnotherUserAlreadyRegistered() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      AnotherUserAlreadyRegistered(const AnotherUserAlreadyRegistered&);
      
      AnotherUserAlreadyRegistered& operator=(const AnotherUserAlreadyRegistered&);
      virtual ~AnotherUserAlreadyRegistered();
      virtual void _raise() const;
      static AnotherUserAlreadyRegistered* _downcast(::CORBA::Exception*);
      static const AnotherUserAlreadyRegistered* _downcast(const ::CORBA::Exception*);
      static inline AnotherUserAlreadyRegistered* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_AnotherUserAlreadyRegistered;

    class RegistrationInternalFail : public ::CORBA::UserException {
    public:
      
      ::CORBA::Long ErrorCode;

    

      inline RegistrationInternalFail() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      RegistrationInternalFail(const RegistrationInternalFail&);
      RegistrationInternalFail(::CORBA::Long i_ErrorCode);
      RegistrationInternalFail& operator=(const RegistrationInternalFail&);
      virtual ~RegistrationInternalFail();
      virtual void _raise() const;
      static RegistrationInternalFail* _downcast(::CORBA::Exception*);
      static const RegistrationInternalFail* _downcast(const ::CORBA::Exception*);
      static inline RegistrationInternalFail* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_RegistrationInternalFail;

    class UnsupportedVersion : public ::CORBA::UserException {
    public:
      
      

      inline UnsupportedVersion() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      UnsupportedVersion(const UnsupportedVersion&);
      
      UnsupportedVersion& operator=(const UnsupportedVersion&);
      virtual ~UnsupportedVersion();
      virtual void _raise() const;
      static UnsupportedVersion* _downcast(::CORBA::Exception*);
      static const UnsupportedVersion* _downcast(const ::CORBA::Exception*);
      static inline UnsupportedVersion* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_UnsupportedVersion;

    class UnknownClientID : public ::CORBA::UserException {
    public:
      
      

      inline UnknownClientID() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      UnknownClientID(const UnknownClientID&);
      
      UnknownClientID& operator=(const UnknownClientID&);
      virtual ~UnknownClientID();
      virtual void _raise() const;
      static UnknownClientID* _downcast(::CORBA::Exception*);
      static const UnknownClientID* _downcast(const ::CORBA::Exception*);
      static inline UnknownClientID* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_UnknownClientID;

  
  };

  class _objref_IAPIRequestServer :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    BYTE RegisterApp(::MCC7500SDK::IAPIResponse_ptr ClientCallback);
    BOOL DeregisterApp(::MCC7500SDK::BYTE clientId);
    BOOL AuthenticateUser(const ::CORBA::WChar* UserName, const ::CORBA::WChar* Password, ::MCC7500SDK::BYTE ClientID, const ::CORBA::WChar* UserID);
    IBaseAPIRequest_ptr GetAPIRequest(::MCC7500SDK::BYTE ClientID, const ::MCC7500SDK::Version& ClientRequestedVersion);
    Version ServerVersion();

    inline _objref_IAPIRequestServer()  { _PR_setobj(0); }  // nil
    _objref_IAPIRequestServer(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IAPIRequestServer();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IAPIRequestServer(const _objref_IAPIRequestServer&);
    _objref_IAPIRequestServer& operator = (const _objref_IAPIRequestServer&);
    // not implemented

    friend class IAPIRequestServer;
  };

  class _pof_IAPIRequestServer : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IAPIRequestServer() : _OMNI_NS(proxyObjectFactory)(IAPIRequestServer::_PD_repoId) {}
    virtual ~_pof_IAPIRequestServer();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IAPIRequestServer :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IAPIRequestServer();

    virtual BYTE RegisterApp(::MCC7500SDK::IAPIResponse_ptr ClientCallback) = 0;
    virtual BOOL DeregisterApp(::MCC7500SDK::BYTE clientId) = 0;
    virtual BOOL AuthenticateUser(const ::CORBA::WChar* UserName, const ::CORBA::WChar* Password, ::MCC7500SDK::BYTE ClientID, const ::CORBA::WChar* UserID) = 0;
    virtual IBaseAPIRequest_ptr GetAPIRequest(::MCC7500SDK::BYTE ClientID, const ::MCC7500SDK::Version& ClientRequestedVersion) = 0;
    virtual Version ServerVersion() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IAPIRequestServer;

#ifndef __MCC7500SDK_mIBaseAPIRequest__
#define __MCC7500SDK_mIBaseAPIRequest__

  class IBaseAPIRequest;
  class _objref_IBaseAPIRequest;
  class _impl_IBaseAPIRequest;
  
  typedef _objref_IBaseAPIRequest* IBaseAPIRequest_ptr;
  typedef IBaseAPIRequest_ptr IBaseAPIRequestRef;

  class IBaseAPIRequest_Helper {
  public:
    typedef IBaseAPIRequest_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IBaseAPIRequest, IBaseAPIRequest_Helper> IBaseAPIRequest_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IBaseAPIRequest,IBaseAPIRequest_Helper > IBaseAPIRequest_out;

#endif

  // interface IBaseAPIRequest
  class IBaseAPIRequest {
  public:
    // Declarations for this interface type.
    typedef IBaseAPIRequest_ptr _ptr_type;
    typedef IBaseAPIRequest_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    
  };

  class _objref_IBaseAPIRequest :
    public virtual ::CORBA::Object,
    public virtual omniObjRef
  {
  public:
    Version Ver();

    inline _objref_IBaseAPIRequest()  { _PR_setobj(0); }  // nil
    _objref_IBaseAPIRequest(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IBaseAPIRequest();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IBaseAPIRequest(const _objref_IBaseAPIRequest&);
    _objref_IBaseAPIRequest& operator = (const _objref_IBaseAPIRequest&);
    // not implemented

    friend class IBaseAPIRequest;
  };

  class _pof_IBaseAPIRequest : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IBaseAPIRequest() : _OMNI_NS(proxyObjectFactory)(IBaseAPIRequest::_PD_repoId) {}
    virtual ~_pof_IBaseAPIRequest();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IBaseAPIRequest :
    public virtual omniServant
  {
  public:
    virtual ~_impl_IBaseAPIRequest();

    virtual Version Ver() = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IBaseAPIRequest;

#ifndef __MCC7500SDK_mIAPIRequest__
#define __MCC7500SDK_mIAPIRequest__

  class IAPIRequest;
  class _objref_IAPIRequest;
  class _impl_IAPIRequest;
  
  typedef _objref_IAPIRequest* IAPIRequest_ptr;
  typedef IAPIRequest_ptr IAPIRequestRef;

  class IAPIRequest_Helper {
  public:
    typedef IAPIRequest_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IAPIRequest, IAPIRequest_Helper> IAPIRequest_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IAPIRequest,IAPIRequest_Helper > IAPIRequest_out;

#endif

  // interface IAPIRequest
  class IAPIRequest {
  public:
    // Declarations for this interface type.
    typedef IAPIRequest_ptr _ptr_type;
    typedef IAPIRequest_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class UnknownApiRequest : public ::CORBA::UserException {
    public:
      
      METHOD_ID methodId;

    

      inline UnknownApiRequest() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      UnknownApiRequest(const UnknownApiRequest&);
      UnknownApiRequest(METHOD_ID i_methodId);
      UnknownApiRequest& operator=(const UnknownApiRequest&);
      virtual ~UnknownApiRequest();
      virtual void _raise() const;
      static UnknownApiRequest* _downcast(::CORBA::Exception*);
      static const UnknownApiRequest* _downcast(const ::CORBA::Exception*);
      static inline UnknownApiRequest* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_UnknownApiRequest;

    class ParameterTypeMismatch : public ::CORBA::UserException {
    public:
      
      ::CORBA::Octet parameter_num;

      EVariantType actual;

      EVariantType expected;

      METHOD_ID methodId;

    

      inline ParameterTypeMismatch() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ParameterTypeMismatch(const ParameterTypeMismatch&);
      ParameterTypeMismatch(::CORBA::Octet i_parameter_num, EVariantType i_actual, EVariantType i_expected, METHOD_ID i_methodId);
      ParameterTypeMismatch& operator=(const ParameterTypeMismatch&);
      virtual ~ParameterTypeMismatch();
      virtual void _raise() const;
      static ParameterTypeMismatch* _downcast(::CORBA::Exception*);
      static const ParameterTypeMismatch* _downcast(const ::CORBA::Exception*);
      static inline ParameterTypeMismatch* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ParameterTypeMismatch;

    class ParameterCountMismatch : public ::CORBA::UserException {
    public:
      
      ::CORBA::Octet actual;

      ::CORBA::Octet expected;

      METHOD_ID methodId;

    

      inline ParameterCountMismatch() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ParameterCountMismatch(const ParameterCountMismatch&);
      ParameterCountMismatch(::CORBA::Octet i_actual, ::CORBA::Octet i_expected, METHOD_ID i_methodId);
      ParameterCountMismatch& operator=(const ParameterCountMismatch&);
      virtual ~ParameterCountMismatch();
      virtual void _raise() const;
      static ParameterCountMismatch* _downcast(::CORBA::Exception*);
      static const ParameterCountMismatch* _downcast(const ::CORBA::Exception*);
      static inline ParameterCountMismatch* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ParameterCountMismatch;

    class ApiRequestInternalFail : public ::CORBA::UserException {
    public:
      
      ::CORBA::Long ErrorCode;

      METHOD_ID methodId;

    

      inline ApiRequestInternalFail() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ApiRequestInternalFail(const ApiRequestInternalFail&);
      ApiRequestInternalFail(::CORBA::Long i_ErrorCode, METHOD_ID i_methodId);
      ApiRequestInternalFail& operator=(const ApiRequestInternalFail&);
      virtual ~ApiRequestInternalFail();
      virtual void _raise() const;
      static ApiRequestInternalFail* _downcast(::CORBA::Exception*);
      static const ApiRequestInternalFail* _downcast(const ::CORBA::Exception*);
      static inline ApiRequestInternalFail* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ApiRequestInternalFail;

  
  };

  class _objref_IAPIRequest :
    public virtual _objref_IBaseAPIRequest
  {
  public:
    void ApiRequest(::MCC7500SDK::METHOD_ID methodId, const ::MCC7500SDK::Parameters& paramListIn, ::MCC7500SDK::Parameters_out paramListOut, ::MCC7500SDK::UVariant_out returnValue);

    inline _objref_IAPIRequest()  { _PR_setobj(0); }  // nil
    _objref_IAPIRequest(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IAPIRequest();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IAPIRequest(const _objref_IAPIRequest&);
    _objref_IAPIRequest& operator = (const _objref_IAPIRequest&);
    // not implemented

    friend class IAPIRequest;
  };

  class _pof_IAPIRequest : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IAPIRequest() : _OMNI_NS(proxyObjectFactory)(IAPIRequest::_PD_repoId) {}
    virtual ~_pof_IAPIRequest();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IAPIRequest :
    public virtual _impl_IBaseAPIRequest
  {
  public:
    virtual ~_impl_IAPIRequest();

    virtual void ApiRequest(::MCC7500SDK::METHOD_ID methodId, const ::MCC7500SDK::Parameters& paramListIn, ::MCC7500SDK::Parameters_out paramListOut, ::MCC7500SDK::UVariant_out returnValue) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IAPIRequest;

  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_ResponseIDs;

  class ResponseIDs_var;

  class ResponseIDs : public _CORBA_Unbounded_Sequence_w_FixSizeElement< RESPONSE_ID, 2, 2 >  {
  public:
    typedef ResponseIDs_var _var_type;
    inline ResponseIDs() {}
    inline ResponseIDs(const ResponseIDs& _s)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< RESPONSE_ID, 2, 2 > (_s) {}

    inline ResponseIDs(_CORBA_ULong _max)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< RESPONSE_ID, 2, 2 > (_max) {}
    inline ResponseIDs(_CORBA_ULong _max, _CORBA_ULong _len, RESPONSE_ID* _val, _CORBA_Boolean _rel=0)
      : _CORBA_Unbounded_Sequence_w_FixSizeElement< RESPONSE_ID, 2, 2 > (_max, _len, _val, _rel) {}

  

    inline ResponseIDs& operator = (const ResponseIDs& _s) {
      _CORBA_Unbounded_Sequence_w_FixSizeElement< RESPONSE_ID, 2, 2 > ::operator=(_s);
      return *this;
    }
  };

  class ResponseIDs_out;

  class ResponseIDs_var {
  public:
    inline ResponseIDs_var() : _pd_seq(0) {}
    inline ResponseIDs_var(ResponseIDs* _s) : _pd_seq(_s) {}
    inline ResponseIDs_var(const ResponseIDs_var& _s) {
      if( _s._pd_seq )  _pd_seq = new ResponseIDs(*_s._pd_seq);
      else              _pd_seq = 0;
    }
    inline ~ResponseIDs_var() { if( _pd_seq )  delete _pd_seq; }
      
    inline ResponseIDs_var& operator = (ResponseIDs* _s) {
      if( _pd_seq )  delete _pd_seq;
      _pd_seq = _s;
      return *this;
    }
    inline ResponseIDs_var& operator = (const ResponseIDs_var& _s) {
      if( _s._pd_seq ) {
        if( !_pd_seq )  _pd_seq = new ResponseIDs;
        *_pd_seq = *_s._pd_seq;
      } else if( _pd_seq ) {
        delete _pd_seq;
        _pd_seq = 0;
      }
      return *this;
    }
    inline RESPONSE_ID& operator [] (_CORBA_ULong _s) {
      return (*_pd_seq)[_s];
    }

  

    inline ResponseIDs* operator -> () { return _pd_seq; }
    inline const ResponseIDs* operator -> () const { return _pd_seq; }
#if defined(__GNUG__)
    inline operator ResponseIDs& () const { return *_pd_seq; }
#else
    inline operator const ResponseIDs& () const { return *_pd_seq; }
    inline operator ResponseIDs& () { return *_pd_seq; }
#endif
      
    inline const ResponseIDs& in() const { return *_pd_seq; }
    inline ResponseIDs&       inout()    { return *_pd_seq; }
    inline ResponseIDs*&      out() {
      if( _pd_seq ) { delete _pd_seq; _pd_seq = 0; }
      return _pd_seq;
    }
    inline ResponseIDs* _retn() { ResponseIDs* tmp = _pd_seq; _pd_seq = 0; return tmp; }
      
    friend class ResponseIDs_out;
    
  private:
    ResponseIDs* _pd_seq;
  };

  class ResponseIDs_out {
  public:
    inline ResponseIDs_out(ResponseIDs*& _s) : _data(_s) { _data = 0; }
    inline ResponseIDs_out(ResponseIDs_var& _s)
      : _data(_s._pd_seq) { _s = (ResponseIDs*) 0; }
    inline ResponseIDs_out(const ResponseIDs_out& _s) : _data(_s._data) {}
    inline ResponseIDs_out& operator = (const ResponseIDs_out& _s) {
      _data = _s._data;
      return *this;
    }
    inline ResponseIDs_out& operator = (ResponseIDs* _s) {
      _data = _s;
      return *this;
    }
    inline operator ResponseIDs*&()  { return _data; }
    inline ResponseIDs*& ptr()       { return _data; }
    inline ResponseIDs* operator->() { return _data; }

    inline RESPONSE_ID& operator [] (_CORBA_ULong _i) {
      return (*_data)[_i];
    }

  

    ResponseIDs*& _data;

  private:
    ResponseIDs_out();
    ResponseIDs_out& operator=(const ResponseIDs_var&);
  };

#ifndef __MCC7500SDK_mIAPIRequest2__
#define __MCC7500SDK_mIAPIRequest2__

  class IAPIRequest2;
  class _objref_IAPIRequest2;
  class _impl_IAPIRequest2;
  
  typedef _objref_IAPIRequest2* IAPIRequest2_ptr;
  typedef IAPIRequest2_ptr IAPIRequest2Ref;

  class IAPIRequest2_Helper {
  public:
    typedef IAPIRequest2_ptr _ptr_type;

    static _ptr_type _nil();
    static _CORBA_Boolean is_nil(_ptr_type);
    static void release(_ptr_type);
    static void duplicate(_ptr_type);
    static void marshalObjRef(_ptr_type, cdrStream&);
    static _ptr_type unmarshalObjRef(cdrStream&);
  };

  typedef _CORBA_ObjRef_Var<_objref_IAPIRequest2, IAPIRequest2_Helper> IAPIRequest2_var;
  typedef _CORBA_ObjRef_OUT_arg<_objref_IAPIRequest2,IAPIRequest2_Helper > IAPIRequest2_out;

#endif

  // interface IAPIRequest2
  class IAPIRequest2 {
  public:
    // Declarations for this interface type.
    typedef IAPIRequest2_ptr _ptr_type;
    typedef IAPIRequest2_var _var_type;

    static _ptr_type _duplicate(_ptr_type);
    static _ptr_type _narrow(::CORBA::Object_ptr);
    static _ptr_type _unchecked_narrow(::CORBA::Object_ptr);
    
    static _ptr_type _nil();

    static inline void _marshalObjRef(_ptr_type, cdrStream&);

    static inline _ptr_type _unmarshalObjRef(cdrStream& s) {
      omniObjRef* o = omniObjRef::_unMarshal(_PD_repoId,s);
      if (o)
        return (_ptr_type) o->_ptrToObjRef(_PD_repoId);
      else
        return _nil();
    }

    static _core_attr const char* _PD_repoId;

    // Other IDL defined within this scope.
    class InvalidResponseIdException : public ::CORBA::UserException {
    public:
      
      RESPONSE_ID responseID;

    

      inline InvalidResponseIdException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      InvalidResponseIdException(const InvalidResponseIdException&);
      InvalidResponseIdException(RESPONSE_ID i_responseID);
      InvalidResponseIdException& operator=(const InvalidResponseIdException&);
      virtual ~InvalidResponseIdException();
      virtual void _raise() const;
      static InvalidResponseIdException* _downcast(::CORBA::Exception*);
      static const InvalidResponseIdException* _downcast(const ::CORBA::Exception*);
      static inline InvalidResponseIdException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_InvalidResponseIdException;

    class FilterInternalFailureException : public ::CORBA::UserException {
    public:
      
      ::CORBA::Long errorCode;

      RESPONSE_ID responseID;

    

      inline FilterInternalFailureException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      FilterInternalFailureException(const FilterInternalFailureException&);
      FilterInternalFailureException(::CORBA::Long i_errorCode, RESPONSE_ID i_responseID);
      FilterInternalFailureException& operator=(const FilterInternalFailureException&);
      virtual ~FilterInternalFailureException();
      virtual void _raise() const;
      static FilterInternalFailureException* _downcast(::CORBA::Exception*);
      static const FilterInternalFailureException* _downcast(const ::CORBA::Exception*);
      static inline FilterInternalFailureException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      void operator>>=(cdrStream&) const ;
      void operator<<=(cdrStream&) ;

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_FilterInternalFailureException;

    class ClientNotRegisteredException : public ::CORBA::UserException {
    public:
      
      

      inline ClientNotRegisteredException() {
        pd_insertToAnyFn    = insertToAnyFn;
        pd_insertToAnyFnNCP = insertToAnyFnNCP;
      }
      ClientNotRegisteredException(const ClientNotRegisteredException&);
      
      ClientNotRegisteredException& operator=(const ClientNotRegisteredException&);
      virtual ~ClientNotRegisteredException();
      virtual void _raise() const;
      static ClientNotRegisteredException* _downcast(::CORBA::Exception*);
      static const ClientNotRegisteredException* _downcast(const ::CORBA::Exception*);
      static inline ClientNotRegisteredException* _narrow(::CORBA::Exception* _e) {
        return _downcast(_e);
      }
      
      inline void operator>>=(cdrStream&) const { }
      inline void operator<<=(cdrStream&) { }

      static _core_attr insertExceptionToAny    insertToAnyFn;
      static _core_attr insertExceptionToAnyNCP insertToAnyFnNCP;

      virtual ::CORBA::Exception* _NP_duplicate() const;

      static _core_attr const char* _PD_repoId;
      static _core_attr const char* _PD_typeId;

    private:
      virtual const char* _NP_typeId() const;
      virtual const char* _NP_repoId(int*) const;
      virtual void _NP_marshal(cdrStream&) const;
    };

    static _dyn_attr const ::CORBA::TypeCode_ptr _tc_ClientNotRegisteredException;

  
  };

  class _objref_IAPIRequest2 :
    public virtual _objref_IAPIRequest
  {
  public:
    void FilterAPIResponse(const ::MCC7500SDK::ResponseIDs& msgResponseIDs);
    void UnfilterAPIResponse(const ::MCC7500SDK::ResponseIDs& msgResponseIDs);
    void UnfilterAllAPIResponses();
    void GetFilteredAPIResponses(::MCC7500SDK::ResponseIDs_out msgResponseIDs);

    inline _objref_IAPIRequest2()  { _PR_setobj(0); }  // nil
    _objref_IAPIRequest2(omniIOR*, omniIdentity*);

  protected:
    virtual ~_objref_IAPIRequest2();

    
  private:
    virtual void* _ptrToObjRef(const char*);

    _objref_IAPIRequest2(const _objref_IAPIRequest2&);
    _objref_IAPIRequest2& operator = (const _objref_IAPIRequest2&);
    // not implemented

    friend class IAPIRequest2;
  };

  class _pof_IAPIRequest2 : public _OMNI_NS(proxyObjectFactory) {
  public:
    inline _pof_IAPIRequest2() : _OMNI_NS(proxyObjectFactory)(IAPIRequest2::_PD_repoId) {}
    virtual ~_pof_IAPIRequest2();

    virtual omniObjRef* newObjRef(omniIOR*,omniIdentity*);
    virtual _CORBA_Boolean is_a(const char*) const;
  };

  class _impl_IAPIRequest2 :
    public virtual _impl_IAPIRequest
  {
  public:
    virtual ~_impl_IAPIRequest2();

    virtual void FilterAPIResponse(const ::MCC7500SDK::ResponseIDs& msgResponseIDs) = 0;
    virtual void UnfilterAPIResponse(const ::MCC7500SDK::ResponseIDs& msgResponseIDs) = 0;
    virtual void UnfilterAllAPIResponses() = 0;
    virtual void GetFilteredAPIResponses(::MCC7500SDK::ResponseIDs_out msgResponseIDs) = 0;
    
  public:  // Really protected, workaround for xlC
    virtual _CORBA_Boolean _dispatch(omniCallHandle&);

  private:
    virtual void* _ptrToInterface(const char*);
    virtual const char* _mostDerivedRepoId();
    
  };


  _CORBA_MODULE_VAR _dyn_attr const ::CORBA::TypeCode_ptr _tc_IAPIRequest2;

_CORBA_MODULE_END



_CORBA_MODULE POA_MCC7500SDK
_CORBA_MODULE_BEG

  class IAPIResponse :
    public virtual MCC7500SDK::_impl_IAPIResponse,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IAPIResponse();

    inline ::MCC7500SDK::IAPIResponse_ptr _this() {
      return (::MCC7500SDK::IAPIResponse_ptr) _do_this(::MCC7500SDK::IAPIResponse::_PD_repoId);
    }
  };

  class IAPIRequestServer :
    public virtual MCC7500SDK::_impl_IAPIRequestServer,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IAPIRequestServer();

    inline ::MCC7500SDK::IAPIRequestServer_ptr _this() {
      return (::MCC7500SDK::IAPIRequestServer_ptr) _do_this(::MCC7500SDK::IAPIRequestServer::_PD_repoId);
    }
  };

  class IBaseAPIRequest :
    public virtual MCC7500SDK::_impl_IBaseAPIRequest,
    public virtual ::PortableServer::ServantBase
  {
  public:
    virtual ~IBaseAPIRequest();

    inline ::MCC7500SDK::IBaseAPIRequest_ptr _this() {
      return (::MCC7500SDK::IBaseAPIRequest_ptr) _do_this(::MCC7500SDK::IBaseAPIRequest::_PD_repoId);
    }
  };

  class IAPIRequest :
    public virtual MCC7500SDK::_impl_IAPIRequest,
    public virtual IBaseAPIRequest
  {
  public:
    virtual ~IAPIRequest();

    inline ::MCC7500SDK::IAPIRequest_ptr _this() {
      return (::MCC7500SDK::IAPIRequest_ptr) _do_this(::MCC7500SDK::IAPIRequest::_PD_repoId);
    }
  };

  class IAPIRequest2 :
    public virtual MCC7500SDK::_impl_IAPIRequest2,
    public virtual IAPIRequest
  {
  public:
    virtual ~IAPIRequest2();

    inline ::MCC7500SDK::IAPIRequest2_ptr _this() {
      return (::MCC7500SDK::IAPIRequest2_ptr) _do_this(::MCC7500SDK::IAPIRequest2::_PD_repoId);
    }
  };

_CORBA_MODULE_END



_CORBA_MODULE OBV_MCC7500SDK
_CORBA_MODULE_BEG

_CORBA_MODULE_END





#undef _core_attr
#undef _dyn_attr

inline void operator >>=(MCC7500SDK::EVariantType _e, cdrStream& s) {
  ::operator>>=((::CORBA::ULong)_e, s);
}

inline void operator <<= (MCC7500SDK::EVariantType& _e, cdrStream& s) {
  ::CORBA::ULong _0RL_e;
  ::operator<<=(_0RL_e,s);
  if (_0RL_e <= MCC7500SDK::eEMPTY_T) {
    _e = (MCC7500SDK::EVariantType) _0RL_e;
  }
  else {
    OMNIORB_THROW(MARSHAL,_OMNI_NS(MARSHAL_InvalidEnumValue),
                  (::CORBA::CompletionStatus)s.completion());
  }
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::EVariantType _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::EVariantType& _s);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::Parameters& _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::Parameters* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::Parameters*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::Parameters*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::UVariant& _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::UVariant* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::UVariant*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::UVariant*& _sp);

extern void operator<<=(::CORBA::Any& _a, const MCC7500SDK::Version& _s);
extern void operator<<=(::CORBA::Any& _a, MCC7500SDK::Version* _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::Version*& _sp);
extern _CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::Version*& _sp);

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIResponse_ptr _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIResponse_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIResponse_ptr& _s);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnsupportedVersion& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnsupportedVersion*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnknownClientID& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnknownClientID* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnknownClientID*& _sp);

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequestServer_ptr _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequestServer_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIRequestServer_ptr& _s);

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IBaseAPIRequest_ptr _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IBaseAPIRequest_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IBaseAPIRequest_ptr& _s);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::UnknownApiRequest& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::UnknownApiRequest* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::UnknownApiRequest*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterTypeMismatch& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterTypeMismatch*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterCountMismatch& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterCountMismatch* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterCountMismatch*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ApiRequestInternalFail& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ApiRequestInternalFail*& _sp);

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest_ptr _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIRequest_ptr& _s);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::ResponseIDs& _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::ResponseIDs* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::ResponseIDs*& _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::ResponseIDs*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::InvalidResponseIdException& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::InvalidResponseIdException*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::FilterInternalFailureException& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::FilterInternalFailureException*& _sp);

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& _s);
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _sp);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*& _sp);

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest2_ptr _s);
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest2_ptr* _s);
_CORBA_Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIRequest2_ptr& _s);



inline void
MCC7500SDK::IAPIResponse::_marshalObjRef(::MCC7500SDK::IAPIResponse_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
MCC7500SDK::IAPIRequestServer::_marshalObjRef(::MCC7500SDK::IAPIRequestServer_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
MCC7500SDK::IBaseAPIRequest::_marshalObjRef(::MCC7500SDK::IBaseAPIRequest_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
MCC7500SDK::IAPIRequest::_marshalObjRef(::MCC7500SDK::IAPIRequest_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}


inline void
MCC7500SDK::IAPIRequest2::_marshalObjRef(::MCC7500SDK::IAPIRequest2_ptr obj, cdrStream& s) {
  omniObjRef::_marshal(obj->_PR_getobj(),s);
}




#ifdef   USE_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
# undef  USE_stub_in_nt_dll
# undef  USE_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
#endif
#ifdef   USE_core_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
# undef  USE_core_stub_in_nt_dll
# undef  USE_core_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
#endif
#ifdef   USE_dyn_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
# undef  USE_dyn_stub_in_nt_dll
# undef  USE_dyn_stub_in_nt_dll_NOT_DEFINED_RemoteAPI
#endif

#endif  // __RemoteAPI_hh__

