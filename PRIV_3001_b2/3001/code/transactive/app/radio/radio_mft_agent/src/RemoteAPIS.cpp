// This file is generated by omniidl (C++ backend) - omniORB_4_1. Do not edit.

#include "RemoteAPI.h"

OMNI_USING_NAMESPACE(omni)

static const char* _0RL_dyn_library_version = omniORB_4_1_dyn;

static ::CORBA::TypeCode::_Tracker _0RL_tcTrack(__FILE__);

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mDWORD = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/DWORD:1.0", "DWORD", CORBA::TypeCode::PR_ulong_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_DWORD = _0RL_tc_MCC7500SDK_mDWORD;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_DWORD = _0RL_tc_MCC7500SDK_mDWORD;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mWORD = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/WORD:1.0", "WORD", CORBA::TypeCode::PR_ushort_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_WORD = _0RL_tc_MCC7500SDK_mWORD;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_WORD = _0RL_tc_MCC7500SDK_mWORD;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mBYTE = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/BYTE:1.0", "BYTE", CORBA::TypeCode::PR_octet_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_BYTE = _0RL_tc_MCC7500SDK_mBYTE;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_BYTE = _0RL_tc_MCC7500SDK_mBYTE;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mBOOL = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/BOOL:1.0", "BOOL", CORBA::TypeCode::PR_boolean_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_BOOL = _0RL_tc_MCC7500SDK_mBOOL;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_BOOL = _0RL_tc_MCC7500SDK_mBOOL;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mHANDLE = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/HANDLE:1.0", "HANDLE", CORBA::TypeCode::PR_long_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_HANDLE = _0RL_tc_MCC7500SDK_mHANDLE;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_HANDLE = _0RL_tc_MCC7500SDK_mHANDLE;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mRID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/RID:1.0", "RID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_RID = _0RL_tc_MCC7500SDK_mRID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_RID = _0RL_tc_MCC7500SDK_mRID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mUSER__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/USER_ID:1.0", "USER_ID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_USER_ID = _0RL_tc_MCC7500SDK_mUSER__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_USER_ID = _0RL_tc_MCC7500SDK_mUSER__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mSITE__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/SITE_ID:1.0", "SITE_ID", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_SITE_ID = _0RL_tc_MCC7500SDK_mSITE__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_SITE_ID = _0RL_tc_MCC7500SDK_mSITE__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mZONE__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/ZONE_ID:1.0", "ZONE_ID", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_ZONE_ID = _0RL_tc_MCC7500SDK_mZONE__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_ZONE_ID = _0RL_tc_MCC7500SDK_mZONE__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mLC__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/LC_ID:1.0", "LC_ID", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_LC_ID = _0RL_tc_MCC7500SDK_mLC__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_LC_ID = _0RL_tc_MCC7500SDK_mLC__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mSPEAKER__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/SPEAKER_ID:1.0", "SPEAKER_ID", _0RL_tc_MCC7500SDK_mBYTE, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_SPEAKER_ID = _0RL_tc_MCC7500SDK_mSPEAKER__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_SPEAKER_ID = _0RL_tc_MCC7500SDK_mSPEAKER__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mAUXID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/AUXID:1.0", "AUXID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_AUXID = _0RL_tc_MCC7500SDK_mAUXID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_AUXID = _0RL_tc_MCC7500SDK_mAUXID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mOPID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/OPID:1.0", "OPID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_OPID = _0RL_tc_MCC7500SDK_mOPID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_OPID = _0RL_tc_MCC7500SDK_mOPID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mUNIT__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/UNIT_ID:1.0", "UNIT_ID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_UNIT_ID = _0RL_tc_MCC7500SDK_mUNIT__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_UNIT_ID = _0RL_tc_MCC7500SDK_mUNIT__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mURID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/URID:1.0", "URID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_URID = _0RL_tc_MCC7500SDK_mURID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_URID = _0RL_tc_MCC7500SDK_mURID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mTONE__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/TONE_ID:1.0", "TONE_ID", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_TONE_ID = _0RL_tc_MCC7500SDK_mTONE__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_TONE_ID = _0RL_tc_MCC7500SDK_mTONE__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIN__ADDR = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/IN_ADDR:1.0", "IN_ADDR", _0RL_tc_MCC7500SDK_mDWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_IN_ADDR = _0RL_tc_MCC7500SDK_mIN__ADDR;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_IN_ADDR = _0RL_tc_MCC7500SDK_mIN__ADDR;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mOP__CID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/OP_CID:1.0", "OP_CID", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_OP_CID = _0RL_tc_MCC7500SDK_mOP__CID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_OP_CID = _0RL_tc_MCC7500SDK_mOP__CID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mOP__CAP__INDEX = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/OP_CAP_INDEX:1.0", "OP_CAP_INDEX", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_OP_CAP_INDEX = _0RL_tc_MCC7500SDK_mOP__CAP__INDEX;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_OP_CAP_INDEX = _0RL_tc_MCC7500SDK_mOP__CAP__INDEX;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mRES__CID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/RES_CID:1.0", "RES_CID", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_RES_CID = _0RL_tc_MCC7500SDK_mRES__CID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_RES_CID = _0RL_tc_MCC7500SDK_mRES__CID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mRES__CAP__INDEX = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/RES_CAP_INDEX:1.0", "RES_CAP_INDEX", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_RES_CAP_INDEX = _0RL_tc_MCC7500SDK_mRES__CAP__INDEX;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_RES_CAP_INDEX = _0RL_tc_MCC7500SDK_mRES__CAP__INDEX;
#endif

static const char* _0RL_enumMember_MCC7500SDK_mEVariantType[] = { "eUINT8_T", "eUINT16_T", "eUINT32_T", "eUINT64_T", "eINT8_T", "eINT16_T", "eINT32_T", "eINT64_T", "eFLOAT32_T", "eFLOAT64_T", "eBOOLEAN_T", "eSEQUENCE_T", "eSTRING_T", "eWSTRING_T", "eEMPTY_T" };
static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mEVariantType = CORBA::TypeCode::PR_enum_tc("IDL:MCC7500SDK/EVariantType:1.0", "EVariantType", _0RL_enumMember_MCC7500SDK_mEVariantType, 15, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_EVariantType = _0RL_tc_MCC7500SDK_mEVariantType;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_EVariantType = _0RL_tc_MCC7500SDK_mEVariantType;
#endif

static CORBA::TypeCode_ptr _0RL_ft_MCC7500SDK_mUVariant = CORBA::TypeCode::PR_forward_tc("IDL:MCC7500SDK/UVariant:1.0", &_0RL_tcTrack);
#define _0RL_tc_MCC7500SDK_mUVariant _0RL_ft_MCC7500SDK_mUVariant

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mParameters = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/Parameters:1.0", "Parameters", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_MCC7500SDK_mUVariant, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_Parameters = _0RL_tc_MCC7500SDK_mParameters;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_Parameters = _0RL_tc_MCC7500SDK_mParameters;
#endif

static CORBA::PR_unionMember _0RL_unionMember_MCC7500SDK_mUVariant[] = {
  {"V_UINT8", CORBA::TypeCode::PR_octet_tc(), MCC7500SDK::eUINT8_T},
  {"V_UINT16", CORBA::TypeCode::PR_ushort_tc(), MCC7500SDK::eUINT16_T},
  {"V_UINT32", CORBA::TypeCode::PR_ulong_tc(), MCC7500SDK::eUINT32_T},
  {"V_UINT64", CORBA::TypeCode::PR_ulonglong_tc(), MCC7500SDK::eUINT64_T},
  {"V_INT8", CORBA::TypeCode::PR_char_tc(), MCC7500SDK::eINT8_T},
  {"V_INT16", CORBA::TypeCode::PR_short_tc(), MCC7500SDK::eINT16_T},
  {"V_INT32", CORBA::TypeCode::PR_long_tc(), MCC7500SDK::eINT32_T},
  {"V_INT64", CORBA::TypeCode::PR_longlong_tc(), MCC7500SDK::eINT64_T},
  {"V_FLOAT32", CORBA::TypeCode::PR_float_tc(), MCC7500SDK::eFLOAT32_T},
  {"V_FLOAT64", CORBA::TypeCode::PR_double_tc(), MCC7500SDK::eFLOAT64_T},
  {"V_BOOLEAN", CORBA::TypeCode::PR_boolean_tc(), MCC7500SDK::eBOOLEAN_T},
  {"V_SEQUENCE", _0RL_tc_MCC7500SDK_mParameters, MCC7500SDK::eSEQUENCE_T},
  {"V_STRING", CORBA::TypeCode::PR_string_tc(0, &_0RL_tcTrack), MCC7500SDK::eSTRING_T},
  {"V_WSTRING", CORBA::TypeCode::PR_wstring_tc(0, &_0RL_tcTrack), MCC7500SDK::eWSTRING_T},
  {"V_EMPTY", CORBA::TypeCode::PR_octet_tc(), MCC7500SDK::eEMPTY_T}
};
#ifdef _0RL_tc_MCC7500SDK_mUVariant
#  undef _0RL_tc_MCC7500SDK_mUVariant
#endif
static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mUVariant = CORBA::TypeCode::PR_union_tc("IDL:MCC7500SDK/UVariant:1.0", "UVariant", _0RL_tc_MCC7500SDK_mEVariantType, _0RL_unionMember_MCC7500SDK_mUVariant, 15, -1, &_0RL_tcTrack);
#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_UVariant = _0RL_tc_MCC7500SDK_mUVariant;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_UVariant = _0RL_tc_MCC7500SDK_mUVariant;
#endif


static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mVersion[] = {
  {"Major", _0RL_tc_MCC7500SDK_mBYTE},
  {"Minor", _0RL_tc_MCC7500SDK_mBYTE}
};

#ifdef _0RL_tc_MCC7500SDK_mVersion
#  undef _0RL_tc_MCC7500SDK_mVersion
#endif
static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mVersion = CORBA::TypeCode::PR_struct_tc("IDL:MCC7500SDK/Version:1.0", "Version", _0RL_structmember_MCC7500SDK_mVersion, 2, &_0RL_tcTrack);

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_Version = _0RL_tc_MCC7500SDK_mVersion;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_Version = _0RL_tc_MCC7500SDK_mVersion;
#endif


static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mMETHOD__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/METHOD_ID:1.0", "METHOD_ID", CORBA::TypeCode::PR_short_tc(), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_METHOD_ID = _0RL_tc_MCC7500SDK_mMETHOD__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_METHOD_ID = _0RL_tc_MCC7500SDK_mMETHOD__ID;
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mRESPONSE__ID = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/RESPONSE_ID:1.0", "RESPONSE_ID", _0RL_tc_MCC7500SDK_mWORD, &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_RESPONSE_ID = _0RL_tc_MCC7500SDK_mRESPONSE__ID;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_RESPONSE_ID = _0RL_tc_MCC7500SDK_mRESPONSE__ID;
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_IAPIResponse = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIResponse:1.0", "IAPIResponse", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_IAPIResponse = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIResponse:1.0", "IAPIResponse", &_0RL_tcTrack);
#endif


static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequestServer/AnotherUserAlreadyRegistered:1.0", "AnotherUserAlreadyRegistered", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::_tc_AnotherUserAlreadyRegistered = _0RL_tc_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered;


static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail[] = {
  {"ErrorCode", CORBA::TypeCode::PR_long_tc()}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequestServer/RegistrationInternalFail:1.0", "RegistrationInternalFail", _0RL_structmember_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail, 1, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::_tc_RegistrationInternalFail = _0RL_tc_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail;



static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequestServer/UnsupportedVersion:1.0", "UnsupportedVersion", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::_tc_UnsupportedVersion = _0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion;



static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnknownClientID = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequestServer/UnknownClientID:1.0", "UnknownClientID", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequestServer::_tc_UnknownClientID = _0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnknownClientID;


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_IAPIRequestServer = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIRequestServer:1.0", "IAPIRequestServer", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_IAPIRequestServer = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIRequestServer:1.0", "IAPIRequestServer", &_0RL_tcTrack);
#endif

#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_IBaseAPIRequest = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IBaseAPIRequest:1.0", "IBaseAPIRequest", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_IBaseAPIRequest = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IBaseAPIRequest:1.0", "IBaseAPIRequest", &_0RL_tcTrack);
#endif

static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequest_mUnknownApiRequest[] = {
  {"methodId", _0RL_tc_MCC7500SDK_mMETHOD__ID}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest_mUnknownApiRequest = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest/UnknownApiRequest:1.0", "UnknownApiRequest", _0RL_structmember_MCC7500SDK_mIAPIRequest_mUnknownApiRequest, 1, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::_tc_UnknownApiRequest = _0RL_tc_MCC7500SDK_mIAPIRequest_mUnknownApiRequest;


static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch[] = {
  {"parameter_num", CORBA::TypeCode::PR_octet_tc()},
  {"actual", _0RL_tc_MCC7500SDK_mEVariantType},
  {"expected", _0RL_tc_MCC7500SDK_mEVariantType},
  {"methodId", _0RL_tc_MCC7500SDK_mMETHOD__ID}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest/ParameterTypeMismatch:1.0", "ParameterTypeMismatch", _0RL_structmember_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch, 4, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::_tc_ParameterTypeMismatch = _0RL_tc_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch;


static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequest_mParameterCountMismatch[] = {
  {"actual", CORBA::TypeCode::PR_octet_tc()},
  {"expected", CORBA::TypeCode::PR_octet_tc()},
  {"methodId", _0RL_tc_MCC7500SDK_mMETHOD__ID}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest_mParameterCountMismatch = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest/ParameterCountMismatch:1.0", "ParameterCountMismatch", _0RL_structmember_MCC7500SDK_mIAPIRequest_mParameterCountMismatch, 3, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::_tc_ParameterCountMismatch = _0RL_tc_MCC7500SDK_mIAPIRequest_mParameterCountMismatch;


static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail[] = {
  {"ErrorCode", CORBA::TypeCode::PR_long_tc()},
  {"methodId", _0RL_tc_MCC7500SDK_mMETHOD__ID}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest/ApiRequestInternalFail:1.0", "ApiRequestInternalFail", _0RL_structmember_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail, 2, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest::_tc_ApiRequestInternalFail = _0RL_tc_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail;


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_IAPIRequest = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIRequest:1.0", "IAPIRequest", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_IAPIRequest = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIRequest:1.0", "IAPIRequest", &_0RL_tcTrack);
#endif

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mResponseIDs = CORBA::TypeCode::PR_alias_tc("IDL:MCC7500SDK/ResponseIDs:1.0", "ResponseIDs", CORBA::TypeCode::PR_sequence_tc(0, _0RL_tc_MCC7500SDK_mRESPONSE__ID, &_0RL_tcTrack), &_0RL_tcTrack);


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_ResponseIDs = _0RL_tc_MCC7500SDK_mResponseIDs;
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_ResponseIDs = _0RL_tc_MCC7500SDK_mResponseIDs;
#endif

static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException[] = {
  {"responseID", _0RL_tc_MCC7500SDK_mRESPONSE__ID}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest2/InvalidResponseIdException:1.0", "InvalidResponseIdException", _0RL_structmember_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException, 1, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest2::_tc_InvalidResponseIdException = _0RL_tc_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException;


static CORBA::PR_structMember _0RL_structmember_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException[] = {
  {"errorCode", CORBA::TypeCode::PR_long_tc()},
  {"responseID", _0RL_tc_MCC7500SDK_mRESPONSE__ID}
};

static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest2/FilterInternalFailureException:1.0", "FilterInternalFailureException", _0RL_structmember_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException, 2, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest2::_tc_FilterInternalFailureException = _0RL_tc_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException;



static CORBA::TypeCode_ptr _0RL_tc_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException = CORBA::TypeCode::PR_exception_tc("IDL:MCC7500SDK/IAPIRequest2/ClientNotRegisteredException:1.0", "ClientNotRegisteredException", (CORBA::PR_structMember*) 0, 0, &_0RL_tcTrack);
const CORBA::TypeCode_ptr MCC7500SDK::IAPIRequest2::_tc_ClientNotRegisteredException = _0RL_tc_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException;


#if defined(HAS_Cplusplus_Namespace) && defined(_MSC_VER)
// MSVC++ does not give the constant external linkage otherwise.
namespace MCC7500SDK { 
  const ::CORBA::TypeCode_ptr _tc_IAPIRequest2 = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIRequest2:1.0", "IAPIRequest2", &_0RL_tcTrack);
} 
#else
const ::CORBA::TypeCode_ptr MCC7500SDK::_tc_IAPIRequest2 = CORBA::TypeCode::PR_interface_tc("IDL:MCC7500SDK/IAPIRequest2:1.0", "IAPIRequest2", &_0RL_tcTrack);
#endif

static void _0RL_MCC7500SDK_mEVariantType_marshal_fn(cdrStream& _s, void* _v)
{
  MCC7500SDK::EVariantType* _p = (MCC7500SDK::EVariantType*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mEVariantType_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::EVariantType* _p = (MCC7500SDK::EVariantType*)_v;
  *_p <<= _s;
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::EVariantType _s)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mEVariantType,
               _0RL_MCC7500SDK_mEVariantType_marshal_fn,
               &_s);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::EVariantType& _s)
{
  return _a.PR_extract(_0RL_tc_MCC7500SDK_mEVariantType,
                       _0RL_MCC7500SDK_mEVariantType_unmarshal_fn,
                       &_s);
}

static void _0RL_MCC7500SDK_mParameters_marshal_fn(cdrStream& _s, void* _v)
{
  MCC7500SDK::Parameters* _p = (MCC7500SDK::Parameters*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mParameters_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::Parameters* _p = new MCC7500SDK::Parameters;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mParameters_destructor_fn(void* _v)
{
  MCC7500SDK::Parameters* _p = (MCC7500SDK::Parameters*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::Parameters& _s)
{
  MCC7500SDK::Parameters* _p = new MCC7500SDK::Parameters(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mParameters,
               _0RL_MCC7500SDK_mParameters_marshal_fn,
               _0RL_MCC7500SDK_mParameters_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::Parameters* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mParameters,
               _0RL_MCC7500SDK_mParameters_marshal_fn,
               _0RL_MCC7500SDK_mParameters_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::Parameters*& _sp)
{
  return _a >>= (const MCC7500SDK::Parameters*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::Parameters*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mParameters,
                    _0RL_MCC7500SDK_mParameters_unmarshal_fn,
                    _0RL_MCC7500SDK_mParameters_marshal_fn,
                    _0RL_MCC7500SDK_mParameters_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::Parameters*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MCC7500SDK_mUVariant_marshal_fn(cdrStream& _s, void* _v)
{
  MCC7500SDK::UVariant* _p = (MCC7500SDK::UVariant*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mUVariant_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::UVariant* _p = new MCC7500SDK::UVariant;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mUVariant_destructor_fn(void* _v)
{
  MCC7500SDK::UVariant* _p = (MCC7500SDK::UVariant*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::UVariant& _s)
{
  MCC7500SDK::UVariant* _p = new MCC7500SDK::UVariant(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mUVariant,
               _0RL_MCC7500SDK_mUVariant_marshal_fn,
               _0RL_MCC7500SDK_mUVariant_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::UVariant* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mUVariant,
               _0RL_MCC7500SDK_mUVariant_marshal_fn,
               _0RL_MCC7500SDK_mUVariant_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::UVariant*& _sp)
{
  return _a >>= (const MCC7500SDK::UVariant*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::UVariant*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mUVariant,
                    _0RL_MCC7500SDK_mUVariant_unmarshal_fn,
                    _0RL_MCC7500SDK_mUVariant_marshal_fn,
                    _0RL_MCC7500SDK_mUVariant_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::UVariant*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MCC7500SDK_mVersion_marshal_fn(cdrStream& _s, void* _v)
{
  MCC7500SDK::Version* _p = (MCC7500SDK::Version*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mVersion_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::Version* _p = new MCC7500SDK::Version;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mVersion_destructor_fn(void* _v)
{
  MCC7500SDK::Version* _p = (MCC7500SDK::Version*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::Version& _s)
{
  MCC7500SDK::Version* _p = new MCC7500SDK::Version(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mVersion,
               _0RL_MCC7500SDK_mVersion_marshal_fn,
               _0RL_MCC7500SDK_mVersion_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::Version* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mVersion,
               _0RL_MCC7500SDK_mVersion_marshal_fn,
               _0RL_MCC7500SDK_mVersion_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::Version*& _sp)
{
  return _a >>= (const MCC7500SDK::Version*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::Version*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mVersion,
                    _0RL_MCC7500SDK_mVersion_unmarshal_fn,
                    _0RL_MCC7500SDK_mVersion_marshal_fn,
                    _0RL_MCC7500SDK_mVersion_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::Version*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_MCC7500SDK_mIAPIResponse_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_MCC7500SDK_mIAPIResponse_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(MCC7500SDK::IAPIResponse::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_MCC7500SDK_mIAPIResponse_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIResponse_ptr _o)
{
  MCC7500SDK::IAPIResponse_ptr _no = MCC7500SDK::IAPIResponse::_duplicate(_o);
  _a.PR_insert(MCC7500SDK::_tc_IAPIResponse,
               _0RL_MCC7500SDK_mIAPIResponse_marshal_fn,
               _0RL_MCC7500SDK_mIAPIResponse_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIResponse_ptr* _op)
{
  _a.PR_insert(MCC7500SDK::_tc_IAPIResponse,
               _0RL_MCC7500SDK_mIAPIResponse_marshal_fn,
               _0RL_MCC7500SDK_mIAPIResponse_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = MCC7500SDK::IAPIResponse::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIResponse_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(MCC7500SDK::_tc_IAPIResponse,
                    _0RL_MCC7500SDK_mIAPIResponse_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIResponse_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIResponse_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (MCC7500SDK::IAPIResponse_ptr)_r->_ptrToObjRef(MCC7500SDK::IAPIResponse::_PD_repoId);
    else
      _o = MCC7500SDK::IAPIResponse::_nil();
    return 1;
  }
  return 0;
}


static void _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _p = (const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _p = new MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _p = (MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered& _s)
{
  MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _p = new MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered,
               _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered,
               _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_destructor_fn,
               (MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered & _ex = (const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered* _ex = (const MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered() {
    MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered;
    MCC7500SDK::IAPIRequestServer::AnotherUserAlreadyRegistered::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mAnotherUserAlreadyRegistered_;


static void _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _p = (const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _p = new MCC7500SDK::IAPIRequestServer::RegistrationInternalFail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _p = (MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail& _s)
{
  MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _p = new MCC7500SDK::IAPIRequestServer::RegistrationInternalFail(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail,
               _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail,
               _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_destructor_fn,
               (MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail & _ex = (const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail* _ex = (const MCC7500SDK::IAPIRequestServer::RegistrationInternalFail*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail() {
    MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail;
    MCC7500SDK::IAPIRequestServer::RegistrationInternalFail::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mRegistrationInternalFail_;


static void _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _p = (const MCC7500SDK::IAPIRequestServer::UnsupportedVersion*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _p = new MCC7500SDK::IAPIRequestServer::UnsupportedVersion;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _p = (MCC7500SDK::IAPIRequestServer::UnsupportedVersion*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnsupportedVersion& _s)
{
  MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _p = new MCC7500SDK::IAPIRequestServer::UnsupportedVersion(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_destructor_fn,
               (MCC7500SDK::IAPIRequestServer::UnsupportedVersion*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnsupportedVersion*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequestServer::UnsupportedVersion*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequestServer::UnsupportedVersion & _ex = (const MCC7500SDK::IAPIRequestServer::UnsupportedVersion &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequestServer::UnsupportedVersion* _ex = (const MCC7500SDK::IAPIRequestServer::UnsupportedVersion*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion() {
    MCC7500SDK::IAPIRequestServer::UnsupportedVersion::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion;
    MCC7500SDK::IAPIRequestServer::UnsupportedVersion::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnsupportedVersion_;


static void _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequestServer::UnknownClientID* _p = (const MCC7500SDK::IAPIRequestServer::UnknownClientID*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequestServer::UnknownClientID* _p = new MCC7500SDK::IAPIRequestServer::UnknownClientID;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequestServer::UnknownClientID* _p = (MCC7500SDK::IAPIRequestServer::UnknownClientID*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnknownClientID& _s)
{
  MCC7500SDK::IAPIRequestServer::UnknownClientID* _p = new MCC7500SDK::IAPIRequestServer::UnknownClientID(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnknownClientID,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnknownClientID* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnknownClientID,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_destructor_fn,
               (MCC7500SDK::IAPIRequestServer::UnknownClientID*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequestServer::UnknownClientID*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequestServer_mUnknownClientID,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_mUnknownClientID_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequestServer::UnknownClientID*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequestServer::UnknownClientID & _ex = (const MCC7500SDK::IAPIRequestServer::UnknownClientID &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequestServer::UnknownClientID* _ex = (const MCC7500SDK::IAPIRequestServer::UnknownClientID*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID() {
    MCC7500SDK::IAPIRequestServer::UnknownClientID::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID;
    MCC7500SDK::IAPIRequestServer::UnknownClientID::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequestServer_mUnknownClientID_;

static void _0RL_MCC7500SDK_mIAPIRequestServer_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(MCC7500SDK::IAPIRequestServer::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_MCC7500SDK_mIAPIRequestServer_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequestServer_ptr _o)
{
  MCC7500SDK::IAPIRequestServer_ptr _no = MCC7500SDK::IAPIRequestServer::_duplicate(_o);
  _a.PR_insert(MCC7500SDK::_tc_IAPIRequestServer,
               _0RL_MCC7500SDK_mIAPIRequestServer_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequestServer_ptr* _op)
{
  _a.PR_insert(MCC7500SDK::_tc_IAPIRequestServer,
               _0RL_MCC7500SDK_mIAPIRequestServer_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequestServer_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = MCC7500SDK::IAPIRequestServer::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIRequestServer_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(MCC7500SDK::_tc_IAPIRequestServer,
                    _0RL_MCC7500SDK_mIAPIRequestServer_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequestServer_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (MCC7500SDK::IAPIRequestServer_ptr)_r->_ptrToObjRef(MCC7500SDK::IAPIRequestServer::_PD_repoId);
    else
      _o = MCC7500SDK::IAPIRequestServer::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_MCC7500SDK_mIBaseAPIRequest_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_MCC7500SDK_mIBaseAPIRequest_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(MCC7500SDK::IBaseAPIRequest::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_MCC7500SDK_mIBaseAPIRequest_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IBaseAPIRequest_ptr _o)
{
  MCC7500SDK::IBaseAPIRequest_ptr _no = MCC7500SDK::IBaseAPIRequest::_duplicate(_o);
  _a.PR_insert(MCC7500SDK::_tc_IBaseAPIRequest,
               _0RL_MCC7500SDK_mIBaseAPIRequest_marshal_fn,
               _0RL_MCC7500SDK_mIBaseAPIRequest_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IBaseAPIRequest_ptr* _op)
{
  _a.PR_insert(MCC7500SDK::_tc_IBaseAPIRequest,
               _0RL_MCC7500SDK_mIBaseAPIRequest_marshal_fn,
               _0RL_MCC7500SDK_mIBaseAPIRequest_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = MCC7500SDK::IBaseAPIRequest::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IBaseAPIRequest_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(MCC7500SDK::_tc_IBaseAPIRequest,
                    _0RL_MCC7500SDK_mIBaseAPIRequest_unmarshal_fn,
                    _0RL_MCC7500SDK_mIBaseAPIRequest_marshal_fn,
                    _0RL_MCC7500SDK_mIBaseAPIRequest_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (MCC7500SDK::IBaseAPIRequest_ptr)_r->_ptrToObjRef(MCC7500SDK::IBaseAPIRequest::_PD_repoId);
    else
      _o = MCC7500SDK::IBaseAPIRequest::_nil();
    return 1;
  }
  return 0;
}


static void _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest::UnknownApiRequest* _p = (const MCC7500SDK::IAPIRequest::UnknownApiRequest*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest::UnknownApiRequest* _p = new MCC7500SDK::IAPIRequest::UnknownApiRequest;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest::UnknownApiRequest* _p = (MCC7500SDK::IAPIRequest::UnknownApiRequest*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::UnknownApiRequest& _s)
{
  MCC7500SDK::IAPIRequest::UnknownApiRequest* _p = new MCC7500SDK::IAPIRequest::UnknownApiRequest(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mUnknownApiRequest,
               _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::UnknownApiRequest* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mUnknownApiRequest,
               _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_destructor_fn,
               (MCC7500SDK::IAPIRequest::UnknownApiRequest*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::UnknownApiRequest*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest_mUnknownApiRequest,
                    _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mUnknownApiRequest_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest::UnknownApiRequest*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest::UnknownApiRequest & _ex = (const MCC7500SDK::IAPIRequest::UnknownApiRequest &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest::UnknownApiRequest* _ex = (const MCC7500SDK::IAPIRequest::UnknownApiRequest*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest() {
    MCC7500SDK::IAPIRequest::UnknownApiRequest::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest;
    MCC7500SDK::IAPIRequest::UnknownApiRequest::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mUnknownApiRequest_;


static void _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _p = (const MCC7500SDK::IAPIRequest::ParameterTypeMismatch*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _p = new MCC7500SDK::IAPIRequest::ParameterTypeMismatch;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _p = (MCC7500SDK::IAPIRequest::ParameterTypeMismatch*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterTypeMismatch& _s)
{
  MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _p = new MCC7500SDK::IAPIRequest::ParameterTypeMismatch(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_destructor_fn,
               (MCC7500SDK::IAPIRequest::ParameterTypeMismatch*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterTypeMismatch*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch,
                    _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mParameterTypeMismatch_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest::ParameterTypeMismatch*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest::ParameterTypeMismatch & _ex = (const MCC7500SDK::IAPIRequest::ParameterTypeMismatch &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest::ParameterTypeMismatch* _ex = (const MCC7500SDK::IAPIRequest::ParameterTypeMismatch*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch() {
    MCC7500SDK::IAPIRequest::ParameterTypeMismatch::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch;
    MCC7500SDK::IAPIRequest::ParameterTypeMismatch::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterTypeMismatch_;


static void _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest::ParameterCountMismatch* _p = (const MCC7500SDK::IAPIRequest::ParameterCountMismatch*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest::ParameterCountMismatch* _p = new MCC7500SDK::IAPIRequest::ParameterCountMismatch;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest::ParameterCountMismatch* _p = (MCC7500SDK::IAPIRequest::ParameterCountMismatch*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterCountMismatch& _s)
{
  MCC7500SDK::IAPIRequest::ParameterCountMismatch* _p = new MCC7500SDK::IAPIRequest::ParameterCountMismatch(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mParameterCountMismatch,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterCountMismatch* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mParameterCountMismatch,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_destructor_fn,
               (MCC7500SDK::IAPIRequest::ParameterCountMismatch*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ParameterCountMismatch*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest_mParameterCountMismatch,
                    _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mParameterCountMismatch_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest::ParameterCountMismatch*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest::ParameterCountMismatch & _ex = (const MCC7500SDK::IAPIRequest::ParameterCountMismatch &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest::ParameterCountMismatch* _ex = (const MCC7500SDK::IAPIRequest::ParameterCountMismatch*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch() {
    MCC7500SDK::IAPIRequest::ParameterCountMismatch::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch;
    MCC7500SDK::IAPIRequest::ParameterCountMismatch::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mParameterCountMismatch_;


static void _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _p = (const MCC7500SDK::IAPIRequest::ApiRequestInternalFail*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _p = new MCC7500SDK::IAPIRequest::ApiRequestInternalFail;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _p = (MCC7500SDK::IAPIRequest::ApiRequestInternalFail*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ApiRequestInternalFail& _s)
{
  MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _p = new MCC7500SDK::IAPIRequest::ApiRequestInternalFail(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail,
               _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail,
               _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_destructor_fn,
               (MCC7500SDK::IAPIRequest::ApiRequestInternalFail*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest::ApiRequestInternalFail*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail,
                    _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_mApiRequestInternalFail_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest::ApiRequestInternalFail*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest::ApiRequestInternalFail & _ex = (const MCC7500SDK::IAPIRequest::ApiRequestInternalFail &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest::ApiRequestInternalFail* _ex = (const MCC7500SDK::IAPIRequest::ApiRequestInternalFail*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail() {
    MCC7500SDK::IAPIRequest::ApiRequestInternalFail::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail;
    MCC7500SDK::IAPIRequest::ApiRequestInternalFail::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest_mApiRequestInternalFail_;

static void _0RL_MCC7500SDK_mIAPIRequest_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_MCC7500SDK_mIAPIRequest_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(MCC7500SDK::IAPIRequest::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_MCC7500SDK_mIAPIRequest_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest_ptr _o)
{
  MCC7500SDK::IAPIRequest_ptr _no = MCC7500SDK::IAPIRequest::_duplicate(_o);
  _a.PR_insert(MCC7500SDK::_tc_IAPIRequest,
               _0RL_MCC7500SDK_mIAPIRequest_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest_ptr* _op)
{
  _a.PR_insert(MCC7500SDK::_tc_IAPIRequest,
               _0RL_MCC7500SDK_mIAPIRequest_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = MCC7500SDK::IAPIRequest::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIRequest_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(MCC7500SDK::_tc_IAPIRequest,
                    _0RL_MCC7500SDK_mIAPIRequest_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (MCC7500SDK::IAPIRequest_ptr)_r->_ptrToObjRef(MCC7500SDK::IAPIRequest::_PD_repoId);
    else
      _o = MCC7500SDK::IAPIRequest::_nil();
    return 1;
  }
  return 0;
}

static void _0RL_MCC7500SDK_mResponseIDs_marshal_fn(cdrStream& _s, void* _v)
{
  MCC7500SDK::ResponseIDs* _p = (MCC7500SDK::ResponseIDs*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mResponseIDs_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::ResponseIDs* _p = new MCC7500SDK::ResponseIDs;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mResponseIDs_destructor_fn(void* _v)
{
  MCC7500SDK::ResponseIDs* _p = (MCC7500SDK::ResponseIDs*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::ResponseIDs& _s)
{
  MCC7500SDK::ResponseIDs* _p = new MCC7500SDK::ResponseIDs(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mResponseIDs,
               _0RL_MCC7500SDK_mResponseIDs_marshal_fn,
               _0RL_MCC7500SDK_mResponseIDs_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::ResponseIDs* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mResponseIDs,
               _0RL_MCC7500SDK_mResponseIDs_marshal_fn,
               _0RL_MCC7500SDK_mResponseIDs_destructor_fn,
               _sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::ResponseIDs*& _sp)
{
  return _a >>= (const MCC7500SDK::ResponseIDs*&) _sp;
}
::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::ResponseIDs*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mResponseIDs,
                    _0RL_MCC7500SDK_mResponseIDs_unmarshal_fn,
                    _0RL_MCC7500SDK_mResponseIDs_marshal_fn,
                    _0RL_MCC7500SDK_mResponseIDs_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::ResponseIDs*)_v;
    return 1;
  }
  return 0;
}


static void _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _p = (const MCC7500SDK::IAPIRequest2::InvalidResponseIdException*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _p = new MCC7500SDK::IAPIRequest2::InvalidResponseIdException;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _p = (MCC7500SDK::IAPIRequest2::InvalidResponseIdException*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::InvalidResponseIdException& _s)
{
  MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _p = new MCC7500SDK::IAPIRequest2::InvalidResponseIdException(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException,
               _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException,
               _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_destructor_fn,
               (MCC7500SDK::IAPIRequest2::InvalidResponseIdException*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::InvalidResponseIdException*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException,
                    _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest2::InvalidResponseIdException*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest2::InvalidResponseIdException & _ex = (const MCC7500SDK::IAPIRequest2::InvalidResponseIdException &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest2::InvalidResponseIdException* _ex = (const MCC7500SDK::IAPIRequest2::InvalidResponseIdException*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException() {
    MCC7500SDK::IAPIRequest2::InvalidResponseIdException::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException;
    MCC7500SDK::IAPIRequest2::InvalidResponseIdException::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mInvalidResponseIdException_;


static void _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _p = (const MCC7500SDK::IAPIRequest2::FilterInternalFailureException*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _p = new MCC7500SDK::IAPIRequest2::FilterInternalFailureException;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _p = (MCC7500SDK::IAPIRequest2::FilterInternalFailureException*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::FilterInternalFailureException& _s)
{
  MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _p = new MCC7500SDK::IAPIRequest2::FilterInternalFailureException(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException,
               _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException,
               _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_destructor_fn,
               (MCC7500SDK::IAPIRequest2::FilterInternalFailureException*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::FilterInternalFailureException*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException,
                    _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest2::FilterInternalFailureException*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest2::FilterInternalFailureException & _ex = (const MCC7500SDK::IAPIRequest2::FilterInternalFailureException &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest2::FilterInternalFailureException* _ex = (const MCC7500SDK::IAPIRequest2::FilterInternalFailureException*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException() {
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException;
    MCC7500SDK::IAPIRequest2::FilterInternalFailureException::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mFilterInternalFailureException_;


static void _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_marshal_fn(cdrStream& _s, void* _v)
{
  const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _p = (const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*)_v;
  *_p >>= _s;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_unmarshal_fn(cdrStream& _s, void*& _v)
{
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _p = new MCC7500SDK::IAPIRequest2::ClientNotRegisteredException;
  *_p <<= _s;
  _v = _p;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_destructor_fn(void* _v)
{
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _p = (MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*)_v;
  delete _p;
}

void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException& _s)
{
  MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _p = new MCC7500SDK::IAPIRequest2::ClientNotRegisteredException(_s);
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException,
               _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_destructor_fn,
               _p);
}
void operator<<=(::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _sp)
{
  _a.PR_insert(_0RL_tc_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException,
               _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_destructor_fn,
               (MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*)_sp);
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*& _sp)
{
  void* _v;
  if (_a.PR_extract(_0RL_tc_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException,
                    _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_destructor_fn,
                    _v)) {
    _sp = (const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*)_v;
    return 1;
  }
  return 0;
}

static void _0RL_insertToAny__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException(::CORBA::Any& _a, const ::CORBA::Exception& _e) {
  const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException & _ex = (const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException &) _e;
  operator<<=(_a,_ex);
}

static void _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException (::CORBA::Any& _a, const ::CORBA::Exception* _e) {
  const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException* _ex = (const MCC7500SDK::IAPIRequest2::ClientNotRegisteredException*) _e;
  operator<<=(_a,_ex);
}

class _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException {
public:
  _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException() {
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::insertToAnyFn = _0RL_insertToAny__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException;
    MCC7500SDK::IAPIRequest2::ClientNotRegisteredException::insertToAnyFnNCP = _0RL_insertToAnyNCP__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException;
  }
};
static _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException _0RL_insertToAny_Singleton__cMCC7500SDK_mIAPIRequest2_mClientNotRegisteredException_;

static void _0RL_MCC7500SDK_mIAPIRequest2_marshal_fn(cdrStream& _s, void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  omniObjRef::_marshal(_o, _s);
}
static void _0RL_MCC7500SDK_mIAPIRequest2_unmarshal_fn(cdrStream& _s, void*& _v)
{
  omniObjRef* _o = omniObjRef::_unMarshal(MCC7500SDK::IAPIRequest2::_PD_repoId, _s);
  _v = _o;
}
static void _0RL_MCC7500SDK_mIAPIRequest2_destructor_fn(void* _v)
{
  omniObjRef* _o = (omniObjRef*)_v;
  if (_o)
    omni::releaseObjRef(_o);
}

void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest2_ptr _o)
{
  MCC7500SDK::IAPIRequest2_ptr _no = MCC7500SDK::IAPIRequest2::_duplicate(_o);
  _a.PR_insert(MCC7500SDK::_tc_IAPIRequest2,
               _0RL_MCC7500SDK_mIAPIRequest2_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_destructor_fn,
               _no->_PR_getobj());
}
void operator<<=(::CORBA::Any& _a, MCC7500SDK::IAPIRequest2_ptr* _op)
{
  _a.PR_insert(MCC7500SDK::_tc_IAPIRequest2,
               _0RL_MCC7500SDK_mIAPIRequest2_marshal_fn,
               _0RL_MCC7500SDK_mIAPIRequest2_destructor_fn,
               (*_op)->_PR_getobj());
  *_op = MCC7500SDK::IAPIRequest2::_nil();
}

::CORBA::Boolean operator>>=(const ::CORBA::Any& _a, MCC7500SDK::IAPIRequest2_ptr& _o)
{
  void* _v;
  if (_a.PR_extract(MCC7500SDK::_tc_IAPIRequest2,
                    _0RL_MCC7500SDK_mIAPIRequest2_unmarshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_marshal_fn,
                    _0RL_MCC7500SDK_mIAPIRequest2_destructor_fn,
                    _v)) {
    omniObjRef* _r = (omniObjRef*)_v;
    if (_r)
      _o = (MCC7500SDK::IAPIRequest2_ptr)_r->_ptrToObjRef(MCC7500SDK::IAPIRequest2::_PD_repoId);
    else
      _o = MCC7500SDK::IAPIRequest2::_nil();
    return 1;
  }
  return 0;
}

