/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethod.h $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioMethod.h
//  Implementation of the Class RadioMethod
//  Generated by Enterprise Architect
//  Created on:      06-Nov-2003 08:32:16
//  Original author: Andy Parker
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////


#if !defined(RadioMethod_96770BC0_1AF8_4f8c_BDA3_FB5486E2BD8E__INCLUDED_)
#define RadioMethod_96770BC0_1AF8_4f8c_BDA3_FB5486E2BD8E__INCLUDED_

#include <string>
#include "app/radio/RadioTetraAgent/RadioProtocolLibrary/src/ITcpMethod.h"


/**
* This class encapulates the data associated with a radio method.
* @author Andy Parker
* @version 1.0
* @generator Enterprise Architect
* @created 06-Nov-2003 08:32:15
*/

namespace TA_IRS_App
{
	class RadioMethod : public ITcpMethod
	{
		public:

			typedef unsigned long RadioSessionReference;

		protected:

			RadioMethod(unsigned int methodLength, unsigned long methodType, RadioSessionReference SessionRef);

		public:
			virtual ~RadioMethod();


			void setTransactionId(unsigned long transactionId);
			/**
			* Return the specified length of the message header
			*/
			virtual unsigned long getMethodHeaderLength() const;
			/**
			* Set the specified length of the message header
			*/
			virtual void setMethodHeaderLength(unsigned int messageSize);
			/**
			* Return the specified length of the message header
			*/
			virtual unsigned long getShortStringLength() const;

			/*
			* getRadioSessionReference
			*
			* const is not needed since we will return a copy;
			*/
			RadioSessionReference getRadioSessionReference() {return m_radioSessionReference;}

            /** 
              * getSerialisationLevel
              *
              * This gets the level of serialisation that the agent must be set to
              * for this method to be serialised.
              *
              * @return a level 0-9 (9 is the default)
              */
            virtual unsigned char getSerialiseTransactionLevel() const;


		protected:

            static const unsigned char SERIALISATION_LEVEL_0;
            static const unsigned char SERIALISATION_LEVEL_1;
            static const unsigned char SERIALISATION_LEVEL_2;
            static const unsigned char SERIALISATION_LEVEL_3;
            static const unsigned char SERIALISATION_LEVEL_4;
            static const unsigned char SERIALISATION_LEVEL_5;
            static const unsigned char SERIALISATION_LEVEL_6;
            static const unsigned char SERIALISATION_LEVEL_7;
            static const unsigned char SERIALISATION_LEVEL_8;
            static const unsigned char SERIALISATION_LEVEL_9;


			RadioSessionReference m_radioSessionReference;

		private:


			/*
			* Disable the assignment and copy constructors
			*/
			RadioMethod& operator=(const RadioMethod &);
			RadioMethod( const RadioMethod& radioMethod); 
		
	};
};

#endif // !defined(RadioMethod_96770BC0_1AF8_4f8c_BDA3_FB5486E2BD8E__INCLUDED_)
