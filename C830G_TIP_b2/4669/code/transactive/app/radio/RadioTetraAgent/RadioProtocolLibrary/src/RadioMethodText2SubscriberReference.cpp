/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethodText2SubscriberReference.cpp $
  * @author:  Nick Jardine
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  * Implementation for radio Delete Reference API call
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioMethodText2SubscriberReference.cpp
//  Implementation of the Class RadioMethodText2SubscriberReference
//  Generated by Enterprise Architect
//  Created on:      10-Nov-2003 15:15:18
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////

#include "RadioMethodText2SubscriberReference.h"
#include "RadioProtocol.h"
#include "core/utilities/src/TAAssert.h"



namespace TA_IRS_App
{


    const unsigned int RadioMethodText2SubscriberReference::TEXT_2_SUBSCRIBER_REFERENCE_METHOD_LENGTH   = 32;
    const unsigned int RadioMethodText2SubscriberReference::REFERENCE_PARAMETER_START_POSITION          = 0;

    /**
    * Constructor
    * @param    sessionRef
    */
    RadioMethodText2SubscriberReference::RadioMethodText2SubscriberReference(RadioSessionReference sessionRef) 
                            : RadioMethod(TEXT_2_SUBSCRIBER_REFERENCE_METHOD_LENGTH,
                            METHOD_TEXT_2SR,sessionRef)
    {
	    FUNCTION_ENTRY("Constructor");
	    FUNCTION_EXIT;
    }


    RadioMethodText2SubscriberReference::~RadioMethodText2SubscriberReference()
    {
	    FUNCTION_ENTRY("Destructor");
	    FUNCTION_EXIT;
    }


    void RadioMethodText2SubscriberReference::setTextReference(std::string reference)
    {
	    FUNCTION_ENTRY("setTextReference");

        setParameterShortString(REFERENCE_PARAMETER_START_POSITION,reference);

	    FUNCTION_EXIT;
    }


}
