/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioEventReader.cpp $
  * @author:  Ripple
  * @version: $Revision: #3 $
  *
  * Last modification: $DateTime: 2010/09/23 18:48:34 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioEventReader.cpp
//  Implementation of the Class RadioEventReader
//  Generated by Enterprise Architect
//  Created on:      04-Nov-2003 13:29:05
//  Original author: 
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////

#include "RadioEventReader.h"
#include "RadioEvent.h"
#include "core/utilities/src/TAAssert.h"

using namespace TA_IRS_App;

RadioEventReader::RadioEventReader(RadioEvent& event,EventType eventType,EventLengthType parameterLength)
				 : m_event(event)
{
	// Check the type and size matches the expected event!
	TA_ASSERT(eventType==event.getEventType(),"Reader type does not match event type.");
	TA_ASSERT(parameterLength==event.getParameterLength(),"Reader parameter length does not match event parameter length.");
}

RadioEventReader::RadioEventReader(RadioEvent& event,EventType eventType)
				 : m_event(event)
{
	// Check the type and size matches the expected event!
	TA_ASSERT(eventType==event.getEventType(),"Reader type does not match event type.");
}

RadioEventReader::~RadioEventReader()
{

}

short RadioEventReader::getParameterShort(unsigned int position) const
{
	return m_event.getParameterShort(position);
}


unsigned long RadioEventReader::getParameterLong(unsigned int position) const
{
	return m_event.getParameterLong(position);
}


std::string RadioEventReader::getParameterShortString(unsigned int position) const
{
	std::string   value;

	for (int index=0;index<SHORTSTRING_LENGTH;index++)
	{
		char   nextChar = m_event.getParameterChar(index+position);
		if ((nextChar=='\0')||(nextChar=='\n')) break;
		value += nextChar;
	}
	return value;
}

unsigned char RadioEventReader::getParameterChar(unsigned int position) const
{
	return m_event.getParameterChar(position);
}

bool RadioEventReader::isStatusOK()
{
    // STATUS_OK declared in RadioProtocol.h
    return STATUS_OK == m_event.getStatus();
}

