/**
  * The source code in this file is the property of
  * Ripple Systems and is not for redistribution
  * in any form.
  *
  * Source:   $File: //depot/4669_T01271350/4669/transactive/app/radio/RadioTetraAgent/RadioProtocolLibrary/src/RadioMethod.cpp $
  * @author:  Ripple
  * @version: $Revision: #1 $
  *
  * Last modification: $DateTime: 2008/11/28 16:26:01 $
  * Last modified by:  $Author: builder $
  *
  */
///////////////////////////////////////////////////////////
//
//  RadioMethod.cpp
//  Implementation of the Class RadioMethod
//  Generated by Enterprise Architect
//  Created on:      06-Nov-2003 08:32:16
//  Original author: Andy Parker
//  
///////////////////////////////////////////////////////////
//  Modification history:
//  
//
///////////////////////////////////////////////////////////
#include "core/utilities/src/TAAssert.h"
#include "app/radio/RadioTetraAgent/RadioProtocolLibrary/src/ITcpEvent.h"
#include "RadioMethod.h"
#include "RadioProtocol.h"


#define METHOD_HEADER_LENGTH                          20
#define METHOD_HEADER_LENGTH_START_POSITION           0
#define METHOD_HEADER_SESSION_ID_START_POSITION       4
#define METHOD_HEADER_TRANSACTION_ID_START_POSITION   8
#define METHOD_HEADER_STATUS_START_POSITION           12
#define METHOD_HEADER_METHOD_START_POSITION           16




using namespace TA_IRS_App;

const unsigned char RadioMethod::SERIALISATION_LEVEL_0 = 0;
const unsigned char RadioMethod::SERIALISATION_LEVEL_1 = 1;
const unsigned char RadioMethod::SERIALISATION_LEVEL_2 = 2;
const unsigned char RadioMethod::SERIALISATION_LEVEL_3 = 3;
const unsigned char RadioMethod::SERIALISATION_LEVEL_4 = 4;
const unsigned char RadioMethod::SERIALISATION_LEVEL_5 = 5;
const unsigned char RadioMethod::SERIALISATION_LEVEL_6 = 6;
const unsigned char RadioMethod::SERIALISATION_LEVEL_7 = 7;
const unsigned char RadioMethod::SERIALISATION_LEVEL_8 = 8;
const unsigned char RadioMethod::SERIALISATION_LEVEL_9 = 9;


/*
* Constructor
*
* Creates a new radio method (message).
*
* @param    methodLength Length of parameter block for this message. 
* 
*/
RadioMethod::RadioMethod(unsigned int methodLength,unsigned long methodType,RadioSessionReference SessionRef)
		    : ITcpMethod(methodLength, METHOD_HEADER_LENGTH, METHOD_HEADER_LENGTH_START_POSITION),
			  m_radioSessionReference(SessionRef)
{
	// Save the method and session reference
	setLong(METHOD_HEADER_SESSION_ID_START_POSITION,SessionRef);
	setLong(METHOD_HEADER_METHOD_START_POSITION,methodType);
}


RadioMethod::~RadioMethod()
{
}


void RadioMethod::setTransactionId(unsigned long transactionId)
{
	setLong(METHOD_HEADER_TRANSACTION_ID_START_POSITION,transactionId);
}


unsigned long RadioMethod::getMethodHeaderLength() const
{
	return METHOD_HEADER_LENGTH;
}


void RadioMethod::setMethodHeaderLength(unsigned int messageSize)
{
	setLong(METHOD_HEADER_LENGTH_START_POSITION,messageSize);
}


unsigned long RadioMethod::getShortStringLength() const
{
	return SHORTSTRING_LENGTH;
}

unsigned char RadioMethod::getSerialiseTransactionLevel() const
{
    return SERIALISATION_LEVEL_9;
}

