import path sequence os string common "class" print option notfile ta-os ;
using gcc ;

path-constant 	HERE 		: . ;
constant		TA_OS		: [ class.new ta-os-class ] ;
constant		PREFIX		: [ path.join $(HERE) build [ $(TA_OS).identifier ] ] ;
constant		JOBS		: [ $(TA_OS).processor-numbers ] ;

rule guess-compiler ( )
{
	if [ os.name ] = LINUX
	{
		return linux-elf ;
	}
	
	if [ os.name ] = SOLARIS	
	{
		if [ $(TA_OS).sparc ]
		{
			return [ sequence.join solaris [ $(TA_OS).sparc-version ] gcc : - ] ;
		}
		else
		{
			return solaris-x86-gcc ;
		}
	}
}

CONFIG_COMPILER = [ guess-compiler ] ;

rule check-build ( )
{
	if [ path.exists $(PREFIX)/lib/libssl.so ]
	{
		return true ;
	}
}

if ! [ check-build ]
{
	notfile build-openssl : @build-openssl-action ;	
}

actions build-openssl-action
{
	chmod -R +x ./util
	chmod +x ./Configure
	./Configure $(CONFIG_COMPILER) shared --prefix=$(PREFIX)
	make -j$(JOBS)
	make install
}

if [ MATCH "(--ta-clean)" : [ modules.peek : ARGV ] ]
{
	SHELL "rm -rf $(PREFIX)" ;
	exit ;
}
