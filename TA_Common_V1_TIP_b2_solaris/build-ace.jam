import path sequence os string common "class" ta-os ta-version notfile print option ;
using gcc ;

path-constant 	HERE				: . ;
constant		ACE_VERSION 		: $(HERE:B) ;
path-constant	PREFIX				: $(HERE)/lib/$(IDENTIFIER) ;
path-constant	ACE_ROOT			: $(HERE)/ACE_wrappers ;
path-constant	CONFIG_H			: $(ACE_ROOT)/ace/config.h ;
path-constant	PLATFORM_MACROS_GNU	: $(ACE_ROOT)/include/makeinclude/platform_macros.GNU ;
constant		TA_OS				: [ class.new ta-os-class ] ;
constant		IDENTIFIER			: [ $(TA_OS).identifier ] ;
constant		JOBS				: [ $(TA_OS).processor-numbers ] ;
constant		DOLLOR_MARK			: $ ;

switch [ os.name ]
{
	case LINUX :
	{
		CONFIG_INCLUDE	= config-linux.h ;
		PLATFORM_CONFIG	= platform_linux.GNU ;
	}
	case SOLARIS :
	{
		CONFIG_INCLUDE	= [ sequence.join config-sunos [ $(TA_OS).version ] ".h" ] ;
		PLATFORM_CONFIG	= platform_sunos5_g++.GNU ;

		if [ ta-version.equal $(ACE_VERSION) : 5_6 ] && [ $(TA_OS).on-solaris-11 ]
		{
			CONFIG_INCLUDE	= config-sunos5.10.h ;
		}
	}
}

if ! [ check-build ]
{
	if $(ACE_VERSION) in 5_6 # NOTE: 6_0_4 cannot build if use autoconf
	{
		notfile build-ace : @build-ace-action-autoconf ;
	}
	else
	{
		make-config-h ;
		make-platform-macros ;
		notfile build-ace : @build-ace-action ;
	}
}

actions build-ace-action
{
	export ACE_ROOT=$(ACE_ROOT)
	cd $(ACE_ROOT)
	chmod -R +x $(ACE_ROOT)/bin
	chmod -R +x $(ACE_ROOT)/MPC

	echo '#include \"ace/$(CONFIG_INCLUDE)\"' > $(CONFIG_H)
	echo 'include $(DOLLOR_MARK)(ACE_ROOT)/include/makeinclude/$(PLATFORM_CONFIG)' > $(PLATFORM_MACROS_GNU) ;
	echo "INSTALL_PREFIX = $(PREFIX)" >> $(PLATFORM_MACROS_GNU) ;

	make -j$(JOBS)
	make install
}

actions build-ace-action-autoconf
{
	export ACE_ROOT=$(ACE_ROOT)
	cd $(ACE_ROOT)
	rm -rf build
	mkdir build
	cd build
	chmod -R +x $(ACE_ROOT)/bin
	chmod -R +x $(ACE_ROOT)/MPC
	chmod -R +x $(ACE_ROOT)/configure
	../configure --prefix=$(PREFIX)
	make -j$(JOBS)
	make install
}

if [ MATCH "(--show)" : [ modules.peek : ARGV ] ]
{
	for local var in ACE_VERSION ACE_ROOT PREFIX CONFIG_INCLUDE PLATFORM_CONFIG
	{
		print.lines $(var) $($(var)) : "\t" ;
	}
	exit ;
}

if [ MATCH "(--ta-clean)" : [ modules.peek : ARGV ] ]
{
	SHELL "rm -rf $(PREFIX)" ;
	exit ;
}
